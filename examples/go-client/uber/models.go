// Code generated by github.com/swaggest/swac v0.1.5, DO NOT EDIT.

package uber

import (
	"bytes"
	"encoding/json"
	"errors"
)

// Product structure is generated from "#/definitions/Product".
type Product struct {
	ID                   string                 `json:"product_id,omitempty"`   // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
	Description          string                 `json:"description,omitempty"`  // Description of product.
	DisplayName          string                 `json:"display_name,omitempty"` // Display name of product.
	Capacity             string                 `json:"capacity,omitempty"`     // Capacity of product. For example, 4 people.
	Image                string                 `json:"image,omitempty"`        // Image URL representing the product.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties
}

type marshalProduct Product

var ignoreKeysProduct = []string{
	"product_id",
	"description",
	"display_name",
	"capacity",
	"image",
}

// UnmarshalJSON decodes JSON.
func (i *Product) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalProduct(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysProduct {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = Product(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Product) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalProduct(i), i.AdditionalProperties)
}

// Error structure is generated from "#/definitions/Error".
type Error struct {
	Code                 int64                  `json:"code,omitempty"`
	Message              string                 `json:"message,omitempty"`
	Fields               string                 `json:"fields,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties
}

type marshalError Error

var ignoreKeysError = []string{
	"code",
	"message",
	"fields",
}

// UnmarshalJSON decodes JSON.
func (i *Error) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalError(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysError {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = Error(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Error) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalError(i), i.AdditionalProperties)
}

// PriceEstimate structure is generated from "#/definitions/PriceEstimate".
type PriceEstimate struct {
	ProductID            string                 `json:"product_id,omitempty"`       // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
	CurrencyCode         string                 `json:"currency_code,omitempty"`    // [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
	DisplayName          string                 `json:"display_name,omitempty"`     // Display name of product.
	Estimate             string                 `json:"estimate,omitempty"`         // Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
	LowEstimate          float64                `json:"low_estimate,omitempty"`     // Lower bound of the estimated price.
	HighEstimate         float64                `json:"high_estimate,omitempty"`    // Upper bound of the estimated price.
	SurgeMultiplier      float64                `json:"surge_multiplier,omitempty"` // Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
	AdditionalProperties map[string]interface{} `json:"-"`                          // All unmatched properties
}

type marshalPriceEstimate PriceEstimate

var ignoreKeysPriceEstimate = []string{
	"product_id",
	"currency_code",
	"display_name",
	"estimate",
	"low_estimate",
	"high_estimate",
	"surge_multiplier",
}

// UnmarshalJSON decodes JSON.
func (i *PriceEstimate) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalPriceEstimate(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysPriceEstimate {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = PriceEstimate(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i PriceEstimate) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalPriceEstimate(i), i.AdditionalProperties)
}

// Profile structure is generated from "#/definitions/Profile".
type Profile struct {
	FirstName            string                 `json:"first_name,omitempty"` // First name of the Uber user.
	LastName             string                 `json:"last_name,omitempty"`  // Last name of the Uber user.
	Email                string                 `json:"email,omitempty"`      // Email address of the Uber user
	Picture              string                 `json:"picture,omitempty"`    // Image URL of the Uber user.
	PromoCode            string                 `json:"promo_code,omitempty"` // Promo code of the Uber user.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties
}

type marshalProfile Profile

var ignoreKeysProfile = []string{
	"first_name",
	"last_name",
	"email",
	"picture",
	"promo_code",
}

// UnmarshalJSON decodes JSON.
func (i *Profile) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalProfile(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysProfile {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = Profile(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Profile) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalProfile(i), i.AdditionalProperties)
}

// Activities structure is generated from "#/definitions/Activities".
type Activities struct {
	Offset               int64                  `json:"offset,omitempty"`  // Position in pagination.
	Limit                int64                  `json:"limit,omitempty"`   // Number of items to retrieve (100 max).
	Count                int64                  `json:"count,omitempty"`   // Total number of items available.
	History              []Activity             `json:"history,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties
}

type marshalActivities Activities

var ignoreKeysActivities = []string{
	"offset",
	"limit",
	"count",
	"history",
}

// UnmarshalJSON decodes JSON.
func (i *Activities) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalActivities(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysActivities {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = Activities(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Activities) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalActivities(i), i.AdditionalProperties)
}

// Activity structure is generated from "#/definitions/Activity".
type Activity struct {
	Uuid                 string                 `json:"uuid,omitempty"` // Unique identifier for the activity
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties
}

type marshalActivity Activity

var ignoreKeysActivity = []string{
	"uuid",
}

// UnmarshalJSON decodes JSON.
func (i *Activity) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalActivity(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysActivity {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = Activity(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Activity) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalActivity(i), i.AdditionalProperties)
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := make([]byte, 1, 100)
	result[0] = '{'
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
