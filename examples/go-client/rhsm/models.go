// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package rhsm

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// GetAllocationsResponseValueOK structure is generated from "GetAllocations/response/ValueOK".
type GetAllocationsResponseValueOK struct {
	Body                 []AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor `json:"body,omitempty"`
	Pagination           *APIPageParam                                                            `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{}                                                   `json:"-"`                    // All unmatched properties.
}

type marshalGetAllocationsResponseValueOK GetAllocationsResponseValueOK

var knownKeysGetAllocationsResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueOK(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueOK(g), g.AdditionalProperties)
}

// AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor structure is generated from "#/definitions/Allocation".
//
// Allocation is an entity that consumes entitlements. Also referred as a Distributor.
type AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor struct {
	EntitlementQuantity  int64                  `json:"entitlementQuantity,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	SimpleContentAccess  string                 `json:"simpleContentAccess,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	URL                  string                 `json:"url,omitempty"`
	Uuid                 string                 `json:"uuid,omitempty"`
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor

var knownKeysAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor = []string{
	"entitlementQuantity",
	"name",
	"simpleContentAccess",
	"type",
	"url",
	"uuid",
	"version",
}

// UnmarshalJSON decodes JSON.
func (a *AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor(a))
	}

	return marshalUnion(marshalAllocationIsAnEntityThatConsumesEntitlementsAlsoReferredAsADistributor(a), a.AdditionalProperties)
}

// APIPageParam structure is generated from "#/definitions/APIPageParam".
//
// APIPageParam details the pagination parameters in APIResponse.
type APIPageParam struct {
	Count                int64                  `json:"count,omitempty"`
	Limit                int64                  `json:"limit,omitempty"`
	Offset               int64                  `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalAPIPageParam APIPageParam

var knownKeysAPIPageParam = []string{
	"count",
	"limit",
	"offset",
}

// UnmarshalJSON decodes JSON.
func (a *APIPageParam) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAPIPageParam(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAPIPageParam {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = APIPageParam(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a APIPageParam) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAPIPageParam(a))
	}

	return marshalUnion(marshalAPIPageParam(a), a.AdditionalProperties)
}

// GetAllocationsResponseValueBadRequest structure is generated from "GetAllocations/response/ValueBadRequest".
type GetAllocationsResponseValueBadRequest struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsResponseValueBadRequest GetAllocationsResponseValueBadRequest

var knownKeysGetAllocationsResponseValueBadRequest = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueBadRequest) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueBadRequest(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueBadRequest {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueBadRequest(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueBadRequest) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueBadRequest(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueBadRequest(g), g.AdditionalProperties)
}

// ErrorDetails structure is generated from "#/definitions/ErrorDetails".
//
// ErrorDetails details the Error in ErrorResponse.
type ErrorDetails struct {
	Code                 int64                  `json:"code,omitempty"`
	Message              string                 `json:"message,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties.
}

type marshalErrorDetails ErrorDetails

var knownKeysErrorDetails = []string{
	"code",
	"message",
}

// UnmarshalJSON decodes JSON.
func (e *ErrorDetails) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErrorDetails(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErrorDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErrorDetails(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErrorDetails) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErrorDetails(e))
	}

	return marshalUnion(marshalErrorDetails(e), e.AdditionalProperties)
}

// GetAllocationsResponseValueUnauthorized structure is generated from "GetAllocations/response/ValueUnauthorized".
type GetAllocationsResponseValueUnauthorized struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsResponseValueUnauthorized GetAllocationsResponseValueUnauthorized

var knownKeysGetAllocationsResponseValueUnauthorized = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueUnauthorized) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueUnauthorized(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueUnauthorized {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueUnauthorized(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueUnauthorized) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueUnauthorized(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueUnauthorized(g), g.AdditionalProperties)
}

// GetAllocationsResponseValueForbidden structure is generated from "GetAllocations/response/ValueForbidden".
type GetAllocationsResponseValueForbidden struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsResponseValueForbidden GetAllocationsResponseValueForbidden

var knownKeysGetAllocationsResponseValueForbidden = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueForbidden) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueForbidden(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueForbidden {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueForbidden(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueForbidden) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueForbidden(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueForbidden(g), g.AdditionalProperties)
}

// GetAllocationsResponseValueNotFound structure is generated from "GetAllocations/response/ValueNotFound".
type GetAllocationsResponseValueNotFound struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsResponseValueNotFound GetAllocationsResponseValueNotFound

var knownKeysGetAllocationsResponseValueNotFound = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueNotFound) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueNotFound(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueNotFound {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueNotFound(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueNotFound) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueNotFound(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueNotFound(g), g.AdditionalProperties)
}

// GetAllocationsResponseValueInternalServerError structure is generated from "GetAllocations/response/ValueInternalServerError".
type GetAllocationsResponseValueInternalServerError struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsResponseValueInternalServerError GetAllocationsResponseValueInternalServerError

var knownKeysGetAllocationsResponseValueInternalServerError = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsResponseValueInternalServerError) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsResponseValueInternalServerError(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsResponseValueInternalServerError {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsResponseValueInternalServerError(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsResponseValueInternalServerError) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsResponseValueInternalServerError(g))
	}

	return marshalUnion(marshalGetAllocationsResponseValueInternalServerError(g), g.AdditionalProperties)
}

// PostAllocationsResponseValueOK structure is generated from "PostAllocations/response/ValueOK".
type PostAllocationsResponseValueOK struct {
	Body                 *AllocationSummary     `json:"body,omitempty"` // Details of a subscription allocation.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPostAllocationsResponseValueOK PostAllocationsResponseValueOK

var knownKeysPostAllocationsResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (p *PostAllocationsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAllocationsResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAllocationsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAllocationsResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAllocationsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAllocationsResponseValueOK(p))
	}

	return marshalUnion(marshalPostAllocationsResponseValueOK(p), p.AdditionalProperties)
}

// AllocationSummary structure is generated from "#/definitions/AllocationSummary".
//
// details of a subscription allocation.
type AllocationSummary struct {
	ContentAccessMode            string                 `json:"contentAccessMode,omitempty"`
	CreatedBy                    string                 `json:"createdBy,omitempty"`
	CreatedDate                  string                 `json:"createdDate,omitempty"`                  // Date represents the date format used for API returns.
	EntitlementsAttachedQuantity int64                  `json:"entitlementsAttachedQuantity,omitempty"`
	LastModified                 string                 `json:"lastModified,omitempty"`                 // Date represents the date format used for API returns.
	Name                         string                 `json:"name,omitempty"`
	Type                         string                 `json:"type,omitempty"`
	Uuid                         string                 `json:"uuid,omitempty"`
	Version                      string                 `json:"version,omitempty"`
	AdditionalProperties         map[string]interface{} `json:"-"`                                      // All unmatched properties.
}

type marshalAllocationSummary AllocationSummary

var knownKeysAllocationSummary = []string{
	"contentAccessMode",
	"createdBy",
	"createdDate",
	"entitlementsAttachedQuantity",
	"lastModified",
	"name",
	"type",
	"uuid",
	"version",
}

// UnmarshalJSON decodes JSON.
func (a *AllocationSummary) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAllocationSummary(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAllocationSummary {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AllocationSummary(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AllocationSummary) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAllocationSummary(a))
	}

	return marshalUnion(marshalAllocationSummary(a), a.AdditionalProperties)
}

// GetAllocationsVersionsResponseValueOK structure is generated from "GetAllocationsVersions/response/ValueOK".
type GetAllocationsVersionsResponseValueOK struct {
	Body                 []AllocationVersion    `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetAllocationsVersionsResponseValueOK GetAllocationsVersionsResponseValueOK

var knownKeysGetAllocationsVersionsResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsVersionsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsVersionsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsVersionsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsVersionsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsVersionsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsVersionsResponseValueOK(g))
	}

	return marshalUnion(marshalGetAllocationsVersionsResponseValueOK(g), g.AdditionalProperties)
}

// AllocationVersion structure is generated from "#/definitions/AllocationVersion".
//
// List of satellite version.
type AllocationVersion struct {
	Description          string                 `json:"description,omitempty"`
	Value                string                 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalAllocationVersion AllocationVersion

var knownKeysAllocationVersion = []string{
	"description",
	"value",
}

// UnmarshalJSON decodes JSON.
func (a *AllocationVersion) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAllocationVersion(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAllocationVersion {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AllocationVersion(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AllocationVersion) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAllocationVersion(a))
	}

	return marshalUnion(marshalAllocationVersion(a), a.AdditionalProperties)
}

// GetAllocationsUuidResponseValueOK structure is generated from "GetAllocationsUuid/response/ValueOK".
type GetAllocationsUuidResponseValueOK struct {
	Body                 *AllocationDetails     `json:"body,omitempty"` // Details of a subscription allocation.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetAllocationsUuidResponseValueOK GetAllocationsUuidResponseValueOK

var knownKeysGetAllocationsUuidResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsUuidResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsUuidResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsUuidResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsUuidResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsUuidResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsUuidResponseValueOK(g))
	}

	return marshalUnion(marshalGetAllocationsUuidResponseValueOK(g), g.AdditionalProperties)
}

// AllocationDetails structure is generated from "#/definitions/AllocationDetails".
//
// details of a subscription allocation.
type AllocationDetails struct {
	CreatedBy                    string                        `json:"createdBy,omitempty"`
	CreatedDate                  string                        `json:"createdDate,omitempty"`                  // Date represents the date format used for API returns.
	EntitlementsAttached         *EntitlementsAttachedResponse `json:"entitlementsAttached,omitempty"`         // EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult.
	EntitlementsAttachedQuantity int64                         `json:"entitlementsAttachedQuantity,omitempty"`
	LastModified                 string                        `json:"lastModified,omitempty"`                 // Date represents the date format used for API returns.
	Name                         string                        `json:"name,omitempty"`
	SimpleContentAccess          string                        `json:"simpleContentAccess,omitempty"`
	Type                         string                        `json:"type,omitempty"`
	Uuid                         string                        `json:"uuid,omitempty"`
	Version                      string                        `json:"version,omitempty"`
	AdditionalProperties         map[string]interface{}        `json:"-"`                                      // All unmatched properties.
}

type marshalAllocationDetails AllocationDetails

var knownKeysAllocationDetails = []string{
	"createdBy",
	"createdDate",
	"entitlementsAttached",
	"entitlementsAttachedQuantity",
	"lastModified",
	"name",
	"simpleContentAccess",
	"type",
	"uuid",
	"version",
}

// UnmarshalJSON decodes JSON.
func (a *AllocationDetails) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAllocationDetails(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAllocationDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AllocationDetails(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AllocationDetails) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAllocationDetails(a))
	}

	return marshalUnion(marshalAllocationDetails(a), a.AdditionalProperties)
}

// EntitlementsAttachedResponse structure is generated from "#/definitions/EntitlementsAttachedResponse".
//
// EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult.
type EntitlementsAttachedResponse struct {
	Reason               string                              `json:"reason,omitempty"`
	Valid                bool                                `json:"valid,omitempty"`
	Value                []EntitlementsAttachedResponseValue `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`                // All unmatched properties.
}

type marshalEntitlementsAttachedResponse EntitlementsAttachedResponse

var knownKeysEntitlementsAttachedResponse = []string{
	"reason",
	"valid",
	"value",
}

// UnmarshalJSON decodes JSON.
func (e *EntitlementsAttachedResponse) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalEntitlementsAttachedResponse(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysEntitlementsAttachedResponse {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = EntitlementsAttachedResponse(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e EntitlementsAttachedResponse) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalEntitlementsAttachedResponse(e))
	}

	return marshalUnion(marshalEntitlementsAttachedResponse(e), e.AdditionalProperties)
}

// EntitlementsAttachedResponseValue structure is generated from "#/definitions/EntitlementsAttachedResponseValue".
//
// EntitlementsAttachedResponseValue represents the Value field in the EntitlementsAttachedResponse.
type EntitlementsAttachedResponseValue struct {
	ContractNumber       string                 `json:"contractNumber,omitempty"`
	EndDate              string                 `json:"endDate,omitempty"`             // Date represents the date format used for API returns.
	EntitlementQuantity  int64                  `json:"entitlementQuantity,omitempty"`
	ID                   string                 `json:"id,omitempty"`
	Sku                  string                 `json:"sku,omitempty"`
	StartDate            string                 `json:"startDate,omitempty"`           // Date represents the date format used for API returns.
	SubscriptionName     string                 `json:"subscriptionName,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalEntitlementsAttachedResponseValue EntitlementsAttachedResponseValue

var knownKeysEntitlementsAttachedResponseValue = []string{
	"contractNumber",
	"endDate",
	"entitlementQuantity",
	"id",
	"sku",
	"startDate",
	"subscriptionName",
}

// UnmarshalJSON decodes JSON.
func (e *EntitlementsAttachedResponseValue) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalEntitlementsAttachedResponseValue(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysEntitlementsAttachedResponseValue {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = EntitlementsAttachedResponseValue(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e EntitlementsAttachedResponseValue) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalEntitlementsAttachedResponseValue(e))
	}

	return marshalUnion(marshalEntitlementsAttachedResponseValue(e), e.AdditionalProperties)
}

// PutAllocationsUuidRequestBody structure is generated from "PutAllocationsUuid/request/body".
type PutAllocationsUuidRequestBody struct {
	SimpleContentAccess  string                 `json:"simpleContentAccess"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`                   // All unmatched properties.
}

type marshalPutAllocationsUuidRequestBody PutAllocationsUuidRequestBody

var knownKeysPutAllocationsUuidRequestBody = []string{
	"simpleContentAccess",
}

// UnmarshalJSON decodes JSON.
func (p *PutAllocationsUuidRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutAllocationsUuidRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutAllocationsUuidRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutAllocationsUuidRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutAllocationsUuidRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutAllocationsUuidRequestBody(p))
	}

	return marshalUnion(marshalPutAllocationsUuidRequestBody(p), p.AdditionalProperties)
}

// DeleteAllocationsUuidResponseValueGatewayTimeOut structure is generated from "DeleteAllocationsUuid/response/ValueGatewayTimeOut".
type DeleteAllocationsUuidResponseValueGatewayTimeOut struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalDeleteAllocationsUuidResponseValueGatewayTimeOut DeleteAllocationsUuidResponseValueGatewayTimeOut

var knownKeysDeleteAllocationsUuidResponseValueGatewayTimeOut = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (d *DeleteAllocationsUuidResponseValueGatewayTimeOut) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDeleteAllocationsUuidResponseValueGatewayTimeOut(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDeleteAllocationsUuidResponseValueGatewayTimeOut {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DeleteAllocationsUuidResponseValueGatewayTimeOut(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DeleteAllocationsUuidResponseValueGatewayTimeOut) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDeleteAllocationsUuidResponseValueGatewayTimeOut(d))
	}

	return marshalUnion(marshalDeleteAllocationsUuidResponseValueGatewayTimeOut(d), d.AdditionalProperties)
}

// PostAllocationsUuidEntitlementsResponseValueOK structure is generated from "PostAllocationsUuidEntitlements/response/ValueOK".
type PostAllocationsUuidEntitlementsResponseValueOK struct {
	Body                 *AllocationDetails     `json:"body,omitempty"` // Details of a subscription allocation.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPostAllocationsUuidEntitlementsResponseValueOK PostAllocationsUuidEntitlementsResponseValueOK

var knownKeysPostAllocationsUuidEntitlementsResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (p *PostAllocationsUuidEntitlementsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAllocationsUuidEntitlementsResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAllocationsUuidEntitlementsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAllocationsUuidEntitlementsResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAllocationsUuidEntitlementsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAllocationsUuidEntitlementsResponseValueOK(p))
	}

	return marshalUnion(marshalPostAllocationsUuidEntitlementsResponseValueOK(p), p.AdditionalProperties)
}

// PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK structure is generated from "PutAllocationsUuidEntitlementsEntitlementID/response/ValueOK".
type PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK struct {
	Body                 *AllocationDetails     `json:"body,omitempty"` // Details of a subscription allocation.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK

var knownKeysPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (p *PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutAllocationsUuidEntitlementsEntitlementIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK(p))
	}

	return marshalUnion(marshalPutAllocationsUuidEntitlementsEntitlementIDResponseValueOK(p), p.AdditionalProperties)
}

// GetAllocationsUuidExportResponseValueOK structure is generated from "GetAllocationsUuidExport/response/ValueOK".
type GetAllocationsUuidExportResponseValueOK struct {
	Body                 *ExportResponse        `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetAllocationsUuidExportResponseValueOK GetAllocationsUuidExportResponseValueOK

var knownKeysGetAllocationsUuidExportResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsUuidExportResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsUuidExportResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsUuidExportResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsUuidExportResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsUuidExportResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsUuidExportResponseValueOK(g))
	}

	return marshalUnion(marshalGetAllocationsUuidExportResponseValueOK(g), g.AdditionalProperties)
}

// ExportResponse structure is generated from "#/definitions/exportResponse".
type ExportResponse struct {
	ExportJobID          string                 `json:"exportJobID,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalExportResponse ExportResponse

var knownKeysExportResponse = []string{
	"exportJobID",
	"href",
}

// UnmarshalJSON decodes JSON.
func (e *ExportResponse) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalExportResponse(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysExportResponse {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ExportResponse(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ExportResponse) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalExportResponse(e))
	}

	return marshalUnion(marshalExportResponse(e), e.AdditionalProperties)
}

// GetAllocationsUuidExportJobExportJobIDResponseValueOK structure is generated from "GetAllocationsUuidExportJobExportJobID/response/ValueOK".
type GetAllocationsUuidExportJobExportJobIDResponseValueOK struct {
	Body                 *ExportJobResponse     `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetAllocationsUuidExportJobExportJobIDResponseValueOK GetAllocationsUuidExportJobExportJobIDResponseValueOK

var knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsUuidExportJobExportJobIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsUuidExportJobExportJobIDResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsUuidExportJobExportJobIDResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsUuidExportJobExportJobIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsUuidExportJobExportJobIDResponseValueOK(g))
	}

	return marshalUnion(marshalGetAllocationsUuidExportJobExportJobIDResponseValueOK(g), g.AdditionalProperties)
}

// ExportJobResponse structure is generated from "#/definitions/exportJobResponse".
type ExportJobResponse struct {
	ExportID             string                 `json:"exportID,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalExportJobResponse ExportJobResponse

var knownKeysExportJobResponse = []string{
	"exportID",
	"href",
}

// UnmarshalJSON decodes JSON.
func (e *ExportJobResponse) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalExportJobResponse(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysExportJobResponse {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ExportJobResponse(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ExportJobResponse) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalExportJobResponse(e))
	}

	return marshalUnion(marshalExportJobResponse(e), e.AdditionalProperties)
}

// GetAllocationsUuidExportJobExportJobIDResponseValueAccepted structure is generated from "GetAllocationsUuidExportJobExportJobID/response/ValueAccepted".
type GetAllocationsUuidExportJobExportJobIDResponseValueAccepted struct {
	Body                 *OngoingExportJobResponse `json:"body,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`              // All unmatched properties.
}

type marshalGetAllocationsUuidExportJobExportJobIDResponseValueAccepted GetAllocationsUuidExportJobExportJobIDResponseValueAccepted

var knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueAccepted = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsUuidExportJobExportJobIDResponseValueAccepted) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsUuidExportJobExportJobIDResponseValueAccepted(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueAccepted {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsUuidExportJobExportJobIDResponseValueAccepted(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsUuidExportJobExportJobIDResponseValueAccepted) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsUuidExportJobExportJobIDResponseValueAccepted(g))
	}

	return marshalUnion(marshalGetAllocationsUuidExportJobExportJobIDResponseValueAccepted(g), g.AdditionalProperties)
}

// OngoingExportJobResponse structure is generated from "#/definitions/ongoingExportJobResponse".
type OngoingExportJobResponse struct {
	Message              string                 `json:"message,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties.
}

type marshalOngoingExportJobResponse OngoingExportJobResponse

var knownKeysOngoingExportJobResponse = []string{
	"message",
}

// UnmarshalJSON decodes JSON.
func (o *OngoingExportJobResponse) UnmarshalJSON(data []byte) error {
	var err error

	mo := marshalOngoingExportJobResponse(*o)

	err = json.Unmarshal(data, &mo)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysOngoingExportJobResponse {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mo.AdditionalProperties == nil {
			mo.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mo.AdditionalProperties[key] = val
	}

	*o = OngoingExportJobResponse(mo)

	return nil
}

// MarshalJSON encodes JSON.
func (o OngoingExportJobResponse) MarshalJSON() ([]byte, error) {
	if len(o.AdditionalProperties) == 0 {
		return json.Marshal(marshalOngoingExportJobResponse(o))
	}

	return marshalUnion(marshalOngoingExportJobResponse(o), o.AdditionalProperties)
}

// GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable structure is generated from "GetAllocationsUuidExportJobExportJobID/response/ValueNotAcceptable".
type GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable struct {
	Error                *ErrorDetails          `json:"error,omitempty"` // ErrorDetails details the Error in ErrorResponse.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable

var knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable = []string{
	"error",
}

// UnmarshalJSON decodes JSON.
func (g *GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable(g))
	}

	return marshalUnion(marshalGetAllocationsUuidExportJobExportJobIDResponseValueNotAcceptable(g), g.AdditionalProperties)
}

// PoolsListMock structure is generated from "#/definitions/poolsListMock".
type PoolsListMock struct {
	Body                 []PoolDetail           `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalPoolsListMock PoolsListMock

var knownKeysPoolsListMock = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (p *PoolsListMock) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPoolsListMock(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPoolsListMock {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PoolsListMock(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PoolsListMock) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPoolsListMock(p))
	}

	return marshalUnion(marshalPoolsListMock(p), p.AdditionalProperties)
}

// PoolDetail structure is generated from "#/definitions/PoolDetail".
//
// PoolDetail is an entry in the system/allocation pools listing.
type PoolDetail struct {
	ContractNumber        string                 `json:"contractNumber,omitempty"`
	EndDate               string                 `json:"endDate,omitempty"`               // Date represents the date format used for API returns.
	EntitlementsAvailable int64                  `json:"entitlementsAvailable,omitempty"`
	ID                    string                 `json:"id,omitempty"`
	ServiceLevel          string                 `json:"serviceLevel,omitempty"`
	Sku                   string                 `json:"sku,omitempty"`
	StartDate             string                 `json:"startDate,omitempty"`             // Date represents the date format used for API returns.
	SubscriptionName      string                 `json:"subscriptionName,omitempty"`
	SubscriptionNumber    string                 `json:"subscriptionNumber,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`                               // All unmatched properties.
}

type marshalPoolDetail PoolDetail

var knownKeysPoolDetail = []string{
	"contractNumber",
	"endDate",
	"entitlementsAvailable",
	"id",
	"serviceLevel",
	"sku",
	"startDate",
	"subscriptionName",
	"subscriptionNumber",
}

// UnmarshalJSON decodes JSON.
func (p *PoolDetail) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPoolDetail(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPoolDetail {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PoolDetail(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PoolDetail) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPoolDetail(p))
	}

	return marshalUnion(marshalPoolDetail(p), p.AdditionalProperties)
}

// GetCloudAccessProvidersEnabledResponseValueOK structure is generated from "GetCloudAccessProvidersEnabled/response/ValueOK".
type GetCloudAccessProvidersEnabledResponseValueOK struct {
	Body                 []EnabledCloudAccessProvider `json:"body,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`              // All unmatched properties.
}

type marshalGetCloudAccessProvidersEnabledResponseValueOK GetCloudAccessProvidersEnabledResponseValueOK

var knownKeysGetCloudAccessProvidersEnabledResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetCloudAccessProvidersEnabledResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCloudAccessProvidersEnabledResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCloudAccessProvidersEnabledResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCloudAccessProvidersEnabledResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCloudAccessProvidersEnabledResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCloudAccessProvidersEnabledResponseValueOK(g))
	}

	return marshalUnion(marshalGetCloudAccessProvidersEnabledResponseValueOK(g), g.AdditionalProperties)
}

// EnabledCloudAccessProvider structure is generated from "#/definitions/EnabledCloudAccessProvider".
//
// Enabled Cloud Access Provider details including products and accounts.
type EnabledCloudAccessProvider struct {
	Accounts             []EnabledProviderAccount `json:"accounts,omitempty"`
	Name                 string                   `json:"name,omitempty"`
	Products             []EnabledProduct         `json:"products,omitempty"`
	ShortName            string                   `json:"shortName,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`                   // All unmatched properties.
}

type marshalEnabledCloudAccessProvider EnabledCloudAccessProvider

var knownKeysEnabledCloudAccessProvider = []string{
	"accounts",
	"name",
	"products",
	"shortName",
}

// UnmarshalJSON decodes JSON.
func (e *EnabledCloudAccessProvider) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalEnabledCloudAccessProvider(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysEnabledCloudAccessProvider {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = EnabledCloudAccessProvider(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e EnabledCloudAccessProvider) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalEnabledCloudAccessProvider(e))
	}

	return marshalUnion(marshalEnabledCloudAccessProvider(e), e.AdditionalProperties)
}

// EnabledProviderAccount structure is generated from "#/definitions/EnabledProviderAccount".
//
// Enabled Provider Account represents a cloud access provider account.
type EnabledProviderAccount struct {
	// Date represents the date format used for API returns.
	// Required.
	DateAdded            string                 `json:"dateAdded"`
	GoldImageStatus      []GoldImageStatus      `json:"goldImageStatus,omitempty"`
	ID                   string                 `json:"id"`                        // Required.
	Nickname             string                 `json:"nickname"`                  // Required.
	SourceID             string                 `json:"sourceId,omitempty"`        // Source ID of linked account (only for accounts created via Sources on cloud.redhat.com).
	Verified             bool                   `json:"verified,omitempty"`        // Verification status for RHSM Auto Registration (only displayed for supported cloud providers).
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalEnabledProviderAccount EnabledProviderAccount

var knownKeysEnabledProviderAccount = []string{
	"dateAdded",
	"goldImageStatus",
	"id",
	"nickname",
	"sourceId",
	"verified",
}

// UnmarshalJSON decodes JSON.
func (e *EnabledProviderAccount) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalEnabledProviderAccount(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysEnabledProviderAccount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = EnabledProviderAccount(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e EnabledProviderAccount) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalEnabledProviderAccount(e))
	}

	return marshalUnion(marshalEnabledProviderAccount(e), e.AdditionalProperties)
}

// GoldImageStatus structure is generated from "#/definitions/GoldImageStatus".
//
// Gold Image Status Details of a cloud access provider account for an image provider.
type GoldImageStatus struct {
	Description          string                 `json:"description,omitempty"` // Description of the provider image group.
	Name                 string                 `json:"name,omitempty"`        // Name of the requested provider image group.
	Status               string                 `json:"status,omitempty"`      // Status of Gold Image Request.
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalGoldImageStatus GoldImageStatus

var knownKeysGoldImageStatus = []string{
	"description",
	"name",
	"status",
}

// UnmarshalJSON decodes JSON.
func (g *GoldImageStatus) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGoldImageStatus(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGoldImageStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GoldImageStatus(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GoldImageStatus) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGoldImageStatus(g))
	}

	return marshalUnion(marshalGoldImageStatus(g), g.AdditionalProperties)
}

// EnabledProduct structure is generated from "#/definitions/EnabledProduct".
//
// Enabled Product represents a cloud access provider product.
type EnabledProduct struct {
	EnabledQuantity      int64                  `json:"enabledQuantity,omitempty"`
	ImageGroups          []string               `json:"imageGroups,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	NextRenewal          string                 `json:"nextRenewal,omitempty"`     // ShortDate represents the short date format used for API returns where time precision is not needed.
	Sku                  string                 `json:"sku,omitempty"`
	TotalQuantity        int64                  `json:"totalQuantity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalEnabledProduct EnabledProduct

var knownKeysEnabledProduct = []string{
	"enabledQuantity",
	"imageGroups",
	"name",
	"nextRenewal",
	"sku",
	"totalQuantity",
}

// UnmarshalJSON decodes JSON.
func (e *EnabledProduct) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalEnabledProduct(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysEnabledProduct {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = EnabledProduct(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e EnabledProduct) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalEnabledProduct(e))
	}

	return marshalUnion(marshalEnabledProduct(e), e.AdditionalProperties)
}

// PutCloudAccessProvidersProviderShortNameAccountRequestBody structure is generated from "PutCloudAccessProvidersProviderShortNameAccount/request/body".
type PutCloudAccessProvidersProviderShortNameAccountRequestBody struct {
	ID                   string                 `json:"id"`                    // Required.
	NewNickname          string                 `json:"newNickname,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalPutCloudAccessProvidersProviderShortNameAccountRequestBody PutCloudAccessProvidersProviderShortNameAccountRequestBody

var knownKeysPutCloudAccessProvidersProviderShortNameAccountRequestBody = []string{
	"id",
	"newNickname",
}

// UnmarshalJSON decodes JSON.
func (p *PutCloudAccessProvidersProviderShortNameAccountRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCloudAccessProvidersProviderShortNameAccountRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCloudAccessProvidersProviderShortNameAccountRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCloudAccessProvidersProviderShortNameAccountRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCloudAccessProvidersProviderShortNameAccountRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCloudAccessProvidersProviderShortNameAccountRequestBody(p))
	}

	return marshalUnion(marshalPutCloudAccessProvidersProviderShortNameAccountRequestBody(p), p.AdditionalProperties)
}

// AddProviderAccount structure is generated from "#/definitions/AddProviderAccount".
//
// An account to be added.
type AddProviderAccount struct {
	ID                   string                 `json:"id,omitempty"`
	Nickname             string                 `json:"nickname,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalAddProviderAccount AddProviderAccount

var knownKeysAddProviderAccount = []string{
	"id",
	"nickname",
}

// UnmarshalJSON decodes JSON.
func (a *AddProviderAccount) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddProviderAccount(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddProviderAccount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddProviderAccount(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddProviderAccount) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddProviderAccount(a))
	}

	return marshalUnion(marshalAddProviderAccount(a), a.AdditionalProperties)
}

// DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody structure is generated from "DeleteCloudAccessProvidersProviderShortNameAccounts/request/body".
type DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody struct {
	ID                   string                 `json:"id"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`  // All unmatched properties.
}

type marshalDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody

var knownKeysDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody = []string{
	"id",
}

// UnmarshalJSON decodes JSON.
func (d *DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DeleteCloudAccessProvidersProviderShortNameAccountsRequestBody) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody(d))
	}

	return marshalUnion(marshalDeleteCloudAccessProvidersProviderShortNameAccountsRequestBody(d), d.AdditionalProperties)
}

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody structure is generated from "PutCloudAccessProvidersProviderShortNameAccountsAccountID/request/body".
type PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody struct {
	Nickname             string                 `json:"nickname"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`        // All unmatched properties.
}

type marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody

var knownKeysPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody = []string{
	"nickname",
}

// UnmarshalJSON decodes JSON.
func (p *PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody(p))
	}

	return marshalUnion(marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDRequestBody(p), p.AdditionalProperties)
}

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody structure is generated from "PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerification/request/body".
type PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody struct {
	// Base64-encoded cloud instance metadata. For GCE, please use the instance identity token (JWT) as it is.
	// Required.
	Identity             string                 `json:"identity"`
	// Base64-encoded cloud instance metadata signature. For GCE, please omit this field.
	// Required.
	Signature            string                 `json:"signature"`
	AdditionalProperties map[string]interface{} `json:"-"`         // All unmatched properties.
}

type marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody

var knownKeysPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody = []string{
	"identity",
	"signature",
}

// UnmarshalJSON decodes JSON.
func (p *PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody(p))
	}

	return marshalUnion(marshalPutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestBody(p), p.AdditionalProperties)
}

// PostCloudAccessProvidersProviderShortNameGoldimageRequestBody structure is generated from "PostCloudAccessProvidersProviderShortNameGoldimage/request/body".
type PostCloudAccessProvidersProviderShortNameGoldimageRequestBody struct {
	Accounts             []string               `json:"accounts"` // Required.
	Images               []string               `json:"images"`   // Required.
	AdditionalProperties map[string]interface{} `json:"-"`        // All unmatched properties.
}

type marshalPostCloudAccessProvidersProviderShortNameGoldimageRequestBody PostCloudAccessProvidersProviderShortNameGoldimageRequestBody

var knownKeysPostCloudAccessProvidersProviderShortNameGoldimageRequestBody = []string{
	"accounts",
	"images",
}

// UnmarshalJSON decodes JSON.
func (p *PostCloudAccessProvidersProviderShortNameGoldimageRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCloudAccessProvidersProviderShortNameGoldimageRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCloudAccessProvidersProviderShortNameGoldimageRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCloudAccessProvidersProviderShortNameGoldimageRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCloudAccessProvidersProviderShortNameGoldimageRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCloudAccessProvidersProviderShortNameGoldimageRequestBody(p))
	}

	return marshalUnion(marshalPostCloudAccessProvidersProviderShortNameGoldimageRequestBody(p), p.AdditionalProperties)
}

// MyErrataListMock structure is generated from "#/definitions/myErrataListMock".
type MyErrataListMock struct {
	Body                 []MyErratum            `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalMyErrataListMock MyErrataListMock

var knownKeysMyErrataListMock = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (m *MyErrataListMock) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMyErrataListMock(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMyErrataListMock {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MyErrataListMock(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MyErrataListMock) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMyErrataListMock(m))
	}

	return marshalUnion(marshalMyErrataListMock(m), m.AdditionalProperties)
}

// MyErratum structure is generated from "#/definitions/MyErratum".
//
// MyErratum contains erratum information that affects at least one system.
type MyErratum struct {
	AdvisoryID           string                 `json:"advisoryId,omitempty"`
	AffectedSystemCount  int64                  `json:"affectedSystemCount,omitempty"`
	Details              string                 `json:"details,omitempty"`
	PublishDate          string                 `json:"publishDate,omitempty"`         // Date represents the date format used for API returns.
	Synopsis             string                 `json:"synopsis,omitempty"`
	Systems              string                 `json:"systems,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalMyErratum MyErratum

var knownKeysMyErratum = []string{
	"advisoryId",
	"affectedSystemCount",
	"details",
	"publishDate",
	"synopsis",
	"systems",
	"type",
}

// UnmarshalJSON decodes JSON.
func (m *MyErratum) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMyErratum(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMyErratum {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MyErratum(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MyErratum) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMyErratum(m))
	}

	return marshalUnion(marshalMyErratum(m), m.AdditionalProperties)
}

// ContentSetArchMock structure is generated from "#/definitions/contentSetArchMock".
type ContentSetArchMock struct {
	Body                 []ErratumInContentSet  `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalContentSetArchMock ContentSetArchMock

var knownKeysContentSetArchMock = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (c *ContentSetArchMock) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalContentSetArchMock(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysContentSetArchMock {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ContentSetArchMock(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ContentSetArchMock) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalContentSetArchMock(c))
	}

	return marshalUnion(marshalContentSetArchMock(c), c.AdditionalProperties)
}

// ErratumInContentSet structure is generated from "#/definitions/ErratumInContentSet".
//
// ErratumInContentSet contains information on an erratum listed in a content set.
type ErratumInContentSet struct {
	AdvisoryID           string                 `json:"advisoryId,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	PublishDate          string                 `json:"publishDate,omitempty"` // Date represents the date format used for API returns.
	Severity             string                 `json:"severity,omitempty"`
	Synopsis             string                 `json:"synopsis,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalErratumInContentSet ErratumInContentSet

var knownKeysErratumInContentSet = []string{
	"advisoryId",
	"href",
	"publishDate",
	"severity",
	"synopsis",
	"type",
}

// UnmarshalJSON decodes JSON.
func (e *ErratumInContentSet) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErratumInContentSet(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErratumInContentSet {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErratumInContentSet(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErratumInContentSet) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErratumInContentSet(e))
	}

	return marshalUnion(marshalErratumInContentSet(e), e.AdditionalProperties)
}

// GetErrataAdvisoryIDResponseValueOK structure is generated from "GetErrataAdvisoryID/response/ValueOK".
type GetErrataAdvisoryIDResponseValueOK struct {
	Body                 *ErratumDetails        `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetErrataAdvisoryIDResponseValueOK GetErrataAdvisoryIDResponseValueOK

var knownKeysGetErrataAdvisoryIDResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetErrataAdvisoryIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetErrataAdvisoryIDResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetErrataAdvisoryIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetErrataAdvisoryIDResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetErrataAdvisoryIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetErrataAdvisoryIDResponseValueOK(g))
	}

	return marshalUnion(marshalGetErrataAdvisoryIDResponseValueOK(g), g.AdditionalProperties)
}

// ErratumDetails structure is generated from "#/definitions/ErratumDetails".
type ErratumDetails struct {
	AffectedProducts     []string               `json:"affectedProducts,omitempty"`
	Bugzillas            []Reference            `json:"bugzillas,omitempty"`
	CopyrightYear        string                 `json:"copyrightYear,omitempty"`
	Cves                 string                 `json:"cves,omitempty"`
	Description          string                 `json:"description,omitempty"`
	ID                   string                 `json:"id,omitempty"`
	Issued               string                 `json:"issued,omitempty"`           // Date represents the date format used for API returns.
	LastUpdated          string                 `json:"lastUpdated,omitempty"`      // Date represents the date format used for API returns.
	References           []Reference            `json:"references,omitempty"`
	Severity             string                 `json:"severity,omitempty"`
	Solution             string                 `json:"solution,omitempty"`
	Summary              string                 `json:"summary,omitempty"`
	Synopsis             string                 `json:"synopsis,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	TypeSeverity         string                 `json:"typeSeverity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                          // All unmatched properties.
}

type marshalErratumDetails ErratumDetails

var knownKeysErratumDetails = []string{
	"affectedProducts",
	"bugzillas",
	"copyrightYear",
	"cves",
	"description",
	"id",
	"issued",
	"lastUpdated",
	"references",
	"severity",
	"solution",
	"summary",
	"synopsis",
	"type",
	"typeSeverity",
}

// UnmarshalJSON decodes JSON.
func (e *ErratumDetails) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErratumDetails(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErratumDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErratumDetails(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErratumDetails) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErratumDetails(e))
	}

	return marshalUnion(marshalErratumDetails(e), e.AdditionalProperties)
}

// Reference structure is generated from "#/definitions/Reference".
//
// Reference contains a reference to an external item.
type Reference struct {
	Href                 string                 `json:"href,omitempty"`
	ID                   string                 `json:"id,omitempty"`
	Title                string                 `json:"title,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalReference Reference

var knownKeysReference = []string{
	"href",
	"id",
	"title",
	"type",
}

// UnmarshalJSON decodes JSON.
func (r *Reference) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalReference(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysReference {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = Reference(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r Reference) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalReference(r))
	}

	return marshalUnion(marshalReference(r), r.AdditionalProperties)
}

// PkgListMock structure is generated from "#/definitions/pkgListMock".
type PkgListMock struct {
	Body                 []PackageDetail        `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalPkgListMock PkgListMock

var knownKeysPkgListMock = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (p *PkgListMock) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPkgListMock(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPkgListMock {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PkgListMock(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PkgListMock) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPkgListMock(p))
	}

	return marshalUnion(marshalPkgListMock(p), p.AdditionalProperties)
}

// PackageDetail structure is generated from "#/definitions/PackageDetail".
//
// PackageDetail wraps an errata package and adds a RefURL.
type PackageDetail struct {
	Arch                 string                 `json:"arch,omitempty"`
	Checksum             string                 `json:"checksum,omitempty"`
	ContentSets          []string               `json:"contentSets,omitempty"`
	DetailsURL           string                 `json:"details_url,omitempty"`
	Epoch                int64                  `json:"epoch,omitempty"`
	Filename             string                 `json:"filename,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	Release              string                 `json:"release,omitempty"`
	RepoTags             []string               `json:"repoTags,omitempty"`
	Summary              string                 `json:"summary,omitempty"`
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalPackageDetail PackageDetail

var knownKeysPackageDetail = []string{
	"arch",
	"checksum",
	"contentSets",
	"details_url",
	"epoch",
	"filename",
	"name",
	"release",
	"repoTags",
	"summary",
	"version",
}

// UnmarshalJSON decodes JSON.
func (p *PackageDetail) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPackageDetail(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPackageDetail {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PackageDetail(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PackageDetail) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPackageDetail(p))
	}

	return marshalUnion(marshalPackageDetail(p), p.AdditionalProperties)
}

// SystemListMock structure is generated from "#/definitions/systemListMock".
type SystemListMock struct {
	Body                 []SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer `json:"body,omitempty"`
	Pagination           *APIPageParam                                                     `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{}                                            `json:"-"`                    // All unmatched properties.
}

type marshalSystemListMock SystemListMock

var knownKeysSystemListMock = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (s *SystemListMock) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSystemListMock(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSystemListMock {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SystemListMock(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SystemListMock) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSystemListMock(s))
	}

	return marshalUnion(marshalSystemListMock(s), s.AdditionalProperties)
}

// SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer structure is generated from "#/definitions/System".
//
// System is an entity that consumes entitlements. Also referred as a Consumer.
type SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer struct {
	EntitlementCount     int64                  `json:"entitlementCount,omitempty"`
	EntitlementStatus    string                 `json:"entitlementStatus,omitempty"`
	ErrataCounts         *ErrataCount           `json:"errataCounts,omitempty"`      // ErrataCount is the errata information for a System.
	Hostname             string                 `json:"hostname,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	LastCheckin          string                 `json:"lastCheckin,omitempty"`       // Date represents the date format used for API returns.
	Name                 string                 `json:"name,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	Username             string                 `json:"username,omitempty"`
	Uuid                 string                 `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                           // All unmatched properties.
}

type marshalSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer

var knownKeysSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer = []string{
	"entitlementCount",
	"entitlementStatus",
	"errataCounts",
	"hostname",
	"href",
	"lastCheckin",
	"name",
	"type",
	"username",
	"uuid",
}

// UnmarshalJSON decodes JSON.
func (s *SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer(s))
	}

	return marshalUnion(marshalSystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer(s), s.AdditionalProperties)
}

// ErrataCount structure is generated from "#/definitions/ErrataCount".
//
// ErrataCount is the errata information for a System.
type ErrataCount struct {
	BugfixCount          int64                  `json:"bugfixCount,omitempty"`
	EnhancementCount     int64                  `json:"enhancementCount,omitempty"`
	SecurityCount        int64                  `json:"securityCount,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                          // All unmatched properties.
}

type marshalErrataCount ErrataCount

var knownKeysErrataCount = []string{
	"bugfixCount",
	"enhancementCount",
	"securityCount",
}

// UnmarshalJSON decodes JSON.
func (e *ErrataCount) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErrataCount(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErrataCount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErrataCount(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErrataCount) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErrataCount(e))
	}

	return marshalUnion(marshalErrataCount(e), e.AdditionalProperties)
}

// GetImagesCsetContentSetResponseValueOK structure is generated from "GetImagesCsetContentSet/response/ValueOK".
type GetImagesCsetContentSetResponseValueOK struct {
	Body                 []ImageInContentSet    `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalGetImagesCsetContentSetResponseValueOK GetImagesCsetContentSetResponseValueOK

var knownKeysGetImagesCsetContentSetResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetImagesCsetContentSetResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetImagesCsetContentSetResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetImagesCsetContentSetResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetImagesCsetContentSetResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetImagesCsetContentSetResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetImagesCsetContentSetResponseValueOK(g))
	}

	return marshalUnion(marshalGetImagesCsetContentSetResponseValueOK(g), g.AdditionalProperties)
}

// ImageInContentSet structure is generated from "#/definitions/ImageInContentSet".
//
// Image Details in a content set image listing.
type ImageInContentSet struct {
	Arch                 string                 `json:"arch,omitempty"`
	Checksum             string                 `json:"checksum,omitempty"`
	DatePublished        string                 `json:"datePublished,omitempty"` // Date represents the date format used for API returns.
	DownloadHref         string                 `json:"downloadHref,omitempty"`
	Filename             string                 `json:"filename,omitempty"`
	ImageName            string                 `json:"imageName,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                       // All unmatched properties.
}

type marshalImageInContentSet ImageInContentSet

var knownKeysImageInContentSet = []string{
	"arch",
	"checksum",
	"datePublished",
	"downloadHref",
	"filename",
	"imageName",
}

// UnmarshalJSON decodes JSON.
func (i *ImageInContentSet) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalImageInContentSet(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysImageInContentSet {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = ImageInContentSet(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i ImageInContentSet) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalImageInContentSet(i))
	}

	return marshalUnion(marshalImageInContentSet(i), i.AdditionalProperties)
}

// GetImagesRhelVersionArchResponseValueOK structure is generated from "GetImagesRhelVersionArch/response/ValueOK".
type GetImagesRhelVersionArchResponseValueOK struct {
	Body                 []ImageInContentSet    `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetImagesRhelVersionArchResponseValueOK GetImagesRhelVersionArchResponseValueOK

var knownKeysGetImagesRhelVersionArchResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetImagesRhelVersionArchResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetImagesRhelVersionArchResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetImagesRhelVersionArchResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetImagesRhelVersionArchResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetImagesRhelVersionArchResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetImagesRhelVersionArchResponseValueOK(g))
	}

	return marshalUnion(marshalGetImagesRhelVersionArchResponseValueOK(g), g.AdditionalProperties)
}

// GetImagesChecksumDownloadResponseValueTemporaryRedirect structure is generated from "GetImagesChecksumDownload/response/ValueTemporaryRedirect".
type GetImagesChecksumDownloadResponseValueTemporaryRedirect struct {
	Body                 *DownloadLink          `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetImagesChecksumDownloadResponseValueTemporaryRedirect GetImagesChecksumDownloadResponseValueTemporaryRedirect

var knownKeysGetImagesChecksumDownloadResponseValueTemporaryRedirect = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetImagesChecksumDownloadResponseValueTemporaryRedirect) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetImagesChecksumDownloadResponseValueTemporaryRedirect(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetImagesChecksumDownloadResponseValueTemporaryRedirect {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetImagesChecksumDownloadResponseValueTemporaryRedirect(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetImagesChecksumDownloadResponseValueTemporaryRedirect) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetImagesChecksumDownloadResponseValueTemporaryRedirect(g))
	}

	return marshalUnion(marshalGetImagesChecksumDownloadResponseValueTemporaryRedirect(g), g.AdditionalProperties)
}

// DownloadLink structure is generated from "#/definitions/DownloadLink".
type DownloadLink struct {
	Expiration           string                 `json:"expiration,omitempty"` // Time at which the download link expires (in UTC).
	Filename             string                 `json:"filename,omitempty"`   // Filename of the file on the download link.
	Href                 string                 `json:"href,omitempty"`       // URL to obtain the image.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalDownloadLink DownloadLink

var knownKeysDownloadLink = []string{
	"expiration",
	"filename",
	"href",
}

// UnmarshalJSON decodes JSON.
func (d *DownloadLink) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDownloadLink(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDownloadLink {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DownloadLink(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DownloadLink) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDownloadLink(d))
	}

	return marshalUnion(marshalDownloadLink(d), d.AdditionalProperties)
}

// GetOrganizationResponseValueOK structure is generated from "GetOrganization/response/ValueOK".
type GetOrganizationResponseValueOK struct {
	Body                 *OrganizationSimpleContentAccessDetails `json:"body,omitempty"` // Organization Simple Content Access details.
	AdditionalProperties map[string]interface{}                  `json:"-"`              // All unmatched properties.
}

type marshalGetOrganizationResponseValueOK GetOrganizationResponseValueOK

var knownKeysGetOrganizationResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetOrganizationResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetOrganizationResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetOrganizationResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetOrganizationResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetOrganizationResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetOrganizationResponseValueOK(g))
	}

	return marshalUnion(marshalGetOrganizationResponseValueOK(g), g.AdditionalProperties)
}

// OrganizationSimpleContentAccessDetails structure is generated from "#/definitions/OrgSimpleContentAccess".
//
// Organization Simple Content Access details.
type OrganizationSimpleContentAccessDetails struct {
	ID                         string                   `json:"id,omitempty"`
	SimpleContentAccess        string                   `json:"simpleContentAccess,omitempty"`
	SimpleContentAccessCapable bool                     `json:"simpleContentAccessCapable,omitempty"`
	SystemPurposeAttributes    *SystemPurposeAttributes `json:"systemPurposeAttributes,omitempty"`    // System purpose settings available to an organization.
	AdditionalProperties       map[string]interface{}   `json:"-"`                                    // All unmatched properties.
}

type marshalOrganizationSimpleContentAccessDetails OrganizationSimpleContentAccessDetails

var knownKeysOrganizationSimpleContentAccessDetails = []string{
	"id",
	"simpleContentAccess",
	"simpleContentAccessCapable",
	"systemPurposeAttributes",
}

// UnmarshalJSON decodes JSON.
func (o *OrganizationSimpleContentAccessDetails) UnmarshalJSON(data []byte) error {
	var err error

	mo := marshalOrganizationSimpleContentAccessDetails(*o)

	err = json.Unmarshal(data, &mo)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysOrganizationSimpleContentAccessDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mo.AdditionalProperties == nil {
			mo.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mo.AdditionalProperties[key] = val
	}

	*o = OrganizationSimpleContentAccessDetails(mo)

	return nil
}

// MarshalJSON encodes JSON.
func (o OrganizationSimpleContentAccessDetails) MarshalJSON() ([]byte, error) {
	if len(o.AdditionalProperties) == 0 {
		return json.Marshal(marshalOrganizationSimpleContentAccessDetails(o))
	}

	return marshalUnion(marshalOrganizationSimpleContentAccessDetails(o), o.AdditionalProperties)
}

// SystemPurposeAttributes structure is generated from "#/definitions/SystemPurposeAttributes".
//
// System purpose settings available to an organization.
type SystemPurposeAttributes struct {
	Roles                []string               `json:"roles,omitempty"`
	ServiceLevel         []string               `json:"serviceLevel,omitempty"`
	Usage                []string               `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalSystemPurposeAttributes SystemPurposeAttributes

var knownKeysSystemPurposeAttributes = []string{
	"roles",
	"serviceLevel",
	"usage",
}

// UnmarshalJSON decodes JSON.
func (s *SystemPurposeAttributes) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSystemPurposeAttributes(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSystemPurposeAttributes {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SystemPurposeAttributes(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SystemPurposeAttributes) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSystemPurposeAttributes(s))
	}

	return marshalUnion(marshalSystemPurposeAttributes(s), s.AdditionalProperties)
}

// GetPackagesCsetContentSetArchArchResponseValueOK structure is generated from "GetPackagesCsetContentSetArchArch/response/ValueOK".
type GetPackagesCsetContentSetArchArchResponseValueOK struct {
	Body                 []PkgContentSetArch    `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalGetPackagesCsetContentSetArchArchResponseValueOK GetPackagesCsetContentSetArchArchResponseValueOK

var knownKeysGetPackagesCsetContentSetArchArchResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetPackagesCsetContentSetArchArchResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPackagesCsetContentSetArchArchResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPackagesCsetContentSetArchArchResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPackagesCsetContentSetArchArchResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPackagesCsetContentSetArchArchResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPackagesCsetContentSetArchArchResponseValueOK(g))
	}

	return marshalUnion(marshalGetPackagesCsetContentSetArchArchResponseValueOK(g), g.AdditionalProperties)
}

// PkgContentSetArch structure is generated from "#/definitions/pkgContentSetArch".
type PkgContentSetArch struct {
	Arch                 string                 `json:"arch,omitempty"`
	BuildDate            string                 `json:"buildDate,omitempty"`    // Date represents the date format used for API returns.
	BuildHost            string                 `json:"buildHost,omitempty"`
	Checksum             string                 `json:"checksum,omitempty"`
	ContentSets          []string               `json:"contentSets,omitempty"`
	Description          string                 `json:"description,omitempty"`
	DownloadHref         string                 `json:"downloadHref,omitempty"`
	Epoch                string                 `json:"epoch,omitempty"`
	Group                string                 `json:"group,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	License              string                 `json:"license,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	Release              string                 `json:"release,omitempty"`
	Size                 int64                  `json:"size,omitempty"`
	Summary              string                 `json:"summary,omitempty"`
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalPkgContentSetArch PkgContentSetArch

var knownKeysPkgContentSetArch = []string{
	"arch",
	"buildDate",
	"buildHost",
	"checksum",
	"contentSets",
	"description",
	"downloadHref",
	"epoch",
	"group",
	"href",
	"license",
	"name",
	"release",
	"size",
	"summary",
	"version",
}

// UnmarshalJSON decodes JSON.
func (p *PkgContentSetArch) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPkgContentSetArch(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPkgContentSetArch {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PkgContentSetArch(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PkgContentSetArch) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPkgContentSetArch(p))
	}

	return marshalUnion(marshalPkgContentSetArch(p), p.AdditionalProperties)
}

// GetPackagesChecksumResponseValueOK structure is generated from "GetPackagesChecksum/response/ValueOK".
type GetPackagesChecksumResponseValueOK struct {
	Body                 *PkgDetails            `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetPackagesChecksumResponseValueOK GetPackagesChecksumResponseValueOK

var knownKeysGetPackagesChecksumResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetPackagesChecksumResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPackagesChecksumResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPackagesChecksumResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPackagesChecksumResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPackagesChecksumResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPackagesChecksumResponseValueOK(g))
	}

	return marshalUnion(marshalGetPackagesChecksumResponseValueOK(g), g.AdditionalProperties)
}

// PkgDetails structure is generated from "#/definitions/pkgDetails".
type PkgDetails struct {
	Arch                 string                 `json:"arch,omitempty"`
	BuildDate            string                 `json:"buildDate,omitempty"`   // Date represents the date format used for API returns.
	BuildHost            string                 `json:"buildHost,omitempty"`
	Checksum             string                 `json:"checksum,omitempty"`
	ContentSets          []string               `json:"contentSets,omitempty"`
	Description          string                 `json:"description,omitempty"`
	Epoch                string                 `json:"epoch,omitempty"`
	Group                string                 `json:"group,omitempty"`
	Href                 string                 `json:"href,omitempty"`
	License              string                 `json:"license,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	Release              string                 `json:"release,omitempty"`
	Size                 int64                  `json:"size,omitempty"`
	Summary              string                 `json:"summary,omitempty"`
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalPkgDetails PkgDetails

var knownKeysPkgDetails = []string{
	"arch",
	"buildDate",
	"buildHost",
	"checksum",
	"contentSets",
	"description",
	"epoch",
	"group",
	"href",
	"license",
	"name",
	"release",
	"size",
	"summary",
	"version",
}

// UnmarshalJSON decodes JSON.
func (p *PkgDetails) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPkgDetails(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPkgDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PkgDetails(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PkgDetails) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPkgDetails(p))
	}

	return marshalUnion(marshalPkgDetails(p), p.AdditionalProperties)
}

// GetPackagesChecksumDownloadResponseValueTemporaryRedirect structure is generated from "GetPackagesChecksumDownload/response/ValueTemporaryRedirect".
type GetPackagesChecksumDownloadResponseValueTemporaryRedirect struct {
	Body                 *DownloadLink          `json:"body,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetPackagesChecksumDownloadResponseValueTemporaryRedirect GetPackagesChecksumDownloadResponseValueTemporaryRedirect

var knownKeysGetPackagesChecksumDownloadResponseValueTemporaryRedirect = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetPackagesChecksumDownloadResponseValueTemporaryRedirect) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPackagesChecksumDownloadResponseValueTemporaryRedirect(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPackagesChecksumDownloadResponseValueTemporaryRedirect {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPackagesChecksumDownloadResponseValueTemporaryRedirect(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPackagesChecksumDownloadResponseValueTemporaryRedirect) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPackagesChecksumDownloadResponseValueTemporaryRedirect(g))
	}

	return marshalUnion(marshalGetPackagesChecksumDownloadResponseValueTemporaryRedirect(g), g.AdditionalProperties)
}

// GetSubscriptionsResponseValueOK structure is generated from "GetSubscriptions/response/ValueOK".
type GetSubscriptionsResponseValueOK struct {
	// ListResponse is the actual collection of subscription details that gets
	// rendered.
	Body                 []DetailResponseIsTheUserFriendlyResponseFromTheService `json:"body,omitempty"`
	Pagination           *APIPageParam                                           `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{}                                  `json:"-"`                    // All unmatched properties.
}

type marshalGetSubscriptionsResponseValueOK GetSubscriptionsResponseValueOK

var knownKeysGetSubscriptionsResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSubscriptionsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSubscriptionsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSubscriptionsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSubscriptionsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSubscriptionsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSubscriptionsResponseValueOK(g))
	}

	return marshalUnion(marshalGetSubscriptionsResponseValueOK(g), g.AdditionalProperties)
}

// DetailResponseIsTheUserFriendlyResponseFromTheService structure is generated from "#/definitions/DetailResponse".
//
// DetailResponse is the user-friendly response from the service.
type DetailResponseIsTheUserFriendlyResponseFromTheService struct {
	ContractNumber       string                 `json:"contractNumber,omitempty"`
	EndDate              string                 `json:"endDate,omitempty"`            // Date represents the date format used for API returns.
	Pools                []Pool                 `json:"pools,omitempty"`
	Quantity             string                 `json:"quantity,omitempty"`
	Sku                  string                 `json:"sku,omitempty"`
	StartDate            string                 `json:"startDate,omitempty"`          // Date represents the date format used for API returns.
	Status               string                 `json:"status,omitempty"`
	SubscriptionName     string                 `json:"subscriptionName,omitempty"`
	SubscriptionNumber   string                 `json:"subscriptionNumber,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalDetailResponseIsTheUserFriendlyResponseFromTheService DetailResponseIsTheUserFriendlyResponseFromTheService

var knownKeysDetailResponseIsTheUserFriendlyResponseFromTheService = []string{
	"contractNumber",
	"endDate",
	"pools",
	"quantity",
	"sku",
	"startDate",
	"status",
	"subscriptionName",
	"subscriptionNumber",
}

// UnmarshalJSON decodes JSON.
func (d *DetailResponseIsTheUserFriendlyResponseFromTheService) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDetailResponseIsTheUserFriendlyResponseFromTheService(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDetailResponseIsTheUserFriendlyResponseFromTheService {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DetailResponseIsTheUserFriendlyResponseFromTheService(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DetailResponseIsTheUserFriendlyResponseFromTheService) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDetailResponseIsTheUserFriendlyResponseFromTheService(d))
	}

	return marshalUnion(marshalDetailResponseIsTheUserFriendlyResponseFromTheService(d), d.AdditionalProperties)
}

// Pool structure is generated from "#/definitions/Pool".
//
// Pool represents pool information that matter for the detail list.
type Pool struct {
	Consumed             int64                  `json:"consumed,omitempty"`
	ID                   string                 `json:"id,omitempty"`
	Quantity             int64                  `json:"quantity,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPool Pool

var knownKeysPool = []string{
	"consumed",
	"id",
	"quantity",
	"type",
}

// UnmarshalJSON decodes JSON.
func (p *Pool) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPool(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPool {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = Pool(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p Pool) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPool(p))
	}

	return marshalUnion(marshalPool(p), p.AdditionalProperties)
}

// GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK structure is generated from "GetSubscriptionsSubscriptionNumberContentSets/response/ValueOK".
type GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK struct {
	Body                 []ContentSetRepresentAContentsetForTheListContentSetsAPIResponse `json:"body,omitempty"`
	Pagination           *APIPageParam                                                    `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{}                                           `json:"-"`                    // All unmatched properties.
}

type marshalGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK

var knownKeysGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSubscriptionsSubscriptionNumberContentSetsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK(g))
	}

	return marshalUnion(marshalGetSubscriptionsSubscriptionNumberContentSetsResponseValueOK(g), g.AdditionalProperties)
}

// ContentSetRepresentAContentsetForTheListContentSetsAPIResponse structure is generated from "#/definitions/ContentSet".
//
// ContentSet represent a contentset for the listContentSets API Response.
type ContentSetRepresentAContentsetForTheListContentSetsAPIResponse struct {
	Arch                 string                 `json:"arch,omitempty"`
	Enabled              bool                   `json:"enabled,omitempty"`
	Label                string                 `json:"label,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties.
}

type marshalContentSetRepresentAContentsetForTheListContentSetsAPIResponse ContentSetRepresentAContentsetForTheListContentSetsAPIResponse

var knownKeysContentSetRepresentAContentsetForTheListContentSetsAPIResponse = []string{
	"arch",
	"enabled",
	"label",
	"name",
	"type",
}

// UnmarshalJSON decodes JSON.
func (c *ContentSetRepresentAContentsetForTheListContentSetsAPIResponse) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalContentSetRepresentAContentsetForTheListContentSetsAPIResponse(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysContentSetRepresentAContentsetForTheListContentSetsAPIResponse {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ContentSetRepresentAContentsetForTheListContentSetsAPIResponse(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ContentSetRepresentAContentsetForTheListContentSetsAPIResponse) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalContentSetRepresentAContentsetForTheListContentSetsAPIResponse(c))
	}

	return marshalUnion(marshalContentSetRepresentAContentsetForTheListContentSetsAPIResponse(c), c.AdditionalProperties)
}

// GetSubscriptionsSubscriptionNumberSystemsResponseValueOK structure is generated from "GetSubscriptionsSubscriptionNumberSystems/response/ValueOK".
type GetSubscriptionsSubscriptionNumberSystemsResponseValueOK struct {
	Body                 []SystemList           `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalGetSubscriptionsSubscriptionNumberSystemsResponseValueOK GetSubscriptionsSubscriptionNumberSystemsResponseValueOK

var knownKeysGetSubscriptionsSubscriptionNumberSystemsResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSubscriptionsSubscriptionNumberSystemsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSubscriptionsSubscriptionNumberSystemsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSubscriptionsSubscriptionNumberSystemsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSubscriptionsSubscriptionNumberSystemsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSubscriptionsSubscriptionNumberSystemsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSubscriptionsSubscriptionNumberSystemsResponseValueOK(g))
	}

	return marshalUnion(marshalGetSubscriptionsSubscriptionNumberSystemsResponseValueOK(g), g.AdditionalProperties)
}

// SystemList structure is generated from "#/definitions/SystemList".
//
// SystemList is the result of the get system list API.
type SystemList struct {
	ComplianceStatus         string                 `json:"complianceStatus,omitempty"`
	Details                  string                 `json:"details,omitempty"`
	EntitlementQuantity      int64                  `json:"entitlementQuantity,omitempty"`
	LastCheckin              string                 `json:"lastCheckin,omitempty"`              // Date represents the date format used for API returns.
	SystemName               string                 `json:"systemName,omitempty"`
	TotalEntitlementQuantity int64                  `json:"totalEntitlementQuantity,omitempty"`
	Type                     string                 `json:"type,omitempty"`
	Uuid                     string                 `json:"uuid,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`                                  // All unmatched properties.
}

type marshalSystemList SystemList

var knownKeysSystemList = []string{
	"complianceStatus",
	"details",
	"entitlementQuantity",
	"lastCheckin",
	"systemName",
	"totalEntitlementQuantity",
	"type",
	"uuid",
}

// UnmarshalJSON decodes JSON.
func (s *SystemList) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSystemList(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSystemList {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SystemList(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SystemList) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSystemList(s))
	}

	return marshalUnion(marshalSystemList(s), s.AdditionalProperties)
}

// GetSystemsResponseValueOK structure is generated from "GetSystems/response/ValueOK".
type GetSystemsResponseValueOK struct {
	Body                 []SystemIsAnEntityThatConsumesEntitlementsAlsoReferredAsAConsumer `json:"body,omitempty"`       // SystemList is a System Slice.
	Pagination           *APIPageParam                                                     `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{}                                            `json:"-"`                    // All unmatched properties.
}

type marshalGetSystemsResponseValueOK GetSystemsResponseValueOK

var knownKeysGetSystemsResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSystemsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSystemsResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSystemsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSystemsResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSystemsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSystemsResponseValueOK(g))
	}

	return marshalUnion(marshalGetSystemsResponseValueOK(g), g.AdditionalProperties)
}

// GetSystemsSystemUUIDResponseValueOK structure is generated from "GetSystemsSystemUUID/response/ValueOK".
type GetSystemsSystemUUIDResponseValueOK struct {
	Body                 *ShowSystem            `json:"body,omitempty"` // System is an entity that consumes entitlements. Also referred as a Consumer.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalGetSystemsSystemUUIDResponseValueOK GetSystemsSystemUUIDResponseValueOK

var knownKeysGetSystemsSystemUUIDResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (g *GetSystemsSystemUUIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSystemsSystemUUIDResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSystemsSystemUUIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSystemsSystemUUIDResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSystemsSystemUUIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSystemsSystemUUIDResponseValueOK(g))
	}

	return marshalUnion(marshalGetSystemsSystemUUIDResponseValueOK(g), g.AdditionalProperties)
}

// ShowSystem structure is generated from "#/definitions/ShowSystem".
//
// System is an entity that consumes entitlements. Also referred as a Consumer.
type ShowSystem struct {
	AutoAttachSetting         bool                          `json:"autoAttachSetting,omitempty"`
	ComplianceStatus          string                        `json:"complianceStatus,omitempty"`
	CreatedBy                 string                        `json:"createdBy,omitempty"`
	CreatedDate               string                        `json:"createdDate,omitempty"`               // Date represents the date format used for API returns.
	EntitlementStatus         string                        `json:"entitlementStatus,omitempty"`
	EntitlementsAttached      *EntitlementsAttachedResponse `json:"entitlementsAttached,omitempty"`      // EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult.
	EntitlementsAttachedCount int64                         `json:"entitlementsAttachedCount,omitempty"`
	ErrataApplicabilityCounts *ErrataApplicabilityCounts    `json:"errataApplicabilityCounts,omitempty"` // Applicable errata details.
	Facts                     *Facts                        `json:"facts,omitempty"`                     // Facts give additional details about the system.
	FactsCount                int64                         `json:"factsCount,omitempty"`
	Hostname                  string                        `json:"hostname,omitempty"`
	InstalledProducts         *InstalledProducts            `json:"installedProducts,omitempty"`         // Details of installed products on the system.
	InstalledProductsCount    int64                         `json:"installedProductsCount,omitempty"`
	LastCheckin               string                        `json:"lastCheckin,omitempty"`               // Date represents the date format used for API returns.
	Name                      string                        `json:"name,omitempty"`
	ServiceLevelPreference    string                        `json:"serviceLevelPreference,omitempty"`
	Type                      string                        `json:"type,omitempty"`
	Uuid                      string                        `json:"uuid,omitempty"`
	AdditionalProperties      map[string]interface{}        `json:"-"`                                   // All unmatched properties.
}

type marshalShowSystem ShowSystem

var knownKeysShowSystem = []string{
	"autoAttachSetting",
	"complianceStatus",
	"createdBy",
	"createdDate",
	"entitlementStatus",
	"entitlementsAttached",
	"entitlementsAttachedCount",
	"errataApplicabilityCounts",
	"facts",
	"factsCount",
	"hostname",
	"installedProducts",
	"installedProductsCount",
	"lastCheckin",
	"name",
	"serviceLevelPreference",
	"type",
	"uuid",
}

// UnmarshalJSON decodes JSON.
func (s *ShowSystem) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalShowSystem(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysShowSystem {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = ShowSystem(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ShowSystem) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalShowSystem(s))
	}

	return marshalUnion(marshalShowSystem(s), s.AdditionalProperties)
}

// ErrataApplicabilityCounts structure is generated from "#/definitions/ErrataApplicabilityCounts".
//
// Applicable errata details.
type ErrataApplicabilityCounts struct {
	Reason               string                 `json:"reason,omitempty"`
	Valid                bool                   `json:"valid,omitempty"`
	Value                *ErrataCount           `json:"value,omitempty"`  // ErrataCount is the errata information for a System.
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalErrataApplicabilityCounts ErrataApplicabilityCounts

var knownKeysErrataApplicabilityCounts = []string{
	"reason",
	"valid",
	"value",
}

// UnmarshalJSON decodes JSON.
func (e *ErrataApplicabilityCounts) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErrataApplicabilityCounts(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErrataApplicabilityCounts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErrataApplicabilityCounts(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErrataApplicabilityCounts) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErrataApplicabilityCounts(e))
	}

	return marshalUnion(marshalErrataApplicabilityCounts(e), e.AdditionalProperties)
}

// Facts structure is generated from "#/definitions/Facts".
//
// facts give additional details about the system.
type Facts struct {
	Key                  string                 `json:"key,omitempty"`
	Value                string                 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalFacts Facts

var knownKeysFacts = []string{
	"key",
	"value",
}

// UnmarshalJSON decodes JSON.
func (f *Facts) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFacts(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFacts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = Facts(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f Facts) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFacts(f))
	}

	return marshalUnion(marshalFacts(f), f.AdditionalProperties)
}

// InstalledProducts structure is generated from "#/definitions/InstalledProducts".
//
// details of installed products on the system.
type InstalledProducts struct {
	Arch                 string                 `json:"arch,omitempty"`
	ProductID            string                 `json:"productID,omitempty"`
	ProductName          string                 `json:"productName,omitempty"`
	Status               string                 `json:"status,omitempty"`
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalInstalledProducts InstalledProducts

var knownKeysInstalledProducts = []string{
	"arch",
	"productID",
	"productName",
	"status",
	"version",
}

// UnmarshalJSON decodes JSON.
func (i *InstalledProducts) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalInstalledProducts(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysInstalledProducts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = InstalledProducts(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i InstalledProducts) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalInstalledProducts(i))
	}

	return marshalUnion(marshalInstalledProducts(i), i.AdditionalProperties)
}

// PostSystemsSystemUUIDEntitlementsResponseValueOK structure is generated from "PostSystemsSystemUUIDEntitlements/response/ValueOK".
type PostSystemsSystemUUIDEntitlementsResponseValueOK struct {
	Body                 *AttachEntitlement     `json:"body,omitempty"` // System is an entity that consumes entitlements. Also referred as a Consumer.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPostSystemsSystemUUIDEntitlementsResponseValueOK PostSystemsSystemUUIDEntitlementsResponseValueOK

var knownKeysPostSystemsSystemUUIDEntitlementsResponseValueOK = []string{
	"body",
}

// UnmarshalJSON decodes JSON.
func (p *PostSystemsSystemUUIDEntitlementsResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostSystemsSystemUUIDEntitlementsResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostSystemsSystemUUIDEntitlementsResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostSystemsSystemUUIDEntitlementsResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostSystemsSystemUUIDEntitlementsResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostSystemsSystemUUIDEntitlementsResponseValueOK(p))
	}

	return marshalUnion(marshalPostSystemsSystemUUIDEntitlementsResponseValueOK(p), p.AdditionalProperties)
}

// AttachEntitlement structure is generated from "#/definitions/AttachEntitlement".
//
// System is an entity that consumes entitlements. Also referred as a Consumer.
type AttachEntitlement struct {
	AutoAttachSetting         bool                          `json:"autoAttachSetting,omitempty"`
	ComplianceStatus          string                        `json:"complianceStatus,omitempty"`
	CreatedBy                 string                        `json:"createdBy,omitempty"`
	CreatedDate               string                        `json:"createdDate,omitempty"`               // Date represents the date format used for API returns.
	EntitlementStatus         string                        `json:"entitlementStatus,omitempty"`
	EntitlementsAttached      *EntitlementsAttachedResponse `json:"entitlementsAttached,omitempty"`      // EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult.
	EntitlementsAttachedCount int64                         `json:"entitlementsAttachedCount,omitempty"`
	ErrataApplicabilityCounts *ErrataApplicabilityCounts    `json:"errataApplicabilityCounts,omitempty"` // Applicable errata details.
	FactsCount                int64                         `json:"factsCount,omitempty"`
	Hostname                  string                        `json:"hostname,omitempty"`
	InstalledProductsCount    int64                         `json:"installedProductsCount,omitempty"`
	LastCheckin               string                        `json:"lastCheckin,omitempty"`               // Date represents the date format used for API returns.
	Name                      string                        `json:"name,omitempty"`
	ServiceLevelPreference    string                        `json:"serviceLevelPreference,omitempty"`
	Type                      string                        `json:"type,omitempty"`
	Uuid                      string                        `json:"uuid,omitempty"`
	AdditionalProperties      map[string]interface{}        `json:"-"`                                   // All unmatched properties.
}

type marshalAttachEntitlement AttachEntitlement

var knownKeysAttachEntitlement = []string{
	"autoAttachSetting",
	"complianceStatus",
	"createdBy",
	"createdDate",
	"entitlementStatus",
	"entitlementsAttached",
	"entitlementsAttachedCount",
	"errataApplicabilityCounts",
	"factsCount",
	"hostname",
	"installedProductsCount",
	"lastCheckin",
	"name",
	"serviceLevelPreference",
	"type",
	"uuid",
}

// UnmarshalJSON decodes JSON.
func (a *AttachEntitlement) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAttachEntitlement(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAttachEntitlement {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AttachEntitlement(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AttachEntitlement) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAttachEntitlement(a))
	}

	return marshalUnion(marshalAttachEntitlement(a), a.AdditionalProperties)
}

// GetSystemsSystemUUIDErrataResponseValueOK structure is generated from "GetSystemsSystemUUIDErrata/response/ValueOK".
type GetSystemsSystemUUIDErrataResponseValueOK struct {
	Body                 []ErratumForSystem     `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalGetSystemsSystemUUIDErrataResponseValueOK GetSystemsSystemUUIDErrataResponseValueOK

var knownKeysGetSystemsSystemUUIDErrataResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSystemsSystemUUIDErrataResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSystemsSystemUUIDErrataResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSystemsSystemUUIDErrataResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSystemsSystemUUIDErrataResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSystemsSystemUUIDErrataResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSystemsSystemUUIDErrataResponseValueOK(g))
	}

	return marshalUnion(marshalGetSystemsSystemUUIDErrataResponseValueOK(g), g.AdditionalProperties)
}

// ErratumForSystem structure is generated from "#/definitions/ErratumForSystem".
//
// an erratum listed for a system.
type ErratumForSystem struct {
	Href                 string                 `json:"href,omitempty"`
	ID                   string                 `json:"id,omitempty"`
	Published            string                 `json:"published,omitempty"` // Date represents the date format used for API returns.
	Severity             string                 `json:"severity,omitempty"`
	Synopsis             string                 `json:"synopsis,omitempty"`
	Type                 string                 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                   // All unmatched properties.
}

type marshalErratumForSystem ErratumForSystem

var knownKeysErratumForSystem = []string{
	"href",
	"id",
	"published",
	"severity",
	"synopsis",
	"type",
}

// UnmarshalJSON decodes JSON.
func (e *ErratumForSystem) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErratumForSystem(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErratumForSystem {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErratumForSystem(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErratumForSystem) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErratumForSystem(e))
	}

	return marshalUnion(marshalErratumForSystem(e), e.AdditionalProperties)
}

// GetSystemsSystemUUIDPackagesResponseValueOK structure is generated from "GetSystemsSystemUUIDPackages/response/ValueOK".
type GetSystemsSystemUUIDPackagesResponseValueOK struct {
	Body                 []PackageForSystem     `json:"body,omitempty"`
	Pagination           *APIPageParam          `json:"pagination,omitempty"` // APIPageParam details the pagination parameters in APIResponse.
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalGetSystemsSystemUUIDPackagesResponseValueOK GetSystemsSystemUUIDPackagesResponseValueOK

var knownKeysGetSystemsSystemUUIDPackagesResponseValueOK = []string{
	"body",
	"pagination",
}

// UnmarshalJSON decodes JSON.
func (g *GetSystemsSystemUUIDPackagesResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetSystemsSystemUUIDPackagesResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetSystemsSystemUUIDPackagesResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetSystemsSystemUUIDPackagesResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetSystemsSystemUUIDPackagesResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetSystemsSystemUUIDPackagesResponseValueOK(g))
	}

	return marshalUnion(marshalGetSystemsSystemUUIDPackagesResponseValueOK(g), g.AdditionalProperties)
}

// PackageForSystem structure is generated from "#/definitions/PackageForSystem".
//
// package installed on a system.
type PackageForSystem struct {
	Advisories           []PackageForSystemAdvisoriesItems `json:"advisories,omitempty"`
	Arch                 string                            `json:"arch,omitempty"`
	Epoch                int64                             `json:"epoch,omitempty"`
	ErrataCount          int64                             `json:"errataCount,omitempty"`
	Name                 string                            `json:"name,omitempty"`
	Release              string                            `json:"release,omitempty"`
	Version              string                            `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`                     // All unmatched properties.
}

type marshalPackageForSystem PackageForSystem

var knownKeysPackageForSystem = []string{
	"advisories",
	"arch",
	"epoch",
	"errataCount",
	"name",
	"release",
	"version",
}

// UnmarshalJSON decodes JSON.
func (p *PackageForSystem) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPackageForSystem(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPackageForSystem {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PackageForSystem(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PackageForSystem) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPackageForSystem(p))
	}

	return marshalUnion(marshalPackageForSystem(p), p.AdditionalProperties)
}

// PackageForSystemAdvisoriesItems structure is generated from "#/definitions/PackageForSystem->advisories->items".
type PackageForSystemAdvisoriesItems struct {
	Advisory             string                 `json:"advisory,omitempty"`
	URL                  string                 `json:"url,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPackageForSystemAdvisoriesItems PackageForSystemAdvisoriesItems

var knownKeysPackageForSystemAdvisoriesItems = []string{
	"advisory",
	"url",
}

// UnmarshalJSON decodes JSON.
func (p *PackageForSystemAdvisoriesItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPackageForSystemAdvisoriesItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPackageForSystemAdvisoriesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PackageForSystemAdvisoriesItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PackageForSystemAdvisoriesItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPackageForSystemAdvisoriesItems(p))
	}

	return marshalUnion(marshalPackageForSystemAdvisoriesItems(p), p.AdditionalProperties)
}

// GetAllocationsRequestQueryType is an enum type.
type GetAllocationsRequestQueryType string

// GetAllocationsRequestQueryType values enumeration.
const (
	GetAllocationsRequestQueryTypeSAM = GetAllocationsRequestQueryType("SAM")
	GetAllocationsRequestQueryTypeSatellite = GetAllocationsRequestQueryType("Satellite")
)

// MarshalJSON encodes JSON.
func (i GetAllocationsRequestQueryType) MarshalJSON() ([]byte, error) {
	switch i {
	case GetAllocationsRequestQueryTypeSAM:
	case GetAllocationsRequestQueryTypeSatellite:

	default:
		return nil, fmt.Errorf("unexpected GetAllocationsRequestQueryType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetAllocationsRequestQueryType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetAllocationsRequestQueryType(ii)

	switch v {
	case GetAllocationsRequestQueryTypeSAM:
	case GetAllocationsRequestQueryTypeSatellite:

	default:
		return fmt.Errorf("unexpected GetAllocationsRequestQueryType value: %v", v)
	}

	*i = v

	return nil
}

// GetAllocationsRequestType is an enum type.
type GetAllocationsRequestType string

// GetAllocationsRequestType values enumeration.
const (
	GetAllocationsRequestTypeSAM = GetAllocationsRequestType("SAM")
	GetAllocationsRequestTypeSatellite = GetAllocationsRequestType("Satellite")
)

// MarshalJSON encodes JSON.
func (i GetAllocationsRequestType) MarshalJSON() ([]byte, error) {
	switch i {
	case GetAllocationsRequestTypeSAM:
	case GetAllocationsRequestTypeSatellite:

	default:
		return nil, fmt.Errorf("unexpected GetAllocationsRequestType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetAllocationsRequestType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetAllocationsRequestType(ii)

	switch v {
	case GetAllocationsRequestTypeSAM:
	case GetAllocationsRequestTypeSatellite:

	default:
		return fmt.Errorf("unexpected GetAllocationsRequestType value: %v", v)
	}

	*i = v

	return nil
}

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName is an enum type.
type PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName string

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName values enumeration.
const (
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAWS = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName("AWS")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAGOV = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName("AGOV")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameACN = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName("ACN")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameMSAZ = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName("MSAZ")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameGCE = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName("GCE")
)

// MarshalJSON encodes JSON.
func (i PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName) MarshalJSON() ([]byte, error) {
	switch i {
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAWS:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAGOV:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameACN:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameMSAZ:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameGCE:

	default:
		return nil, fmt.Errorf("unexpected PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName(ii)

	switch v {
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAWS:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameAGOV:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameACN:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameMSAZ:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortNameGCE:

	default:
		return fmt.Errorf("unexpected PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestPathProviderShortName value: %v", v)
	}

	*i = v

	return nil
}

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName is an enum type.
type PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName string

// PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName values enumeration.
const (
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAWS = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName("AWS")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAGOV = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName("AGOV")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameACN = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName("ACN")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameMSAZ = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName("MSAZ")
	PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameGCE = PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName("GCE")
)

// MarshalJSON encodes JSON.
func (i PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName) MarshalJSON() ([]byte, error) {
	switch i {
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAWS:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAGOV:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameACN:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameMSAZ:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameGCE:

	default:
		return nil, fmt.Errorf("unexpected PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName(ii)

	switch v {
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAWS:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameAGOV:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameACN:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameMSAZ:
	case PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortNameGCE:

	default:
		return fmt.Errorf("unexpected PutCloudAccessProvidersProviderShortNameAccountsAccountIDVerificationRequestProviderShortName value: %v", v)
	}

	*i = v

	return nil
}

// GetSystemsSystemUUIDRequestQueryIncludeItems is an enum type.
type GetSystemsSystemUUIDRequestQueryIncludeItems string

// GetSystemsSystemUUIDRequestQueryIncludeItems values enumeration.
const (
	GetSystemsSystemUUIDRequestQueryIncludeItemsFacts = GetSystemsSystemUUIDRequestQueryIncludeItems("facts")
	GetSystemsSystemUUIDRequestQueryIncludeItemsEntitlements = GetSystemsSystemUUIDRequestQueryIncludeItems("entitlements")
	GetSystemsSystemUUIDRequestQueryIncludeItemsInstalledProducts = GetSystemsSystemUUIDRequestQueryIncludeItems("installedProducts")
)

// MarshalJSON encodes JSON.
func (i GetSystemsSystemUUIDRequestQueryIncludeItems) MarshalJSON() ([]byte, error) {
	switch i {
	case GetSystemsSystemUUIDRequestQueryIncludeItemsFacts:
	case GetSystemsSystemUUIDRequestQueryIncludeItemsEntitlements:
	case GetSystemsSystemUUIDRequestQueryIncludeItemsInstalledProducts:

	default:
		return nil, fmt.Errorf("unexpected GetSystemsSystemUUIDRequestQueryIncludeItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetSystemsSystemUUIDRequestQueryIncludeItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetSystemsSystemUUIDRequestQueryIncludeItems(ii)

	switch v {
	case GetSystemsSystemUUIDRequestQueryIncludeItemsFacts:
	case GetSystemsSystemUUIDRequestQueryIncludeItemsEntitlements:
	case GetSystemsSystemUUIDRequestQueryIncludeItemsInstalledProducts:

	default:
		return fmt.Errorf("unexpected GetSystemsSystemUUIDRequestQueryIncludeItems value: %v", v)
	}

	*i = v

	return nil
}

// GetSystemsSystemUUIDRequestIncludeItems is an enum type.
type GetSystemsSystemUUIDRequestIncludeItems string

// GetSystemsSystemUUIDRequestIncludeItems values enumeration.
const (
	GetSystemsSystemUUIDRequestIncludeItemsFacts = GetSystemsSystemUUIDRequestIncludeItems("facts")
	GetSystemsSystemUUIDRequestIncludeItemsEntitlements = GetSystemsSystemUUIDRequestIncludeItems("entitlements")
	GetSystemsSystemUUIDRequestIncludeItemsInstalledProducts = GetSystemsSystemUUIDRequestIncludeItems("installedProducts")
)

// MarshalJSON encodes JSON.
func (i GetSystemsSystemUUIDRequestIncludeItems) MarshalJSON() ([]byte, error) {
	switch i {
	case GetSystemsSystemUUIDRequestIncludeItemsFacts:
	case GetSystemsSystemUUIDRequestIncludeItemsEntitlements:
	case GetSystemsSystemUUIDRequestIncludeItemsInstalledProducts:

	default:
		return nil, fmt.Errorf("unexpected GetSystemsSystemUUIDRequestIncludeItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetSystemsSystemUUIDRequestIncludeItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetSystemsSystemUUIDRequestIncludeItems(ii)

	switch v {
	case GetSystemsSystemUUIDRequestIncludeItemsFacts:
	case GetSystemsSystemUUIDRequestIncludeItemsEntitlements:
	case GetSystemsSystemUUIDRequestIncludeItemsInstalledProducts:

	default:
		return fmt.Errorf("unexpected GetSystemsSystemUUIDRequestIncludeItems value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
