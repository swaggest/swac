// Code is generated by github.com/swaggest/swac <version>, do not edit. ðŸ¤–

/**
 * @constructor
 * @param {string} baseURL - Base URL.
 */
function APIClient(baseURL) {
    // Trim trailing backslash.
    this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
}

/**
 * @param {object} req
 * @param {DataSetListCallback} onOK
 */
APIClient.prototype.listDataSets = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {GetDatasetVersionFieldsRequest} req
 * @param {StringCallback} onOK
 * @param {StringCallback} onNotFound
 */
APIClient.prototype.getDatasetVersionFields = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/' + encodeURIComponent(req.dataset) +
    '/' + encodeURIComponent(req.version) +
    '/fields?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {PostDatasetVersionRecordsRequest} req
 * @param {ArrayObjectStringObjectCallback} onOK
 * @param {RawCallback} onNotFound
 */
APIClient.prototype.postDatasetVersionRecords = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(x);
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/' + encodeURIComponent(req.dataset) +
    '/' + encodeURIComponent(req.version) +
    '/records?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    var formData = ''
    if (typeof req.criteria !== 'undefined') {
        formData += 'criteria=' + encodeURIComponent(req.criteria) + '&'
    }
    if (typeof req.start !== 'undefined') {
        formData += 'start=' + encodeURIComponent(req.start) + '&'
    }
    if (typeof req.rows !== 'undefined') {
        formData += 'rows=' + encodeURIComponent(req.rows) + '&'
    }

    if (formData !== '') {
        x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        x.send(formData.slice(0, -1))
        return  
    }

    x.send();
}

