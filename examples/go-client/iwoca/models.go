// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package acme

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// StatePayload structure is generated from "#/definitions/state_payload".
//
// state_payload.
//
// The customer state endpoint.
type StatePayload struct {
	Data                 *StatePayloadData      `json:"data,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalStatePayload StatePayload

var knownKeysStatePayload = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayload) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayload(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayload {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayload(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayload) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayload(s))
	}

	return marshalUnion(marshalStatePayload(s), s.AdditionalProperties)
}

// StatePayloadData structure is generated from "#/definitions/state_payload->data".
type StatePayloadData struct {
	Application          *StatePayloadDataApplication `json:"application,omitempty"` // Data submitted by the customer about themselves, their company or their funding requirements. If this data changes over time, you should update the state to reflect the latest data or requirements.
	Partner              *StatePayloadDataPartner     `json:"partner,omitempty"`     // Supplemental data that the partner holds on the customer. This should not be exposed to the customer since it may contain sensitive details such as the verification_data array.
	// This field is ignored in POST/PUT requests.
	// Format: uuid.
	StateKey             string                       `json:"state_key,omitempty"`
	// This field is used for optimistic concurrency control. In response to a GET request the version represents the latest stored version of the state. In the payload of a PUT request it represents the version of the state that the client was editing, which would have been received in a response to an earlier GET request. This field will only be returned in GET requests if you have been opted into optimistic concurrency control. It should never be supplied with POST requests but should be supplied with PUT requests if you have been opted into optimistic concurrency control.
	// Format: uuid.
	Version              string                       `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`                     // All unmatched properties.
}

type marshalStatePayloadData StatePayloadData

var knownKeysStatePayloadData = []string{
	"application",
	"partner",
	"state_key",
	"version",
	"schema_version",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadData) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadData(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["schema_version"]; exists && string(v) != `"v1"` {
		return fmt.Errorf(`bad const value for "schema_version" ("v1" expected, %s received)`, v)
	}

	delete(rawMap, "schema_version")

	for _, key := range knownKeysStatePayloadData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadData(ms)

	return nil
}

var (
	// constStatePayloadData is unconditionally added to JSON.
	constStatePayloadData = json.RawMessage(`{"schema_version":"v1"}`)
)

// MarshalJSON encodes JSON.
func (s StatePayloadData) MarshalJSON() ([]byte, error) {
	return marshalUnion(constStatePayloadData, marshalStatePayloadData(s), s.AdditionalProperties)
}

// StatePayloadDataApplication structure is generated from "#/definitions/state_payload->data->application".
//
// Data submitted by the customer about themselves, their company or their funding requirements. If this data changes over time, you should update the state to reflect the latest data or requirements.
type StatePayloadDataApplication struct {
	Company              *Company                                      `json:"company,omitempty"`            // Company.
	RequestedProducts    *StatePayloadDataApplicationRequestedProducts `json:"requested_products,omitempty"`
	People               []Person                                      `json:"people,omitempty"`             // People associated with the company including the applicant and any other directors, shareholders or loan guarantors you wish to submit.
	AdditionalProperties map[string]interface{}                        `json:"-"`                            // All unmatched properties.
}

type marshalStatePayloadDataApplication StatePayloadDataApplication

var knownKeysStatePayloadDataApplication = []string{
	"company",
	"requested_products",
	"people",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataApplication) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataApplication(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataApplication {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataApplication(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataApplication) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataApplication(s))
	}

	return marshalUnion(marshalStatePayloadDataApplication(s), s.AdditionalProperties)
}

// Company structure is generated from "#/definitions/company".
//
// company.
type Company struct {
	Last12MonthsProfit    *CompanyLast12MonthsProfit        `json:"last_12_months_profit,omitempty"`   // All essential personal expenses, apart from housing. For example, food, transport and other loan repayments. Required for lending to sole traders.
	// Company website.
	// Format: uri.
	Website               string                            `json:"website,omitempty"`
	VatStatus             *CompanyVatStatus                 `json:"vat_status,omitempty"`              // Information on the company's VAT registration status.
	NumberOfEmployees     int64                             `json:"number_of_employees,omitempty"`
	RegisteredCompanyName string                            `json:"registered_company_name,omitempty"` // Registered company name for a registered business such as a limited company, as on Companies House.
	Industry              string                            `json:"industry,omitempty"`                // Recommended value is one of: Agriculture, Forestry & Fishing; Architecture & Engineering; Business Support Services; Car Dealers, Garages & Mechanics; Cleaning, Landscaping & Gardening; Construction; Education & Training; Finance & Insurance; Health & Care; Hotels, Restaurants & Pubs; IT & Communications; Leisure / Other Services; Manufacturing, Food Processing & Printing; Professional Services; Property & Real Estate; Publishing, Film & Media Production; Retail; Transport & Logistics; Wholesale; Other.
	OnlineSalesPercentage int64                             `json:"online_sales_percentage,omitempty"`
	Number                string                            `json:"company_number,omitempty"`          // Company number as on Companies House.
	ThirdPartyProviders   []CompanyThirdPartyProvidersItems `json:"third_party_providers,omitempty"`   // Details of third-party providers used by the business such as Xero, eBay, PayPal or others.
	Last12MonthsTurnover  *CompanyLast12MonthsTurnover      `json:"last_12_months_turnover,omitempty"` // Estimated revenue over the last 12 months. For a young business without a full year of revenue, revenue to date should be given.
	// Date when company started trading, with expected ISO 8601 format.
	// Format: date.
	TradingFromDate       string                            `json:"trading_from_date,omitempty"`
	Type                  CompanyType                       `json:"type,omitempty"`
	// Bank_details.
	// Details of the business bank account used for funding.
	BankDetails           *BankDetails                      `json:"bank_details,omitempty"`
	TradingName           string                            `json:"trading_name,omitempty"`            // Primary company name used for sole traders and ordinary partnerships, otherwise registered name will typically be used.
	OverdraftStatus       *CompanyOverdraftStatus           `json:"overdraft_status,omitempty"`
	RegisteredAddress     *CompanyAddress                   `json:"registered_address,omitempty"`      // Company_address.
	TradingAddress        *CompanyAddress                   `json:"trading_address,omitempty"`         // Company_address.
	AdditionalProperties  map[string]interface{}            `json:"-"`                                 // All unmatched properties.
}

type marshalCompany Company

var knownKeysCompany = []string{
	"last_12_months_profit",
	"website",
	"vat_status",
	"number_of_employees",
	"registered_company_name",
	"industry",
	"online_sales_percentage",
	"company_number",
	"third_party_providers",
	"last_12_months_turnover",
	"trading_from_date",
	"type",
	"bank_details",
	"trading_name",
	"overdraft_status",
	"registered_address",
	"trading_address",
}

// UnmarshalJSON decodes JSON.
func (c *Company) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompany(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompany {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = Company(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Company) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompany(c))
	}

	return marshalUnion(marshalCompany(c), c.AdditionalProperties)
}

// CompanyLast12MonthsProfit structure is generated from "#/definitions/company->last_12_months_profit".
//
// All essential personal expenses, apart from housing. For example, food, transport and other loan repayments. Required for lending to sole traders.
type CompanyLast12MonthsProfit struct {
	Amount               float64                `json:"amount,omitempty"`   // Pre-tax amount submitted by customer in pounds. Note that this differs from monthly_non_business_income which is post-tax.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCompanyLast12MonthsProfit CompanyLast12MonthsProfit

var knownKeysCompanyLast12MonthsProfit = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyLast12MonthsProfit) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyLast12MonthsProfit(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyLast12MonthsProfit {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyLast12MonthsProfit(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyLast12MonthsProfit) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyLast12MonthsProfit(c))
	}

	return marshalUnion(marshalCompanyLast12MonthsProfit(c), c.AdditionalProperties)
}

// CompanyVatStatus structure is generated from "#/definitions/company->vat_status".
//
// Information on the company's VAT registration status.
type CompanyVatStatus struct {
	VatNumber             string                 `json:"vat_number,omitempty"`
	IsVatRegistered       bool                   `json:"is_vat_registered,omitempty"`
	RegisteredOver3Months bool                   `json:"registered_over_3_months,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`                                  // All unmatched properties.
}

type marshalCompanyVatStatus CompanyVatStatus

var knownKeysCompanyVatStatus = []string{
	"vat_number",
	"is_vat_registered",
	"registered_over_3_months",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyVatStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyVatStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyVatStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyVatStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyVatStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyVatStatus(c))
	}

	return marshalUnion(marshalCompanyVatStatus(c), c.AdditionalProperties)
}

// CompanyThirdPartyProvidersItems structure is generated from "#/definitions/company->third_party_providers->items".
type CompanyThirdPartyProvidersItems struct {
	Type                 CompanyThirdPartyProvidersItemsType `json:"type"` // Required.
	// Recommended values for major banks: barclays, hsbc, lloyds, natwest, santander, other. Recommended values for software: xero, kashflow, sage-one, sage-50, other. Recommended values for ecommerce: ebay, amazon, paypal-classic, ekm, shopify, skrill, sagepay, other.
	// Required.
	Name                 string                              `json:"name"`
	AdditionalProperties map[string]interface{}              `json:"-"`    // All unmatched properties.
}

type marshalCompanyThirdPartyProvidersItems CompanyThirdPartyProvidersItems

var knownKeysCompanyThirdPartyProvidersItems = []string{
	"type",
	"name",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyThirdPartyProvidersItems) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyThirdPartyProvidersItems(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyThirdPartyProvidersItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyThirdPartyProvidersItems(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyThirdPartyProvidersItems) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyThirdPartyProvidersItems(c))
	}

	return marshalUnion(marshalCompanyThirdPartyProvidersItems(c), c.AdditionalProperties)
}

// CompanyLast12MonthsTurnover structure is generated from "#/definitions/company->last_12_months_turnover".
//
// Estimated revenue over the last 12 months. For a young business without a full year of revenue, revenue to date should be given.
type CompanyLast12MonthsTurnover struct {
	Amount               float64                `json:"amount,omitempty"`   // Amount submitted by customer in pounds or other estimate.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCompanyLast12MonthsTurnover CompanyLast12MonthsTurnover

var knownKeysCompanyLast12MonthsTurnover = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyLast12MonthsTurnover) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyLast12MonthsTurnover(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyLast12MonthsTurnover {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyLast12MonthsTurnover(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyLast12MonthsTurnover) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyLast12MonthsTurnover(c))
	}

	return marshalUnion(marshalCompanyLast12MonthsTurnover(c), c.AdditionalProperties)
}

// BankDetails structure is generated from "#/definitions/bank_details".
//
// bank_details.
//
// Details of the business bank account used for funding.
type BankDetails struct {
	AccountNumber        string                 `json:"account_number,omitempty"`
	SortCode             string                 `json:"sort_code,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                        // All unmatched properties.
}

type marshalBankDetails BankDetails

var knownKeysBankDetails = []string{
	"account_number",
	"sort_code",
}

// UnmarshalJSON decodes JSON.
func (b *BankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mb := marshalBankDetails(*b)

	err = json.Unmarshal(data, &mb)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mb.AdditionalProperties == nil {
			mb.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mb.AdditionalProperties[key] = val
	}

	*b = BankDetails(mb)

	return nil
}

// MarshalJSON encodes JSON.
func (b BankDetails) MarshalJSON() ([]byte, error) {
	if len(b.AdditionalProperties) == 0 {
		return json.Marshal(marshalBankDetails(b))
	}

	return marshalUnion(marshalBankDetails(b), b.AdditionalProperties)
}

// CompanyOverdraftStatus structure is generated from "#/definitions/company->overdraft_status".
type CompanyOverdraftStatus struct {
	HasOverdraft         bool                   `json:"has_overdraft,omitempty"`
	TotalOverdraftLimit  float64                `json:"total_overdraft_limit,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                               // All unmatched properties.
}

type marshalCompanyOverdraftStatus CompanyOverdraftStatus

var knownKeysCompanyOverdraftStatus = []string{
	"has_overdraft",
	"total_overdraft_limit",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyOverdraftStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyOverdraftStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyOverdraftStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyOverdraftStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyOverdraftStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyOverdraftStatus(c))
	}

	return marshalUnion(marshalCompanyOverdraftStatus(c), c.AdditionalProperties)
}

// CompanyAddress structure is generated from "#/definitions/company_address".
//
// company_address.
type CompanyAddress struct {
	BuildingName         string                 `json:"building_name,omitempty"`
	BuildingNumber       string                 `json:"building_number,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	StreetLine1          string                 `json:"street_line_1,omitempty"`
	StreetLine2          string                 `json:"street_line_2,omitempty"`
	Town                 string                 `json:"town,omitempty"`
	Country              CompanyAddressCountry  `json:"country,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalCompanyAddress CompanyAddress

var knownKeysCompanyAddress = []string{
	"building_name",
	"building_number",
	"postcode",
	"street_line_1",
	"street_line_2",
	"town",
	"country",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyAddress) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyAddress(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyAddress(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyAddress) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyAddress(c))
	}

	return marshalUnion(marshalCompanyAddress(c), c.AdditionalProperties)
}

// StatePayloadDataApplicationRequestedProducts structure is generated from "#/definitions/state_payload->data->application->requested_products".
type StatePayloadDataApplicationRequestedProducts struct {
	CreditFacility       *CreditFacilityRequest `json:"credit_facility,omitempty"` // Credit_facility_request.
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalStatePayloadDataApplicationRequestedProducts StatePayloadDataApplicationRequestedProducts

var knownKeysStatePayloadDataApplicationRequestedProducts = []string{
	"credit_facility",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataApplicationRequestedProducts) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataApplicationRequestedProducts(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataApplicationRequestedProducts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataApplicationRequestedProducts(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataApplicationRequestedProducts) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataApplicationRequestedProducts(s))
	}

	return marshalUnion(marshalStatePayloadDataApplicationRequestedProducts(s), s.AdditionalProperties)
}

// CreditFacilityRequest structure is generated from "#/definitions/credit_facility_request".
//
// credit_facility_request.
type CreditFacilityRequest struct {
	Approval             *CreditFacilityRequestApproval `json:"approval,omitempty"`
	Funding              *CreditFacilityRequestFunding  `json:"funding,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityRequest CreditFacilityRequest

var knownKeysCreditFacilityRequest = []string{
	"approval",
	"funding",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequest) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequest(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequest {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequest(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequest) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequest(c))
	}

	return marshalUnion(marshalCreditFacilityRequest(c), c.AdditionalProperties)
}

// CreditFacilityRequestApproval structure is generated from "#/definitions/credit_facility_request->approval".
type CreditFacilityRequestApproval struct {
	Amount               float64                              `json:"amount,omitempty"`           // Amount that the user is looking to get approved for.
	Interval             string                               `json:"interval,omitempty"`         // Interval between repayments, examples: 7d / 1m. Customers are put on a one month schedule by default and this would not typically be asked during the application journey.
	Duration             int64                                `json:"duration,omitempty"`         // Requested loan duration in months. For instance, an interval of 1m and a duration of 12 would correspond to a one year loan paid back in monthly instalments. In cases where the interval is not specified as a number of months, the actual duration will be rounded up to be a whole number of intervals (taking a month as 30 days).
	Purpose              CreditFacilityRequestApprovalPurpose `json:"purpose,omitempty"`          // A purpose may not be submitted if the customer is simply looking to get approved for the future, rather than a specific need.
	DetailedPurpose      string                               `json:"detailed_purpose,omitempty"` // Detailed_purpose is usually submitted if a purpose of other has been set.
	Urgency              CreditFacilityRequestApprovalUrgency `json:"urgency,omitempty"`          // Describes whether the customer needs the funding immediately (asap), over the next few weeks (weeks) or is simply looking to get approved for future use (future).
	Datetime             *time.Time                           `json:"datetime,omitempty"`         // Format: date-time.
	AdditionalProperties map[string]interface{}               `json:"-"`                          // All unmatched properties.
}

type marshalCreditFacilityRequestApproval CreditFacilityRequestApproval

var knownKeysCreditFacilityRequestApproval = []string{
	"amount",
	"interval",
	"duration",
	"purpose",
	"detailed_purpose",
	"urgency",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequestApproval) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequestApproval(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequestApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequestApproval(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequestApproval) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequestApproval(c))
	}

	return marshalUnion(marshalCreditFacilityRequestApproval(c), c.AdditionalProperties)
}

// CreditFacilityRequestFunding structure is generated from "#/definitions/credit_facility_request->funding".
type CreditFacilityRequestFunding struct {
	Amount               float64                `json:"amount,omitempty"`   // Amount that the user is looking to drawdown.
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityRequestFunding CreditFacilityRequestFunding

var knownKeysCreditFacilityRequestFunding = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequestFunding) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequestFunding(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequestFunding {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequestFunding(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequestFunding) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequestFunding(c))
	}

	return marshalUnion(marshalCreditFacilityRequestFunding(c), c.AdditionalProperties)
}

// Person structure is generated from "#/definitions/person".
//
// person.
type Person struct {
	FirstName                   string                             `json:"first_name,omitempty"`                     // Middle name is not required.
	LastName                    string                             `json:"last_name,omitempty"`
	// Unique identifier created and stored by the partner which will allow you to retrieve/update this data in the future.
	// Format: uuid.
	// Required.
	UID                         string                             `json:"uid"`
	Roles                       []PersonRolesItems                 `json:"roles,omitempty"`                          // There should only be one applicant but may be multiple people with the other roles.
	Title                       PersonTitle                        `json:"title,omitempty"`
	MonthlyNonHousingExpenses   *PersonMonthlyNonHousingExpenses   `json:"monthly_non_housing_expenses,omitempty"`   // All essential personal expenses, apart from housing. For example, food, transport and other loan repayments. Required for lending to sole traders.
	MonthlyOtherHouseholdIncome *PersonMonthlyOtherHouseholdIncome `json:"monthly_other_household_income,omitempty"` // Total income from other members of the applicant's household such as their wife or husband. Does not include their own income.
	NumberOfDependents          *PersonNumberOfDependents          `json:"number_of_dependents,omitempty"`           // Number of people that are financially dependent on the person (such as children or people in their care).
	Phones                      []PersonPhonesItems                `json:"phones,omitempty"`
	ResidentialAddresses        []Address                          `json:"residential_addresses,omitempty"`
	PrivacyPolicy               *PersonPrivacyPolicy               `json:"privacy_policy,omitempty"`
	CreditCheckConsent          *PersonCreditCheckConsent          `json:"credit_check_consent,omitempty"`
	// Date with expected ISO 8601 format.
	// Format: date.
	DateOfBirth                 string                             `json:"date_of_birth,omitempty"`
	MonthlyBusinessIncome       *PersonMonthlyBusinessIncome       `json:"monthly_business_income,omitempty"`
	MonthlyNonBusinessIncome    *PersonMonthlyNonBusinessIncome    `json:"monthly_non_business_income,omitempty"`    // All income from other jobs, pension etc. Required for lending to sole traders.
	Emails                      []PersonEmailsItems                `json:"emails,omitempty"`
	HowDidYouFindUs             *PersonHowDidYouFindUs             `json:"how_did_you_find_us,omitempty"`
	AdditionalProperties        map[string]interface{}             `json:"-"`                                        // All unmatched properties.
}

type marshalPerson Person

var knownKeysPerson = []string{
	"first_name",
	"last_name",
	"uid",
	"roles",
	"title",
	"monthly_non_housing_expenses",
	"monthly_other_household_income",
	"number_of_dependents",
	"phones",
	"residential_addresses",
	"privacy_policy",
	"credit_check_consent",
	"date_of_birth",
	"monthly_business_income",
	"monthly_non_business_income",
	"emails",
	"how_did_you_find_us",
}

// UnmarshalJSON decodes JSON.
func (p *Person) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPerson(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPerson {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = Person(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p Person) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPerson(p))
	}

	return marshalUnion(marshalPerson(p), p.AdditionalProperties)
}

// PersonMonthlyNonHousingExpenses structure is generated from "#/definitions/person->monthly_non_housing_expenses".
//
// All essential personal expenses, apart from housing. For example, food, transport and other loan repayments. Required for lending to sole traders.
type PersonMonthlyNonHousingExpenses struct {
	Amount               float64                `json:"amount,omitempty"`   // Amount submitted by customer in pounds.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonMonthlyNonHousingExpenses PersonMonthlyNonHousingExpenses

var knownKeysPersonMonthlyNonHousingExpenses = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonMonthlyNonHousingExpenses) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonMonthlyNonHousingExpenses(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonMonthlyNonHousingExpenses {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonMonthlyNonHousingExpenses(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonMonthlyNonHousingExpenses) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonMonthlyNonHousingExpenses(p))
	}

	return marshalUnion(marshalPersonMonthlyNonHousingExpenses(p), p.AdditionalProperties)
}

// PersonMonthlyOtherHouseholdIncome structure is generated from "#/definitions/person->monthly_other_household_income".
//
// Total income from other members of the applicant's household such as their wife or husband. Does not include their own income.
type PersonMonthlyOtherHouseholdIncome struct {
	Amount               float64                `json:"amount,omitempty"`
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonMonthlyOtherHouseholdIncome PersonMonthlyOtherHouseholdIncome

var knownKeysPersonMonthlyOtherHouseholdIncome = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonMonthlyOtherHouseholdIncome) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonMonthlyOtherHouseholdIncome(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonMonthlyOtherHouseholdIncome {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonMonthlyOtherHouseholdIncome(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonMonthlyOtherHouseholdIncome) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonMonthlyOtherHouseholdIncome(p))
	}

	return marshalUnion(marshalPersonMonthlyOtherHouseholdIncome(p), p.AdditionalProperties)
}

// PersonNumberOfDependents structure is generated from "#/definitions/person->number_of_dependents".
//
// Number of people that are financially dependent on the person (such as children or people in their care).
type PersonNumberOfDependents struct {
	Count                int64                  `json:"count,omitempty"`
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonNumberOfDependents PersonNumberOfDependents

var knownKeysPersonNumberOfDependents = []string{
	"count",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonNumberOfDependents) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonNumberOfDependents(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonNumberOfDependents {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonNumberOfDependents(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonNumberOfDependents) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonNumberOfDependents(p))
	}

	return marshalUnion(marshalPersonNumberOfDependents(p), p.AdditionalProperties)
}

// PersonPhonesItems structure is generated from "#/definitions/person->phones->items".
//
// Contact phone numbers. It's preferable to have both a primary and secondary phone number for the applicant if available.
type PersonPhonesItems struct {
	Type                 PersonPhonesItemsType  `json:"type,omitempty"`
	// Unique identifier created and stored by the partner which will allow you to retrieve/update this data in the future.
	// Format: uuid.
	// Required.
	UID                  string                 `json:"uid"`
	Number               string                 `json:"number,omitempty"` // Quite flexible, can handle with/without country code, e.g. +447778473883 / 07778473883.
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalPersonPhonesItems PersonPhonesItems

var knownKeysPersonPhonesItems = []string{
	"type",
	"uid",
	"number",
}

// UnmarshalJSON decodes JSON.
func (p *PersonPhonesItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonPhonesItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonPhonesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonPhonesItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonPhonesItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonPhonesItems(p))
	}

	return marshalUnion(marshalPersonPhonesItems(p), p.AdditionalProperties)
}

// Address structure is generated from "#/definitions/address".
//
// address.
type Address struct {
	Town                   string                         `json:"town,omitempty"`
	HouseName              string                         `json:"house_name,omitempty"`
	// Unique identifier created and stored by the partner which will allow you to retrieve/update this data in the future.
	// Format: uuid.
	// Required.
	UID                    string                         `json:"uid"`
	HouseNumber            string                         `json:"house_number,omitempty"`
	EquifaxToken           string                         `json:"equifax_token,omitempty"`
	ResidentialStatus      AddressResidentialStatus       `json:"residential_status,omitempty"`       // The rent_free option covers situations where they are living in a property that they don't own but they are not paying rent (e.g. living with parents or family).
	StreetLine2            string                         `json:"street_line_2,omitempty"`
	StreetLine1            string                         `json:"street_line_1,omitempty"`
	Postcode               string                         `json:"postcode,omitempty"`
	MonthlyHousingExpenses *AddressMonthlyHousingExpenses `json:"monthly_housing_expenses,omitempty"` // Monthly cost of rent or mortgage, depending on residential status, at this address. Required for lending to sole traders.
	// Date with expected ISO 8601 format. Optionally specify the date when they moved to this address. This date can be an estimate.
	// Format: date.
	DateFrom               string                         `json:"date_from,omitempty"`
	PropertyValue          *AddressPropertyValue          `json:"property_value,omitempty"`
	Country                AddressCountry                 `json:"country,omitempty"`
	AdditionalProperties   map[string]interface{}         `json:"-"`                                  // All unmatched properties.
}

type marshalAddress Address

var knownKeysAddress = []string{
	"town",
	"house_name",
	"uid",
	"house_number",
	"equifax_token",
	"residential_status",
	"street_line_2",
	"street_line_1",
	"postcode",
	"monthly_housing_expenses",
	"date_from",
	"property_value",
	"country",
}

// UnmarshalJSON decodes JSON.
func (a *Address) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddress(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = Address(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a Address) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddress(a))
	}

	return marshalUnion(marshalAddress(a), a.AdditionalProperties)
}

// AddressMonthlyHousingExpenses structure is generated from "#/definitions/address->monthly_housing_expenses".
//
// Monthly cost of rent or mortgage, depending on residential status, at this address. Required for lending to sole traders.
type AddressMonthlyHousingExpenses struct {
	Amount               float64                `json:"amount,omitempty"`
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalAddressMonthlyHousingExpenses AddressMonthlyHousingExpenses

var knownKeysAddressMonthlyHousingExpenses = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (a *AddressMonthlyHousingExpenses) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressMonthlyHousingExpenses(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressMonthlyHousingExpenses {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressMonthlyHousingExpenses(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressMonthlyHousingExpenses) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressMonthlyHousingExpenses(a))
	}

	return marshalUnion(marshalAddressMonthlyHousingExpenses(a), a.AdditionalProperties)
}

// AddressPropertyValue structure is generated from "#/definitions/address->property_value".
type AddressPropertyValue struct {
	Amount               float64                `json:"amount,omitempty"`
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalAddressPropertyValue AddressPropertyValue

var knownKeysAddressPropertyValue = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (a *AddressPropertyValue) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressPropertyValue(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressPropertyValue {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressPropertyValue(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressPropertyValue) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressPropertyValue(a))
	}

	return marshalUnion(marshalAddressPropertyValue(a), a.AdditionalProperties)
}

// PersonPrivacyPolicy structure is generated from "#/definitions/person->privacy_policy".
type PersonPrivacyPolicy struct {
	Agreed               bool                   `json:"agreed,omitempty"`   // Specify whether the user has agreed to the iwoca privacy policy.
	// Datetime when they agreed or disagreed with the iwoca privacy policy, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonPrivacyPolicy PersonPrivacyPolicy

var knownKeysPersonPrivacyPolicy = []string{
	"agreed",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonPrivacyPolicy) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonPrivacyPolicy(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonPrivacyPolicy {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonPrivacyPolicy(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonPrivacyPolicy) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonPrivacyPolicy(p))
	}

	return marshalUnion(marshalPersonPrivacyPolicy(p), p.AdditionalProperties)
}

// PersonCreditCheckConsent structure is generated from "#/definitions/person->credit_check_consent".
type PersonCreditCheckConsent struct {
	// Specify whether the user has agreed to an extended credit check.
	// Required.
	Agreed               bool                   `json:"agreed"`
	// Datetime when they agreed or disagreed to an extended credit check, with expected ISO 8601 format.
	// Format: date-time.
	// Required.
	Datetime             *time.Time             `json:"datetime"`
	AdditionalProperties map[string]interface{} `json:"-"`        // All unmatched properties.
}

type marshalPersonCreditCheckConsent PersonCreditCheckConsent

var knownKeysPersonCreditCheckConsent = []string{
	"agreed",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonCreditCheckConsent) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonCreditCheckConsent(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonCreditCheckConsent {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonCreditCheckConsent(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonCreditCheckConsent) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonCreditCheckConsent(p))
	}

	return marshalUnion(marshalPersonCreditCheckConsent(p), p.AdditionalProperties)
}

// PersonMonthlyBusinessIncome structure is generated from "#/definitions/person->monthly_business_income".
type PersonMonthlyBusinessIncome struct {
	Amount               float64                `json:"amount,omitempty"`
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonMonthlyBusinessIncome PersonMonthlyBusinessIncome

var knownKeysPersonMonthlyBusinessIncome = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonMonthlyBusinessIncome) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonMonthlyBusinessIncome(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonMonthlyBusinessIncome {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonMonthlyBusinessIncome(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonMonthlyBusinessIncome) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonMonthlyBusinessIncome(p))
	}

	return marshalUnion(marshalPersonMonthlyBusinessIncome(p), p.AdditionalProperties)
}

// PersonMonthlyNonBusinessIncome structure is generated from "#/definitions/person->monthly_non_business_income".
//
// All income from other jobs, pension etc. Required for lending to sole traders.
type PersonMonthlyNonBusinessIncome struct {
	Amount               float64                `json:"amount,omitempty"`   // Post-tax amount submitted by customer in pounds. Note that this differs from monthly_business_income which is pre-tax.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPersonMonthlyNonBusinessIncome PersonMonthlyNonBusinessIncome

var knownKeysPersonMonthlyNonBusinessIncome = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PersonMonthlyNonBusinessIncome) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonMonthlyNonBusinessIncome(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonMonthlyNonBusinessIncome {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonMonthlyNonBusinessIncome(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonMonthlyNonBusinessIncome) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonMonthlyNonBusinessIncome(p))
	}

	return marshalUnion(marshalPersonMonthlyNonBusinessIncome(p), p.AdditionalProperties)
}

// PersonEmailsItems structure is generated from "#/definitions/person->emails->items".
type PersonEmailsItems struct {
	MarketingOptIn       *MarketingOptIn        `json:"marketing_opt_in,omitempty"` // Marketing_opt_in.
	Type                 PersonEmailsItemsType  `json:"type,omitempty"`
	// Unique identifier created and stored by the partner which will allow you to retrieve/update this data in the future.
	// Format: uuid.
	// Required.
	UID                  string                 `json:"uid"`
	// Contact email address with format user@example.com (ideally not a generic address such as info@...).
	// Format: email.
	Email                string                 `json:"email,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                          // All unmatched properties.
}

type marshalPersonEmailsItems PersonEmailsItems

var knownKeysPersonEmailsItems = []string{
	"marketing_opt_in",
	"type",
	"uid",
	"email",
}

// UnmarshalJSON decodes JSON.
func (p *PersonEmailsItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonEmailsItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonEmailsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonEmailsItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonEmailsItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonEmailsItems(p))
	}

	return marshalUnion(marshalPersonEmailsItems(p), p.AdditionalProperties)
}

// MarketingOptIn structure is generated from "#/definitions/marketing_opt_in".
//
// marketing_opt_in.
type MarketingOptIn struct {
	Agreed               bool                   `json:"agreed,omitempty"`   // Specify if user has opted in to receive marketing emails from iwoca.
	// Datetime when they opted in or out of marketing emails, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalMarketingOptIn MarketingOptIn

var knownKeysMarketingOptIn = []string{
	"agreed",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (m *MarketingOptIn) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMarketingOptIn(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMarketingOptIn {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MarketingOptIn(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MarketingOptIn) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMarketingOptIn(m))
	}

	return marshalUnion(marshalMarketingOptIn(m), m.AdditionalProperties)
}

// PersonHowDidYouFindUs structure is generated from "#/definitions/person->how_did_you_find_us".
type PersonHowDidYouFindUs struct {
	Answer               PersonHowDidYouFindUsAnswer `json:"answer,omitempty"`  // Enum denoting where the customer heard about us.
	Details              string                      `json:"details,omitempty"` // Additional Details.
	AdditionalProperties map[string]interface{}      `json:"-"`                 // All unmatched properties.
}

type marshalPersonHowDidYouFindUs PersonHowDidYouFindUs

var knownKeysPersonHowDidYouFindUs = []string{
	"answer",
	"details",
}

// UnmarshalJSON decodes JSON.
func (p *PersonHowDidYouFindUs) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPersonHowDidYouFindUs(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPersonHowDidYouFindUs {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PersonHowDidYouFindUs(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PersonHowDidYouFindUs) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPersonHowDidYouFindUs(p))
	}

	return marshalUnion(marshalPersonHowDidYouFindUs(p), p.AdditionalProperties)
}

// StatePayloadDataPartner structure is generated from "#/definitions/state_payload->data->partner".
//
// Supplemental data that the partner holds on the customer. This should not be exposed to the customer since it may contain sensitive details such as the verification_data array.
type StatePayloadDataPartner struct {
	CustomerType         string                                   `json:"customer_type,omitempty"`     // Any categorisation of the customer held by the partner that may be required when reporting back data or that should affect the journey (as agreed between iwoca and partner). For example, you might submit 'VIP_customer' if you wanted to track SLAs for these customers separately.
	ExpectedProducts     *StatePayloadDataPartnerExpectedProducts `json:"expected_products,omitempty"`
	// Used by partners to tell iwoca which of their introducer's accounts should be linked to the application submitted.
	// Format: email.
	IntroducerEmail      string                                   `json:"introducer_email,omitempty"`
	VerifiedData         *StatePayloadDataPartnerVerifiedData     `json:"verified_data,omitempty"`     // In certain situations, a partner may be trusted by iwoca to verify that certain pieces of data have already been checked. For example, the partner may have already verified the customer's phone number so there is no need for iwoca to do it again. This section is used for submitting data on any verification that has taken place. It must not be exposed to customers. The structure follows the structure of the application section.
	AdditionalProperties map[string]interface{}                   `json:"-"`                           // All unmatched properties.
}

type marshalStatePayloadDataPartner StatePayloadDataPartner

var knownKeysStatePayloadDataPartner = []string{
	"customer_type",
	"expected_products",
	"introducer_email",
	"verified_data",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartner) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartner(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartner {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartner(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartner) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartner(s))
	}

	return marshalUnion(marshalStatePayloadDataPartner(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProducts structure is generated from "#/definitions/state_payload->data->partner->expected_products".
type StatePayloadDataPartnerExpectedProducts struct {
	CreditFacility       *StatePayloadDataPartnerExpectedProductsCreditFacility `json:"credit_facility,omitempty"`
	AdditionalProperties map[string]interface{}                                 `json:"-"`                         // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProducts StatePayloadDataPartnerExpectedProducts

var knownKeysStatePayloadDataPartnerExpectedProducts = []string{
	"credit_facility",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProducts) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProducts(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProducts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProducts(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProducts) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProducts(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProducts(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProductsCreditFacility structure is generated from "#/definitions/state_payload->data->partner->expected_products->credit_facility".
type StatePayloadDataPartnerExpectedProductsCreditFacility struct {
	Approval             *StatePayloadDataPartnerExpectedProductsCreditFacilityApproval `json:"approval,omitempty"`
	AdditionalProperties map[string]interface{}                                         `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProductsCreditFacility StatePayloadDataPartnerExpectedProductsCreditFacility

var knownKeysStatePayloadDataPartnerExpectedProductsCreditFacility = []string{
	"approval",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProductsCreditFacility) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProductsCreditFacility(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProductsCreditFacility {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProductsCreditFacility(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProductsCreditFacility) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProductsCreditFacility(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProductsCreditFacility(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProductsCreditFacilityApproval structure is generated from "#/definitions/state_payload->data->partner->expected_products->credit_facility->approval".
type StatePayloadDataPartnerExpectedProductsCreditFacilityApproval struct {
	Amount               float64                `json:"amount,omitempty"`   // Submitted in cases where the partner has shown a customer an approval amount or a pre-qualified amount based on some data they hold. This should only be done with prior agreement from iwoca.
	Rate                 float64                `json:"rate,omitempty"`     // Submitted in cases where the partner has shown a customer an expected monthly rate (including interest and fees) . This should only be done with prior agreement from iwoca.
	Interval             string                 `json:"interval,omitempty"`
	Duration             int64                  `json:"duration,omitempty"`
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	Apr                  float64                `json:"apr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval StatePayloadDataPartnerExpectedProductsCreditFacilityApproval

var knownKeysStatePayloadDataPartnerExpectedProductsCreditFacilityApproval = []string{
	"amount",
	"rate",
	"interval",
	"duration",
	"datetime",
	"apr",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProductsCreditFacilityApproval) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProductsCreditFacilityApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProductsCreditFacilityApproval(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProductsCreditFacilityApproval) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedData structure is generated from "#/definitions/state_payload->data->partner->verified_data".
//
// In certain situations, a partner may be trusted by iwoca to verify that certain pieces of data have already been checked. For example, the partner may have already verified the customer's phone number so there is no need for iwoca to do it again. This section is used for submitting data on any verification that has taken place. It must not be exposed to customers. The structure follows the structure of the application section.
type StatePayloadDataPartnerVerifiedData struct {
	Company              *StatePayloadDataPartnerVerifiedDataCompany      `json:"company,omitempty"`
	People               []StatePayloadDataPartnerVerifiedDataPeopleItems `json:"people,omitempty"`
	AdditionalProperties map[string]interface{}                           `json:"-"`                 // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedData StatePayloadDataPartnerVerifiedData

var knownKeysStatePayloadDataPartnerVerifiedData = []string{
	"company",
	"people",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedData) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedData(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedData(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedData) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedData(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedData(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompany structure is generated from "#/definitions/state_payload->data->partner->verified_data->company".
type StatePayloadDataPartnerVerifiedDataCompany struct {
	BankDetails          *StatePayloadDataPartnerVerifiedDataCompanyBankDetails          `json:"bank_details,omitempty"`
	Last12MonthsTurnover *StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover `json:"last_12_months_turnover,omitempty"`
	AdditionalProperties map[string]interface{}                                          `json:"-"`                                 // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompany StatePayloadDataPartnerVerifiedDataCompany

var knownKeysStatePayloadDataPartnerVerifiedDataCompany = []string{
	"bank_details",
	"last_12_months_turnover",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompany) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompany(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompany {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompany(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompany) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompany(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompany(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompanyBankDetails structure is generated from "#/definitions/state_payload->data->partner->verified_data->company->bank_details".
type StatePayloadDataPartnerVerifiedDataCompanyBankDetails struct {
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails StatePayloadDataPartnerVerifiedDataCompanyBankDetails

var knownKeysStatePayloadDataPartnerVerifiedDataCompanyBankDetails = []string{
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompanyBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompanyBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompanyBankDetails(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompanyBankDetails) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(s), s.AdditionalProperties)
}

// Verification structure is generated from "#/definitions/verification".
//
// verification.
type Verification struct {
	Method               string                 `json:"verification_method,omitempty"` // Method of verification, depending on data type (e.g. 'Penny transfer' for bank_details or 'SMS code' for phone_number).
	Verified             bool                   `json:"verified,omitempty"`            // If verified is true, specifies that you are confident that this piece of data is valid, in line with any contractual obligations you have on checking and validating data.
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalVerification Verification

var knownKeysVerification = []string{
	"verification_method",
	"verified",
}

// UnmarshalJSON decodes JSON.
func (v *Verification) UnmarshalJSON(data []byte) error {
	var err error

	mv := marshalVerification(*v)

	err = json.Unmarshal(data, &mv)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysVerification {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mv.AdditionalProperties == nil {
			mv.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mv.AdditionalProperties[key] = val
	}

	*v = Verification(mv)

	return nil
}

// MarshalJSON encodes JSON.
func (v Verification) MarshalJSON() ([]byte, error) {
	if len(v.AdditionalProperties) == 0 {
		return json.Marshal(marshalVerification(v))
	}

	return marshalUnion(marshalVerification(v), v.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover structure is generated from "#/definitions/state_payload->data->partner->verified_data->company->last_12_months_turnover".
type StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover struct {
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover

var knownKeysStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover = []string{
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items".
type StatePayloadDataPartnerVerifiedDataPeopleItems struct {
	Phones                 []StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems                 `json:"phones,omitempty"`
	// Format: uuid.
	// Required.
	UID                    string                                                                      `json:"uid"`
	Emails                 []StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems                 `json:"emails,omitempty"`
	IdentityDocumentChecks []StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems `json:"identity_document_checks,omitempty"`
	AdditionalProperties   map[string]interface{}                                                      `json:"-"`                                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItems StatePayloadDataPartnerVerifiedDataPeopleItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItems = []string{
	"phones",
	"uid",
	"emails",
	"identity_document_checks",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->phones->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems struct {
	UID                  string                 `json:"uid,omitempty"`          // Format: uuid.
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems = []string{
	"uid",
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->emails->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems struct {
	UID                  string                 `json:"uid,omitempty"`          // Format: uuid.
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems = []string{
	"uid",
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->identity_document_checks->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems struct {
	CheckID                string                                                                                        `json:"check_id,omitempty"`
	// Format: date-time.
	// Required.
	Datetime               *time.Time                                                                                    `json:"datetime"`
	ProviderName           string                                                                                        `json:"provider_name,omitempty"`
	Status                 StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus               `json:"status"`                             // Required.
	IdentityDocumentType   StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType `json:"identity_document_type,omitempty"`
	DocumentIssuingCountry string                                                                                        `json:"document_issuing_country,omitempty"` // Two digit ISO country code.
	FileLinks              []StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems     `json:"file_links,omitempty"`
	Comments               string                                                                                        `json:"comments,omitempty"`
	AdditionalProperties   map[string]interface{}                                                                        `json:"-"`                                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems = []string{
	"check_id",
	"datetime",
	"provider_name",
	"status",
	"identity_document_type",
	"document_issuing_country",
	"file_links",
	"comments",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->identity_document_checks->items->file_links->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems struct {
	FileType             StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType `json:"file_type"`          // Required.
	Name                 string                                                                                          `json:"name,omitempty"`
	Comments             string                                                                                          `json:"comments,omitempty"`
	// Format: uri.
	// Required.
	Link                 string                                                                                          `json:"link"`
	AdditionalProperties map[string]interface{}                                                                          `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems = []string{
	"file_type",
	"name",
	"comments",
	"link",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(s), s.AdditionalProperties)
}

// PostStateResponseValueCreated structure is generated from "PostState/response/ValueCreated".
type PostStateResponseValueCreated struct {
	Data                 *PostStateResponseValueCreatedData `json:"data,omitempty"` // Present only if the request went fine.
	AdditionalProperties map[string]interface{}             `json:"-"`              // All unmatched properties.
}

type marshalPostStateResponseValueCreated PostStateResponseValueCreated

var knownKeysPostStateResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostStateResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostStateResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostStateResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostStateResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostStateResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostStateResponseValueCreated(p))
	}

	return marshalUnion(marshalPostStateResponseValueCreated(p), p.AdditionalProperties)
}

// PostStateResponseValueCreatedData structure is generated from "PostState/response/ValueCreated->data".
//
// Present only if the request went fine.
type PostStateResponseValueCreatedData struct {
	// Format: uuid.
	// Required.
	StateKey             string                 `json:"state_key"`
	AdditionalProperties map[string]interface{} `json:"-"`         // All unmatched properties.
}

type marshalPostStateResponseValueCreatedData PostStateResponseValueCreatedData

var knownKeysPostStateResponseValueCreatedData = []string{
	"state_key",
}

// UnmarshalJSON decodes JSON.
func (p *PostStateResponseValueCreatedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostStateResponseValueCreatedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostStateResponseValueCreatedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostStateResponseValueCreatedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostStateResponseValueCreatedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostStateResponseValueCreatedData(p))
	}

	return marshalUnion(marshalPostStateResponseValueCreatedData(p), p.AdditionalProperties)
}

// GetChallengeResponseStateKeyPersonUIDResponseValueOK structure is generated from "GetChallengeResponseStateKeyPersonUID/response/ValueOK".
type GetChallengeResponseStateKeyPersonUIDResponseValueOK struct {
	// Quiz.
	// Required.
	Data                 Quiz                   `json:"data"`
	AdditionalProperties map[string]interface{} `json:"-"`    // All unmatched properties.
}

type marshalGetChallengeResponseStateKeyPersonUIDResponseValueOK GetChallengeResponseStateKeyPersonUIDResponseValueOK

var knownKeysGetChallengeResponseStateKeyPersonUIDResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetChallengeResponseStateKeyPersonUIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetChallengeResponseStateKeyPersonUIDResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetChallengeResponseStateKeyPersonUIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetChallengeResponseStateKeyPersonUIDResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetChallengeResponseStateKeyPersonUIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetChallengeResponseStateKeyPersonUIDResponseValueOK(g))
	}

	return marshalUnion(marshalGetChallengeResponseStateKeyPersonUIDResponseValueOK(g), g.AdditionalProperties)
}

// Quiz structure is generated from "#/definitions/quiz".
//
// quiz.
type Quiz struct {
	ChallengeID          string                    `json:"challenge_id,omitempty"`
	CurrentStage         int64                     `json:"current_stage,omitempty"`
	QuestionGroups       []QuizQuestionGroupsItems `json:"question_groups,omitempty"`
	Status               QuizStatus                `json:"status"`                    // Required.
	AdditionalProperties map[string]interface{}    `json:"-"`                         // All unmatched properties.
}

type marshalQuiz Quiz

var knownKeysQuiz = []string{
	"challenge_id",
	"current_stage",
	"question_groups",
	"status",
}

// UnmarshalJSON decodes JSON.
func (q *Quiz) UnmarshalJSON(data []byte) error {
	var err error

	mq := marshalQuiz(*q)

	err = json.Unmarshal(data, &mq)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysQuiz {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mq.AdditionalProperties == nil {
			mq.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mq.AdditionalProperties[key] = val
	}

	*q = Quiz(mq)

	return nil
}

// MarshalJSON encodes JSON.
func (q Quiz) MarshalJSON() ([]byte, error) {
	if len(q.AdditionalProperties) == 0 {
		return json.Marshal(marshalQuiz(q))
	}

	return marshalUnion(marshalQuiz(q), q.AdditionalProperties)
}

// QuizQuestionGroupsItems structure is generated from "#/definitions/quiz->question_groups->items".
type QuizQuestionGroupsItems struct {
	GroupHeader          string                                  `json:"group_header,omitempty"`
	Questions            []QuizQuestionGroupsItemsQuestionsItems `json:"questions"`              // Required.
	AdditionalProperties map[string]interface{}                  `json:"-"`                      // All unmatched properties.
}

type marshalQuizQuestionGroupsItems QuizQuestionGroupsItems

var knownKeysQuizQuestionGroupsItems = []string{
	"group_header",
	"questions",
}

// UnmarshalJSON decodes JSON.
func (q *QuizQuestionGroupsItems) UnmarshalJSON(data []byte) error {
	var err error

	mq := marshalQuizQuestionGroupsItems(*q)

	err = json.Unmarshal(data, &mq)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysQuizQuestionGroupsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mq.AdditionalProperties == nil {
			mq.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mq.AdditionalProperties[key] = val
	}

	*q = QuizQuestionGroupsItems(mq)

	return nil
}

// MarshalJSON encodes JSON.
func (q QuizQuestionGroupsItems) MarshalJSON() ([]byte, error) {
	if len(q.AdditionalProperties) == 0 {
		return json.Marshal(marshalQuizQuestionGroupsItems(q))
	}

	return marshalUnion(marshalQuizQuestionGroupsItems(q), q.AdditionalProperties)
}

// QuizQuestionGroupsItemsQuestionsItems structure is generated from "#/definitions/quiz->question_groups->items->questions->items".
type QuizQuestionGroupsItemsQuestionsItems struct {
	Question             string                                              `json:"question"`    // Required.
	QuestionID           int64                                               `json:"question_id"` // Required.
	Answers              []QuizQuestionGroupsItemsQuestionsItemsAnswersItems `json:"answers"`     // Required.
	AdditionalProperties map[string]interface{}                              `json:"-"`           // All unmatched properties.
}

type marshalQuizQuestionGroupsItemsQuestionsItems QuizQuestionGroupsItemsQuestionsItems

var knownKeysQuizQuestionGroupsItemsQuestionsItems = []string{
	"question",
	"question_id",
	"answers",
}

// UnmarshalJSON decodes JSON.
func (q *QuizQuestionGroupsItemsQuestionsItems) UnmarshalJSON(data []byte) error {
	var err error

	mq := marshalQuizQuestionGroupsItemsQuestionsItems(*q)

	err = json.Unmarshal(data, &mq)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysQuizQuestionGroupsItemsQuestionsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mq.AdditionalProperties == nil {
			mq.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mq.AdditionalProperties[key] = val
	}

	*q = QuizQuestionGroupsItemsQuestionsItems(mq)

	return nil
}

// MarshalJSON encodes JSON.
func (q QuizQuestionGroupsItemsQuestionsItems) MarshalJSON() ([]byte, error) {
	if len(q.AdditionalProperties) == 0 {
		return json.Marshal(marshalQuizQuestionGroupsItemsQuestionsItems(q))
	}

	return marshalUnion(marshalQuizQuestionGroupsItemsQuestionsItems(q), q.AdditionalProperties)
}

// QuizQuestionGroupsItemsQuestionsItemsAnswersItems structure is generated from "#/definitions/quiz->question_groups->items->questions->items->answers->items".
type QuizQuestionGroupsItemsQuestionsItemsAnswersItems struct {
	Answer               string                 `json:"answer"`    // Required.
	AnswerID             int64                  `json:"answer_id"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`         // All unmatched properties.
}

type marshalQuizQuestionGroupsItemsQuestionsItemsAnswersItems QuizQuestionGroupsItemsQuestionsItemsAnswersItems

var knownKeysQuizQuestionGroupsItemsQuestionsItemsAnswersItems = []string{
	"answer",
	"answer_id",
}

// UnmarshalJSON decodes JSON.
func (q *QuizQuestionGroupsItemsQuestionsItemsAnswersItems) UnmarshalJSON(data []byte) error {
	var err error

	mq := marshalQuizQuestionGroupsItemsQuestionsItemsAnswersItems(*q)

	err = json.Unmarshal(data, &mq)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysQuizQuestionGroupsItemsQuestionsItemsAnswersItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mq.AdditionalProperties == nil {
			mq.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mq.AdditionalProperties[key] = val
	}

	*q = QuizQuestionGroupsItemsQuestionsItemsAnswersItems(mq)

	return nil
}

// MarshalJSON encodes JSON.
func (q QuizQuestionGroupsItemsQuestionsItemsAnswersItems) MarshalJSON() ([]byte, error) {
	if len(q.AdditionalProperties) == 0 {
		return json.Marshal(marshalQuizQuestionGroupsItemsQuestionsItemsAnswersItems(q))
	}

	return marshalUnion(marshalQuizQuestionGroupsItemsQuestionsItemsAnswersItems(q), q.AdditionalProperties)
}

// APIErrors structure is generated from "#/definitions/api_errors".
//
// api_errors.
//
// Present only if there was any issue during the request processing.
type APIErrors struct {
	Errors               []APIErrorsErrorsItems `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalAPIErrors APIErrors

var knownKeysAPIErrors = []string{
	"errors",
}

// UnmarshalJSON decodes JSON.
func (a *APIErrors) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAPIErrors(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAPIErrors {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = APIErrors(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a APIErrors) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAPIErrors(a))
	}

	return marshalUnion(marshalAPIErrors(a), a.AdditionalProperties)
}

// APIErrorsErrorsItems structure is generated from "#/definitions/api_errors->errors->items".
//
// Partial representation of an error as described in http://jsonapi.org/format/#errors.
type APIErrorsErrorsItems struct {
	Code                 string                      `json:"code"`             // Required.
	Detail               string                      `json:"detail"`           // Required.
	Source               *APIErrorsErrorsItemsSource `json:"source,omitempty"`
	Meta                 map[string]interface{}      `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`                // All unmatched properties.
}

type marshalAPIErrorsErrorsItems APIErrorsErrorsItems

var knownKeysAPIErrorsErrorsItems = []string{
	"code",
	"detail",
	"source",
	"meta",
}

// UnmarshalJSON decodes JSON.
func (a *APIErrorsErrorsItems) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAPIErrorsErrorsItems(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAPIErrorsErrorsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = APIErrorsErrorsItems(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a APIErrorsErrorsItems) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAPIErrorsErrorsItems(a))
	}

	return marshalUnion(marshalAPIErrorsErrorsItems(a), a.AdditionalProperties)
}

// APIErrorsErrorsItemsSource structure is generated from "#/definitions/api_errors->errors->items->source".
type APIErrorsErrorsItemsSource struct {
	Pointer              string                 `json:"pointer,omitempty"`
	Parameter            string                 `json:"parameter,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                   // All unmatched properties.
}

type marshalAPIErrorsErrorsItemsSource APIErrorsErrorsItemsSource

var knownKeysAPIErrorsErrorsItemsSource = []string{
	"pointer",
	"parameter",
}

// UnmarshalJSON decodes JSON.
func (a *APIErrorsErrorsItemsSource) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAPIErrorsErrorsItemsSource(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAPIErrorsErrorsItemsSource {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = APIErrorsErrorsItemsSource(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a APIErrorsErrorsItemsSource) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAPIErrorsErrorsItemsSource(a))
	}

	return marshalUnion(marshalAPIErrorsErrorsItemsSource(a), a.AdditionalProperties)
}

// PostChallengeResponseStateKeyPersonUIDRequestBody structure is generated from "PostChallengeResponseStateKeyPersonUID/request/body".
type PostChallengeResponseStateKeyPersonUIDRequestBody struct {
	Data                 PostChallengeResponseStateKeyPersonUIDRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                `json:"-"`    // All unmatched properties.
}

type marshalPostChallengeResponseStateKeyPersonUIDRequestBody PostChallengeResponseStateKeyPersonUIDRequestBody

var knownKeysPostChallengeResponseStateKeyPersonUIDRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostChallengeResponseStateKeyPersonUIDRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostChallengeResponseStateKeyPersonUIDRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostChallengeResponseStateKeyPersonUIDRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostChallengeResponseStateKeyPersonUIDRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostChallengeResponseStateKeyPersonUIDRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostChallengeResponseStateKeyPersonUIDRequestBody(p))
	}

	return marshalUnion(marshalPostChallengeResponseStateKeyPersonUIDRequestBody(p), p.AdditionalProperties)
}

// PostChallengeResponseStateKeyPersonUIDRequestBodyData structure is generated from "PostChallengeResponseStateKeyPersonUID/request/body->data".
type PostChallengeResponseStateKeyPersonUIDRequestBodyData struct {
	ChallengeID          string                                                                `json:"challenge_id"`  // Required.
	CurrentStage         int64                                                                 `json:"current_stage"` // Required.
	Responses            []PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems `json:"responses"`     // Required.
	AdditionalProperties map[string]interface{}                                                `json:"-"`             // All unmatched properties.
}

type marshalPostChallengeResponseStateKeyPersonUIDRequestBodyData PostChallengeResponseStateKeyPersonUIDRequestBodyData

var knownKeysPostChallengeResponseStateKeyPersonUIDRequestBodyData = []string{
	"challenge_id",
	"current_stage",
	"responses",
}

// UnmarshalJSON decodes JSON.
func (p *PostChallengeResponseStateKeyPersonUIDRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostChallengeResponseStateKeyPersonUIDRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostChallengeResponseStateKeyPersonUIDRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostChallengeResponseStateKeyPersonUIDRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostChallengeResponseStateKeyPersonUIDRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostChallengeResponseStateKeyPersonUIDRequestBodyData(p))
	}

	return marshalUnion(marshalPostChallengeResponseStateKeyPersonUIDRequestBodyData(p), p.AdditionalProperties)
}

// PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems structure is generated from "PostChallengeResponseStateKeyPersonUID/request/body->data->responses->items".
type PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems struct {
	QuestionID           int64                  `json:"question_id"` // Required.
	AnswerID             int64                  `json:"answer_id"`   // Required.
	AdditionalProperties map[string]interface{} `json:"-"`           // All unmatched properties.
}

type marshalPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems

var knownKeysPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems = []string{
	"question_id",
	"answer_id",
}

// UnmarshalJSON decodes JSON.
func (p *PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems(p))
	}

	return marshalUnion(marshalPostChallengeResponseStateKeyPersonUIDRequestBodyDataResponsesItems(p), p.AdditionalProperties)
}

// PostChallengeResponseStateKeyPersonUIDResponseValueOK structure is generated from "PostChallengeResponseStateKeyPersonUID/response/ValueOK".
type PostChallengeResponseStateKeyPersonUIDResponseValueOK struct {
	Data                 *Quiz                  `json:"data,omitempty"` // Quiz.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPostChallengeResponseStateKeyPersonUIDResponseValueOK PostChallengeResponseStateKeyPersonUIDResponseValueOK

var knownKeysPostChallengeResponseStateKeyPersonUIDResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostChallengeResponseStateKeyPersonUIDResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostChallengeResponseStateKeyPersonUIDResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostChallengeResponseStateKeyPersonUIDResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostChallengeResponseStateKeyPersonUIDResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostChallengeResponseStateKeyPersonUIDResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostChallengeResponseStateKeyPersonUIDResponseValueOK(p))
	}

	return marshalUnion(marshalPostChallengeResponseStateKeyPersonUIDResponseValueOK(p), p.AdditionalProperties)
}

// PutDocumentUploadStateKeyDocumentIDRequestBody structure is generated from "PutDocumentUploadStateKeyDocumentID/request/body".
type PutDocumentUploadStateKeyDocumentIDRequestBody struct {
	Data                 PutDocumentUploadStateKeyDocumentIDRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                             `json:"-"`    // All unmatched properties.
}

type marshalPutDocumentUploadStateKeyDocumentIDRequestBody PutDocumentUploadStateKeyDocumentIDRequestBody

var knownKeysPutDocumentUploadStateKeyDocumentIDRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PutDocumentUploadStateKeyDocumentIDRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutDocumentUploadStateKeyDocumentIDRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutDocumentUploadStateKeyDocumentIDRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutDocumentUploadStateKeyDocumentIDRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutDocumentUploadStateKeyDocumentIDRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutDocumentUploadStateKeyDocumentIDRequestBody(p))
	}

	return marshalUnion(marshalPutDocumentUploadStateKeyDocumentIDRequestBody(p), p.AdditionalProperties)
}

// PutDocumentUploadStateKeyDocumentIDRequestBodyData structure is generated from "PutDocumentUploadStateKeyDocumentID/request/body->data".
type PutDocumentUploadStateKeyDocumentIDRequestBodyData struct {
	DocumentType         PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType `json:"document_type"` // Required.
	AdditionalProperties map[string]interface{}                                         `json:"-"`             // All unmatched properties.
}

type marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData PutDocumentUploadStateKeyDocumentIDRequestBodyData

var knownKeysPutDocumentUploadStateKeyDocumentIDRequestBodyData = []string{
	"document_type",
}

// UnmarshalJSON decodes JSON.
func (p *PutDocumentUploadStateKeyDocumentIDRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutDocumentUploadStateKeyDocumentIDRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutDocumentUploadStateKeyDocumentIDRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutDocumentUploadStateKeyDocumentIDRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(p))
	}

	return marshalUnion(marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(p), p.AdditionalProperties)
}

// GetDocumentUploadStateKeyResponseValueOK structure is generated from "GetDocumentUploadStateKey/response/ValueOK".
type GetDocumentUploadStateKeyResponseValueOK struct {
	Data                 []CustomerUploadedDocument `json:"data"` // Required.
	AdditionalProperties map[string]interface{}     `json:"-"`    // All unmatched properties.
}

type marshalGetDocumentUploadStateKeyResponseValueOK GetDocumentUploadStateKeyResponseValueOK

var knownKeysGetDocumentUploadStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetDocumentUploadStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetDocumentUploadStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetDocumentUploadStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetDocumentUploadStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetDocumentUploadStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetDocumentUploadStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetDocumentUploadStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// CustomerUploadedDocument structure is generated from "#/definitions/uploaded_document".
//
// customer_uploaded_document.
type CustomerUploadedDocument struct {
	// Unique identifier for an uploaded document.
	// Format: hash.
	DocumentID           string                               `json:"document_id,omitempty"`
	DocumentName         string                               `json:"document_name,omitempty"`
	DocumentType         CustomerUploadedDocumentDocumentType `json:"document_type,omitempty"`
	// Datetime that the document was uploaded.
	// Format: date-time.
	UploadDate           *time.Time                           `json:"upload_date,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`                       // All unmatched properties.
}

type marshalCustomerUploadedDocument CustomerUploadedDocument

var knownKeysCustomerUploadedDocument = []string{
	"document_id",
	"document_name",
	"document_type",
	"upload_date",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerUploadedDocument) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerUploadedDocument(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerUploadedDocument {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerUploadedDocument(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerUploadedDocument) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerUploadedDocument(c))
	}

	return marshalUnion(marshalCustomerUploadedDocument(c), c.AdditionalProperties)
}

// PostDocumentUploadStateKeyResponseValueCreated structure is generated from "PostDocumentUploadStateKey/response/ValueCreated".
type PostDocumentUploadStateKeyResponseValueCreated struct {
	// Customer_uploaded_document.
	// Required.
	Data                 CustomerUploadedDocument `json:"data"`
	AdditionalProperties map[string]interface{}   `json:"-"`    // All unmatched properties.
}

type marshalPostDocumentUploadStateKeyResponseValueCreated PostDocumentUploadStateKeyResponseValueCreated

var knownKeysPostDocumentUploadStateKeyResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostDocumentUploadStateKeyResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostDocumentUploadStateKeyResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostDocumentUploadStateKeyResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostDocumentUploadStateKeyResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostDocumentUploadStateKeyResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostDocumentUploadStateKeyResponseValueCreated(p))
	}

	return marshalUnion(marshalPostDocumentUploadStateKeyResponseValueCreated(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyRequestBody structure is generated from "PostCreditFacilityPaymentRequestStateKey/request/body".
type PostCreditFacilityPaymentRequestStateKeyRequestBody struct {
	Data                 PostCreditFacilityPaymentRequestStateKeyRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                  `json:"-"`    // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyRequestBody PostCreditFacilityPaymentRequestStateKeyRequestBody

var knownKeysPostCreditFacilityPaymentRequestStateKeyRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyRequestBody(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyRequestBody(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyRequestBodyData structure is generated from "PostCreditFacilityPaymentRequestStateKey/request/body->data".
type PostCreditFacilityPaymentRequestStateKeyRequestBodyData struct {
	Amount               float64                `json:"amount"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyRequestBodyData PostCreditFacilityPaymentRequestStateKeyRequestBodyData

var knownKeysPostCreditFacilityPaymentRequestStateKeyRequestBodyData = []string{
	"amount",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyRequestBodyData(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyRequestBodyData(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyResponseValueCreated structure is generated from "PostCreditFacilityPaymentRequestStateKey/response/ValueCreated".
type PostCreditFacilityPaymentRequestStateKeyResponseValueCreated struct {
	Data                 PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                           `json:"-"`    // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreated PostCreditFacilityPaymentRequestStateKeyResponseValueCreated

var knownKeysPostCreditFacilityPaymentRequestStateKeyResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreated(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreated(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData structure is generated from "PostCreditFacilityPaymentRequestStateKey/response/ValueCreated->data".
type PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData struct {
	Status               PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus `json:"status"` // Required.
	AdditionalProperties map[string]interface{}                                                 `json:"-"`      // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData

var knownKeysPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData = []string{
	"status",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyResponseValueCreatedData(p), p.AdditionalProperties)
}

// WebhookPayload structure is generated from "#/definitions/webhook_payload".
//
// webhook_payload.
type WebhookPayload struct {
	Data                 *WebhookPayloadData    `json:"data,omitempty"` // Sent with approval_status_changed event: latest_approval_request / approval_status / approval_requirements.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalWebhookPayload WebhookPayload

var knownKeysWebhookPayload = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPayload) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPayload(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPayload {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPayload(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPayload) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPayload(w))
	}

	return marshalUnion(marshalWebhookPayload(w), w.AdditionalProperties)
}

// WebhookPayloadData structure is generated from "#/definitions/webhook_payload->data".
//
// Sent with approval_status_changed event: latest_approval_request / approval_status / approval_requirements.
type WebhookPayloadData struct {
	StateKey              string                      `json:"state_key,omitempty"`               // Format: uuid.
	// Approval_request.
	// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
	LatestApprovalRequest *ApprovalRequest            `json:"latest_approval_request,omitempty"`
	// Approval_status.
	// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
	ApprovalStatus        *ApprovalStatus             `json:"approval_status,omitempty"`
	ApprovalRequirements  []DataRequirement           `json:"approval_requirements,omitempty"`
	PaymentInstructions   []WebhookPaymentInstruction `json:"payment_instructions,omitempty"`
	CustomerFunded        *CustomerFunded             `json:"customer_funded,omitempty"`         // Customer_funded.
	AdditionalProperties  map[string]interface{}      `json:"-"`                                 // All unmatched properties.
}

type marshalWebhookPayloadData WebhookPayloadData

var knownKeysWebhookPayloadData = []string{
	"state_key",
	"latest_approval_request",
	"approval_status",
	"approval_requirements",
	"payment_instructions",
	"customer_funded",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPayloadData) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPayloadData(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPayloadData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPayloadData(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPayloadData) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPayloadData(w))
	}

	return marshalUnion(marshalWebhookPayloadData(w), w.AdditionalProperties)
}

// ApprovalRequest structure is generated from "#/definitions/approval_request".
//
// approval_request.
//
// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
type ApprovalRequest struct {
	Status               ApprovalRequestStatus  `json:"status,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalApprovalRequest ApprovalRequest

var knownKeysApprovalRequest = []string{
	"status",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRequest) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRequest(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRequest {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRequest(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRequest) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRequest(a))
	}

	return marshalUnion(marshalApprovalRequest(a), a.AdditionalProperties)
}

// ApprovalStatus structure is generated from "#/definitions/approval_status".
//
// approval_status.
//
// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
type ApprovalStatus struct {
	Status               ApprovalStatusStatus   `json:"status,omitempty"`   // Note: "deferred" is a new enum option as of January 2020.
	// Approval.
	// Information about the customer approval.
	Approved             *Approval              `json:"approved,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalApprovalStatus ApprovalStatus

var knownKeysApprovalStatus = []string{
	"status",
	"approved",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalStatus) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalStatus(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalStatus(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalStatus) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalStatus(a))
	}

	return marshalUnion(marshalApprovalStatus(a), a.AdditionalProperties)
}

// Approval structure is generated from "#/definitions/approval".
//
// approval.
//
// Information about the customer approval.
type Approval struct {
	Promotions           []ApprovalPromotionsItems     `json:"promotions,omitempty"`
	MaxCredit            float64                       `json:"max_credit,omitempty"`      // Maximum credit being approved for.
	Interval             string                        `json:"interval,omitempty"`        // Interval between repayments, examples: 7d / 1m. Customers are put on a one month schedule by default and this would not typically be asked during the application journey.
	RateStructures       []ApprovalRateStructuresItems `json:"rate_structures,omitempty"` // Different applicable rates for this specific approval.
	Duration             int64                         `json:"duration,omitempty"`        // Requested loan duration in months. For instance, an interval of 1m and a duration of 12 would correspond to a one year loan paid back in monthly instalments. In cases where the interval is not specified as a number of months, the actual duration will be rounded up to be a whole number of intervals (taking a month as 30 days).
	MinCredit            float64                       `json:"min_credit,omitempty"`      // Minimum credit allowed to be taken.
	TopUpAllowed         bool                          `json:"top_up_allowed,omitempty"`
	// Approval valid until this date.
	// Format: date-time.
	TimeOut              *time.Time                    `json:"time_out,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`                         // All unmatched properties.
}

type marshalApproval Approval

var knownKeysApproval = []string{
	"promotions",
	"max_credit",
	"interval",
	"rate_structures",
	"duration",
	"min_credit",
	"top_up_allowed",
	"time_out",
}

// UnmarshalJSON decodes JSON.
func (a *Approval) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApproval(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = Approval(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a Approval) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApproval(a))
	}

	return marshalUnion(marshalApproval(a), a.AdditionalProperties)
}

// ApprovalRateStructuresItems structure is generated from "#/definitions/approval->rate_structures->items".
type ApprovalRateStructuresItems struct {
	Rates                []ApprovalRateStructuresItemsRatesItems `json:"rates,omitempty"`            // List of rates. Several rates can be applied to different principal amounts.
	EffectiveOnDay       int64                                   `json:"effective_on_day,omitempty"` // When this rate is effective. 0 means the first day of the loan.
	AdditionalProperties map[string]interface{}                  `json:"-"`                          // All unmatched properties.
}

type marshalApprovalRateStructuresItems ApprovalRateStructuresItems

var knownKeysApprovalRateStructuresItems = []string{
	"rates",
	"effective_on_day",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRateStructuresItems) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRateStructuresItems(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRateStructuresItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRateStructuresItems(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRateStructuresItems) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRateStructuresItems(a))
	}

	return marshalUnion(marshalApprovalRateStructuresItems(a), a.AdditionalProperties)
}

// ApprovalRateStructuresItemsRatesItems structure is generated from "#/definitions/approval->rate_structures->items->rates->items".
type ApprovalRateStructuresItemsRatesItems struct {
	MaxPrincipal         float64                `json:"max_principal,omitempty"` // Rate applied up to this max_principal amount.
	Rate                 float64                `json:"rate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                       // All unmatched properties.
}

type marshalApprovalRateStructuresItemsRatesItems ApprovalRateStructuresItemsRatesItems

var knownKeysApprovalRateStructuresItemsRatesItems = []string{
	"max_principal",
	"rate",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRateStructuresItemsRatesItems) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRateStructuresItemsRatesItems(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRateStructuresItemsRatesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRateStructuresItemsRatesItems(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRateStructuresItemsRatesItems) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRateStructuresItemsRatesItems(a))
	}

	return marshalUnion(marshalApprovalRateStructuresItemsRatesItems(a), a.AdditionalProperties)
}

// DataRequirement structure is generated from "#/definitions/data_requirement".
//
// data_requirement.
type DataRequirement struct {
	Status                       DataRequirementStatus                   `json:"status"`                                   // Required.
	Type                         DataRequirementType                     `json:"type"`                                     // Required.
	ResolutionMethods            []DataRequirementResolutionMethodsItems `json:"resolution_methods,omitempty"`
	RecommendedResolutionMethods []string                                `json:"recommended_resolution_methods,omitempty"`
	Comments                     []string                                `json:"comments,omitempty"`
	AdditionalProperties         map[string]interface{}                  `json:"-"`                                        // All unmatched properties.
}

type marshalDataRequirement DataRequirement

var knownKeysDataRequirement = []string{
	"status",
	"type",
	"resolution_methods",
	"recommended_resolution_methods",
	"comments",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirement) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirement(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirement {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirement(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirement) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirement(d))
	}

	return marshalUnion(marshalDataRequirement(d), d.AdditionalProperties)
}

// DataRequirementResolutionMethodsItems structure is generated from "#/definitions/data_requirement->resolution_methods->items".
type DataRequirementResolutionMethodsItems struct {
	Type                 DataRequirementResolutionMethodsItemsType         `json:"type"`                  // Required.
	Status               *DataRequirementResolutionMethodsItemsStatus      `json:"status,omitempty"`
	Items                []DataRequirementResolutionMethodsItemsItemsItems `json:"items,omitempty"`
	Name                 string                                            `json:"name"`                  // Required.
	Description          string                                            `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                            `json:"-"`                     // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItems DataRequirementResolutionMethodsItems

var knownKeysDataRequirementResolutionMethodsItems = []string{
	"type",
	"status",
	"items",
	"name",
	"description",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItems) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItems(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItems(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItems) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItems(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItems(d), d.AdditionalProperties)
}

// DataRequirementResolutionMethodsItemsStatus structure is generated from "#/definitions/data_requirement->resolution_methods->items->status".
type DataRequirementResolutionMethodsItemsStatus struct {
	Type                 DataRequirementResolutionMethodsItemsStatusType `json:"type"`             // Required.
	Detail               string                                          `json:"detail,omitempty"`
	AdditionalProperties map[string]interface{}                          `json:"-"`                // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItemsStatus DataRequirementResolutionMethodsItemsStatus

var knownKeysDataRequirementResolutionMethodsItemsStatus = []string{
	"type",
	"detail",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItemsStatus) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItemsStatus(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItemsStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItemsStatus(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItemsStatus) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItemsStatus(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItemsStatus(d), d.AdditionalProperties)
}

// DataRequirementResolutionMethodsItemsItemsItems structure is generated from "#/definitions/data_requirement->resolution_methods->items->items->items".
type DataRequirementResolutionMethodsItemsItemsItems struct {
	Status               DataRequirementResolutionMethodsItemsItemsItemsStatus `json:"status"`                     // Required.
	Name                 string                                                `json:"name,omitempty"`
	CreatedDatetime      *time.Time                                            `json:"created_datetime,omitempty"` // Format: date-time.
	Errors               []ErrorsItems                                         `json:"errors,omitempty"`           // Errors.
	AdditionalProperties map[string]interface{}                                `json:"-"`                          // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItemsItemsItems DataRequirementResolutionMethodsItemsItemsItems

var knownKeysDataRequirementResolutionMethodsItemsItemsItems = []string{
	"status",
	"name",
	"created_datetime",
	"errors",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItemsItemsItems) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItemsItemsItems(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItemsItemsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItemsItemsItems(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItemsItemsItems) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItemsItemsItems(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItemsItemsItems(d), d.AdditionalProperties)
}

// ErrorsItems structure is generated from "#/definitions/errors->items".
type ErrorsItems struct {
	Code                 string                 `json:"code"`   // Required.
	Detail               string                 `json:"detail"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalErrorsItems ErrorsItems

var knownKeysErrorsItems = []string{
	"code",
	"detail",
}

// UnmarshalJSON decodes JSON.
func (e *ErrorsItems) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErrorsItems(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErrorsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErrorsItems(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErrorsItems) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErrorsItems(e))
	}

	return marshalUnion(marshalErrorsItems(e), e.AdditionalProperties)
}

// WebhookPaymentInstruction structure is generated from "#/definitions/webhook_payment_instruction".
//
// webhook_payment_instruction.
type WebhookPaymentInstruction struct {
	// Format: uuid.
	// Required.
	StateKey             string                                `json:"state_key"`
	// Format: uuid.
	// Required.
	PaymentInstructionID string                                `json:"payment_instruction_id"`
	Amount               float64                               `json:"amount"`                 // Required.
	Direction            WebhookPaymentInstructionDirection    `json:"direction"`              // Required.
	BankDetails          *WebhookPaymentInstructionBankDetails `json:"bank_details,omitempty"`
	AdditionalProperties map[string]interface{}                `json:"-"`                      // All unmatched properties.
}

type marshalWebhookPaymentInstruction WebhookPaymentInstruction

var knownKeysWebhookPaymentInstruction = []string{
	"state_key",
	"payment_instruction_id",
	"amount",
	"direction",
	"bank_details",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPaymentInstruction) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPaymentInstruction(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPaymentInstruction {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPaymentInstruction(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPaymentInstruction) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPaymentInstruction(w))
	}

	return marshalUnion(marshalWebhookPaymentInstruction(w), w.AdditionalProperties)
}

// WebhookPaymentInstructionBankDetails structure is generated from "#/definitions/webhook_payment_instruction->bank_details".
type WebhookPaymentInstructionBankDetails struct {
	AccountNumber        string                 `json:"account_number"` // Required.
	SortCode             string                 `json:"sort_code"`      // Required.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalWebhookPaymentInstructionBankDetails WebhookPaymentInstructionBankDetails

var knownKeysWebhookPaymentInstructionBankDetails = []string{
	"account_number",
	"sort_code",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPaymentInstructionBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPaymentInstructionBankDetails(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPaymentInstructionBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPaymentInstructionBankDetails(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPaymentInstructionBankDetails) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPaymentInstructionBankDetails(w))
	}

	return marshalUnion(marshalWebhookPaymentInstructionBankDetails(w), w.AdditionalProperties)
}

// CustomerFunded structure is generated from "#/definitions/customer_funded".
//
// customer_funded.
type CustomerFunded struct {
	AmountFunded         float64                `json:"amount_funded"`   // Required.
	LoanID               string                 `json:"loan_id"`         // Required.
	// Format: date-time.
	// Required.
	FundedDatetime       *time.Time             `json:"funded_datetime"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalCustomerFunded CustomerFunded

var knownKeysCustomerFunded = []string{
	"amount_funded",
	"loan_id",
	"funded_datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerFunded) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerFunded(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerFunded {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerFunded(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerFunded) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerFunded(c))
	}

	return marshalUnion(marshalCustomerFunded(c), c.AdditionalProperties)
}

// GetLoginLinkStateKeyResponseValueOK structure is generated from "GetLoginLinkStateKey/response/ValueOK".
type GetLoginLinkStateKeyResponseValueOK struct {
	Data                 GetLoginLinkStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                  `json:"-"`    // All unmatched properties.
}

type marshalGetLoginLinkStateKeyResponseValueOK GetLoginLinkStateKeyResponseValueOK

var knownKeysGetLoginLinkStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetLoginLinkStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetLoginLinkStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetLoginLinkStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetLoginLinkStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetLoginLinkStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetLoginLinkStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetLoginLinkStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetLoginLinkStateKeyResponseValueOKData structure is generated from "GetLoginLinkStateKey/response/ValueOK->data".
type GetLoginLinkStateKeyResponseValueOKData struct {
	// Format: uri.
	// Required.
	LoginLink            string                 `json:"login_link"`
	AdditionalProperties map[string]interface{} `json:"-"`          // All unmatched properties.
}

type marshalGetLoginLinkStateKeyResponseValueOKData GetLoginLinkStateKeyResponseValueOKData

var knownKeysGetLoginLinkStateKeyResponseValueOKData = []string{
	"login_link",
}

// UnmarshalJSON decodes JSON.
func (g *GetLoginLinkStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetLoginLinkStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetLoginLinkStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetLoginLinkStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetLoginLinkStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetLoginLinkStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetLoginLinkStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK structure is generated from "GetCreditFacilityRepaymentScheduleStateKey/response/ValueOK".
type GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK struct {
	Data                 GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                        `json:"-"`    // All unmatched properties.
}

type marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK

var knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData structure is generated from "GetCreditFacilityRepaymentScheduleStateKey/response/ValueOK->data".
type GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData struct {
	// Repayment_schedule_summary.
	// Required.
	Summary              RepaymentScheduleSummary `json:"summary"`
	// Repayment_schedule.
	// Payments schedule to repay the current loan.
	// Required.
	Schedule             []RepaymentScheduleItems `json:"schedule"`
	AdditionalProperties map[string]interface{}   `json:"-"`        // All unmatched properties.
}

type marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData

var knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData = []string{
	"summary",
	"schedule",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// RepaymentScheduleSummary structure is generated from "#/definitions/repayment_schedule_summary".
//
// repayment_schedule_summary.
type RepaymentScheduleSummary struct {
	TotalCreditAmount       float64                                     `json:"total_credit_amount,omitempty"`
	TotalPayable            float64                                     `json:"total_payable,omitempty"`
	Apr                     float64                                     `json:"apr,omitempty"`
	AnnualInterestRate      *RepaymentScheduleSummaryAnnualInterestRate `json:"annual_interest_rate,omitempty"`
	OriginationFee          float64                                     `json:"origination_fee,omitempty"`
	SimplifiedSchedule      *RepaymentScheduleSummarySimplifiedSchedule `json:"simplified_schedule,omitempty"`
	BusinessDaysOnly        bool                                        `json:"business_days_only,omitempty"`
	TotalNumberOfRepayments int64                                       `json:"total_number_of_repayments,omitempty"`
	AdditionalProperties    map[string]interface{}                      `json:"-"`                                    // All unmatched properties.
}

type marshalRepaymentScheduleSummary RepaymentScheduleSummary

var knownKeysRepaymentScheduleSummary = []string{
	"total_credit_amount",
	"total_payable",
	"apr",
	"annual_interest_rate",
	"origination_fee",
	"simplified_schedule",
	"business_days_only",
	"total_number_of_repayments",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummary) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummary(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummary {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummary(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummary) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummary(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummary(r), r.AdditionalProperties)
}

// RepaymentScheduleSummaryAnnualInterestRate structure is generated from "#/definitions/repayment_schedule_summary->annual_interest_rate".
type RepaymentScheduleSummaryAnnualInterestRate struct {
	Rate                 float64                                            `json:"rate,omitempty"`
	RateType             RepaymentScheduleSummaryAnnualInterestRateRateType `json:"rate_type,omitempty"`
	AdditionalProperties map[string]interface{}                             `json:"-"`                   // All unmatched properties.
}

type marshalRepaymentScheduleSummaryAnnualInterestRate RepaymentScheduleSummaryAnnualInterestRate

var knownKeysRepaymentScheduleSummaryAnnualInterestRate = []string{
	"rate",
	"rate_type",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummaryAnnualInterestRate) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummaryAnnualInterestRate(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummaryAnnualInterestRate {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummaryAnnualInterestRate(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummaryAnnualInterestRate) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummaryAnnualInterestRate(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummaryAnnualInterestRate(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedSchedule structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule".
type RepaymentScheduleSummarySimplifiedSchedule struct {
	NextRepayment        *RepaymentScheduleSummarySimplifiedScheduleNextRepayment   `json:"next_repayment,omitempty"`
	EqualRepayments      *RepaymentScheduleSummarySimplifiedScheduleEqualRepayments `json:"equal_repayments,omitempty"`
	AdditionalProperties map[string]interface{}                                     `json:"-"`                          // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedSchedule RepaymentScheduleSummarySimplifiedSchedule

var knownKeysRepaymentScheduleSummarySimplifiedSchedule = []string{
	"next_repayment",
	"equal_repayments",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedSchedule) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedSchedule(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedSchedule {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedSchedule(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedSchedule) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedSchedule(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedSchedule(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedScheduleNextRepayment structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule->next_repayment".
type RepaymentScheduleSummarySimplifiedScheduleNextRepayment struct {
	Amount               float64                `json:"amount"` // Required.
	// Format: date.
	// Required.
	Date                 string                 `json:"date"`
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment RepaymentScheduleSummarySimplifiedScheduleNextRepayment

var knownKeysRepaymentScheduleSummarySimplifiedScheduleNextRepayment = []string{
	"amount",
	"date",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedScheduleNextRepayment) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedScheduleNextRepayment {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedScheduleNextRepayment(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedScheduleNextRepayment) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedScheduleEqualRepayments structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule->equal_repayments".
type RepaymentScheduleSummarySimplifiedScheduleEqualRepayments struct {
	Amount                     float64                `json:"amount"`                        // Required.
	DayOfMonth                 int64                  `json:"day_of_month,omitempty"`
	DayOfWeek                  int64                  `json:"day_of_week,omitempty"`
	Interval                   string                 `json:"interval"`                      // Required.
	// Format: date.
	// Required.
	FirstStandardRepaymentDate string                 `json:"first_standard_repayment_date"`
	// Format: date.
	// Required.
	FinalStandardRepaymentDate string                 `json:"final_standard_repayment_date"`
	AdditionalProperties       map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments RepaymentScheduleSummarySimplifiedScheduleEqualRepayments

var knownKeysRepaymentScheduleSummarySimplifiedScheduleEqualRepayments = []string{
	"amount",
	"day_of_month",
	"day_of_week",
	"interval",
	"first_standard_repayment_date",
	"final_standard_repayment_date",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedScheduleEqualRepayments) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedScheduleEqualRepayments {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedScheduleEqualRepayments(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedScheduleEqualRepayments) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(r), r.AdditionalProperties)
}

// RepaymentScheduleItems structure is generated from "#/definitions/repayment_schedule->items".
type RepaymentScheduleItems struct {
	// Date when the repayment must happen.
	// Format: date.
	// Required.
	Date                 string                 `json:"date"`
	// Total amount to be repaid. Sum of all other amounts.
	// Required.
	Total                float64                `json:"total"`
	// If applicable, fees to be repaid. Interest is not considered as fees and appears in its own section.
	// Required.
	TotalFees            float64                `json:"total_fees"`
	Interest             float64                `json:"interest"`   // Required.
	Principal            float64                `json:"principal"`  // Required.
	AdditionalProperties map[string]interface{} `json:"-"`          // All unmatched properties.
}

type marshalRepaymentScheduleItems RepaymentScheduleItems

var knownKeysRepaymentScheduleItems = []string{
	"date",
	"total",
	"total_fees",
	"interest",
	"principal",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleItems) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleItems(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleItems(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleItems) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleItems(r))
	}

	return marshalUnion(marshalRepaymentScheduleItems(r), r.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOK structure is generated from "GetPaymentMethodStateKey/response/ValueOK".
type GetPaymentMethodStateKeyResponseValueOK struct {
	Data                 []GetPaymentMethodStateKeyResponseValueOKDataItems `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}                             `json:"-"`              // All unmatched properties.
}

type marshalGetPaymentMethodStateKeyResponseValueOK GetPaymentMethodStateKeyResponseValueOK

var knownKeysGetPaymentMethodStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentMethodStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentMethodStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentMethodStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentMethodStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetPaymentMethodStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOKDataItems structure is generated from "GetPaymentMethodStateKey/response/ValueOK->data->items".
type GetPaymentMethodStateKeyResponseValueOKDataItems struct {
	Brand                GetPaymentMethodStateKeyResponseValueOKDataItemsBrand             `json:"brand,omitempty"`         // Brand of the payment method, if applicable.
	Expires              *GetPaymentMethodStateKeyResponseValueOKDataItemsExpires          `json:"expires,omitempty"`
	Issuer               string                                                            `json:"issuer,omitempty"`        // Issuer of the payment method.
	LastAttempt          *GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt      `json:"last_attempt,omitempty"`
	LastDigits           string                                                            `json:"last_digits,omitempty"`   // The last digits of the payment method.
	// Unique identifier used for referencing the payment method within iwoca systems.
	// Format: uuid.
	// Required.
	PaymentMethodID      string                                                            `json:"payment_method_id"`
	PaymentMethodType    GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType `json:"payment_method_type"`     // Required.
	// Date & time of when the given payment method was linked.
	// Format: date-time.
	// Required.
	RegisteredAt         *time.Time                                                        `json:"registered_at"`
	Roles                GetPaymentMethodStateKeyResponseValueOKDataItemsRoles             `json:"roles"`                   // Required.
	TokenDetails         *GetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails     `json:"token_details,omitempty"`
	// Payment_method_bank_details.
	// Details of the business bank account used for funding or repayments.
	BankDetails          *PaymentMethodBankDetails                                         `json:"bank_details,omitempty"`
	AdditionalProperties map[string]interface{}                                            `json:"-"`                       // All unmatched properties.
}

type marshalGetPaymentMethodStateKeyResponseValueOKDataItems GetPaymentMethodStateKeyResponseValueOKDataItems

var knownKeysGetPaymentMethodStateKeyResponseValueOKDataItems = []string{
	"brand",
	"expires",
	"issuer",
	"last_attempt",
	"last_digits",
	"payment_method_id",
	"payment_method_type",
	"registered_at",
	"roles",
	"token_details",
	"bank_details",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOKDataItems) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentMethodStateKeyResponseValueOKDataItems(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentMethodStateKeyResponseValueOKDataItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentMethodStateKeyResponseValueOKDataItems(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOKDataItems) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentMethodStateKeyResponseValueOKDataItems(g))
	}

	return marshalUnion(marshalGetPaymentMethodStateKeyResponseValueOKDataItems(g), g.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsExpires structure is generated from "GetPaymentMethodStateKey/response/ValueOK->data->items->expires".
type GetPaymentMethodStateKeyResponseValueOKDataItemsExpires struct {
	// Expiration month.
	// Required.
	Month                int64                  `json:"month"`
	// Expiration year.
	// Required.
	Year                 int64                  `json:"year"`
	AdditionalProperties map[string]interface{} `json:"-"`     // All unmatched properties.
}

type marshalGetPaymentMethodStateKeyResponseValueOKDataItemsExpires GetPaymentMethodStateKeyResponseValueOKDataItemsExpires

var knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsExpires = []string{
	"month",
	"year",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOKDataItemsExpires) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentMethodStateKeyResponseValueOKDataItemsExpires(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsExpires {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentMethodStateKeyResponseValueOKDataItemsExpires(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOKDataItemsExpires) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsExpires(g))
	}

	return marshalUnion(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsExpires(g), g.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt structure is generated from "GetPaymentMethodStateKey/response/ValueOK->data->items->last_attempt".
type GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt struct {
	// The attempted charge amount.
	// Format: float.
	// Required.
	Amount               float64                                                           `json:"amount"`
	// The date and time of the most recent charge attempt in ISO 8601 format.
	// Format: date-time.
	// Required.
	Datetime             *time.Time                                                        `json:"datetime"`
	// The state of the attempted charge.
	// Required.
	Status               GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus `json:"status"`
	AdditionalProperties map[string]interface{}                                            `json:"-"`        // All unmatched properties.
}

type marshalGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt

var knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt = []string{
	"amount",
	"datetime",
	"status",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt(g))
	}

	return marshalUnion(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsLastAttempt(g), g.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsRoles structure is generated from "GetPaymentMethodStateKey/response/ValueOK->data->items->roles".
type GetPaymentMethodStateKeyResponseValueOKDataItemsRoles struct {
	Funding              GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding   `json:"funding"`   // Required.
	Repayment            GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment `json:"repayment"` // Required.
	AdditionalProperties map[string]interface{}                                         `json:"-"`         // All unmatched properties.
}

type marshalGetPaymentMethodStateKeyResponseValueOKDataItemsRoles GetPaymentMethodStateKeyResponseValueOKDataItemsRoles

var knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsRoles = []string{
	"funding",
	"repayment",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOKDataItemsRoles) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentMethodStateKeyResponseValueOKDataItemsRoles(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentMethodStateKeyResponseValueOKDataItemsRoles {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentMethodStateKeyResponseValueOKDataItemsRoles(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOKDataItemsRoles) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsRoles(g))
	}

	return marshalUnion(marshalGetPaymentMethodStateKeyResponseValueOKDataItemsRoles(g), g.AdditionalProperties)
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails structure is generated from "GetPaymentMethodStateKey/response/ValueOK->data->items->token_details".
type GetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails struct {
	AdditionalProperties map[string]interface{} `json:"-"` // All unmatched properties.
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["provider"]; exists && string(v) != `"stripe"` {
		return fmt.Errorf(`bad const value for "provider" ("stripe" expected, %s received)`, v)
	}

	delete(rawMap, "provider")

	for key, rawValue := range rawMap {
		if g.AdditionalProperties == nil {
			g.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		g.AdditionalProperties[key] = val
	}

	return nil
}

var (
	// constGetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails is unconditionally added to JSON.
	constGetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails = json.RawMessage(`{"provider":"stripe"}`)
)

// MarshalJSON encodes JSON.
func (g GetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails) MarshalJSON() ([]byte, error) {
	return marshalUnion(constGetPaymentMethodStateKeyResponseValueOKDataItemsTokenDetails, g.AdditionalProperties)
}

// PaymentMethodBankDetails structure is generated from "#/definitions/payment_method_bank_details".
//
// payment_method_bank_details.
//
// Details of the business bank account used for funding or repayments.
type PaymentMethodBankDetails struct {
	AccountNumber        string                 `json:"account_number"` // Required.
	SortCode             string                 `json:"sort_code"`      // Required.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPaymentMethodBankDetails PaymentMethodBankDetails

var knownKeysPaymentMethodBankDetails = []string{
	"account_number",
	"sort_code",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentMethodBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentMethodBankDetails(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentMethodBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentMethodBankDetails(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentMethodBankDetails) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentMethodBankDetails(p))
	}

	return marshalUnion(marshalPaymentMethodBankDetails(p), p.AdditionalProperties)
}

// PaymentMethod structure is generated from "#/definitions/payment_method".
//
// payment_method.
type PaymentMethod struct {
	Data                 PaymentMethodData      `json:"data"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`    // All unmatched properties.
}

type marshalPaymentMethod PaymentMethod

var knownKeysPaymentMethod = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentMethod) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentMethod(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentMethod {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentMethod(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentMethod) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentMethod(p))
	}

	return marshalUnion(marshalPaymentMethod(p), p.AdditionalProperties)
}

// PaymentMethodData structure is generated from "#/definitions/payment_method->data".
type PaymentMethodData struct {
	Roles                PaymentMethodDataRoles         `json:"roles"`                   // Required.
	TokenDetails         *PaymentMethodDataTokenDetails `json:"token_details,omitempty"`
	// Payment_method_bank_details.
	// Details of the business bank account used for funding or repayments.
	BankDetails          *PaymentMethodBankDetails      `json:"bank_details,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`                       // All unmatched properties.
}

type marshalPaymentMethodData PaymentMethodData

var knownKeysPaymentMethodData = []string{
	"roles",
	"token_details",
	"bank_details",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentMethodData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentMethodData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentMethodData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentMethodData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentMethodData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentMethodData(p))
	}

	return marshalUnion(marshalPaymentMethodData(p), p.AdditionalProperties)
}

// PaymentMethodDataRoles structure is generated from "#/definitions/payment_method->data->roles".
type PaymentMethodDataRoles struct {
	Funding              PaymentMethodDataRolesFunding   `json:"funding"`   // Required.
	Repayment            PaymentMethodDataRolesRepayment `json:"repayment"` // Required.
	AdditionalProperties map[string]interface{}          `json:"-"`         // All unmatched properties.
}

type marshalPaymentMethodDataRoles PaymentMethodDataRoles

var knownKeysPaymentMethodDataRoles = []string{
	"funding",
	"repayment",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentMethodDataRoles) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentMethodDataRoles(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentMethodDataRoles {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentMethodDataRoles(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentMethodDataRoles) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentMethodDataRoles(p))
	}

	return marshalUnion(marshalPaymentMethodDataRoles(p), p.AdditionalProperties)
}

// PaymentMethodDataTokenDetails structure is generated from "#/definitions/payment_method->data->token_details".
type PaymentMethodDataTokenDetails struct {
	// Token provided by the payment processor referring to a certain payment method registered with them.
	// Required.
	Token                string                 `json:"token"`
	AdditionalProperties map[string]interface{} `json:"-"`     // All unmatched properties.
}

type marshalPaymentMethodDataTokenDetails PaymentMethodDataTokenDetails

var knownKeysPaymentMethodDataTokenDetails = []string{
	"token",
	"provider",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentMethodDataTokenDetails) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentMethodDataTokenDetails(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["provider"]; exists && string(v) != `"stripe"` {
		return fmt.Errorf(`bad const value for "provider" ("stripe" expected, %s received)`, v)
	}

	delete(rawMap, "provider")

	for _, key := range knownKeysPaymentMethodDataTokenDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentMethodDataTokenDetails(mp)

	return nil
}

var (
	// constPaymentMethodDataTokenDetails is unconditionally added to JSON.
	constPaymentMethodDataTokenDetails = json.RawMessage(`{"provider":"stripe"}`)
)

// MarshalJSON encodes JSON.
func (p PaymentMethodDataTokenDetails) MarshalJSON() ([]byte, error) {
	return marshalUnion(constPaymentMethodDataTokenDetails, marshalPaymentMethodDataTokenDetails(p), p.AdditionalProperties)
}

// PostPaymentMethodStateKeyResponseValueCreated structure is generated from "PostPaymentMethodStateKey/response/ValueCreated".
type PostPaymentMethodStateKeyResponseValueCreated struct {
	Data                 *PostPaymentMethodStateKeyResponseValueCreatedData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}                             `json:"-"`              // All unmatched properties.
}

type marshalPostPaymentMethodStateKeyResponseValueCreated PostPaymentMethodStateKeyResponseValueCreated

var knownKeysPostPaymentMethodStateKeyResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostPaymentMethodStateKeyResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostPaymentMethodStateKeyResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostPaymentMethodStateKeyResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostPaymentMethodStateKeyResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostPaymentMethodStateKeyResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostPaymentMethodStateKeyResponseValueCreated(p))
	}

	return marshalUnion(marshalPostPaymentMethodStateKeyResponseValueCreated(p), p.AdditionalProperties)
}

// PostPaymentMethodStateKeyResponseValueCreatedData structure is generated from "PostPaymentMethodStateKey/response/ValueCreated->data".
type PostPaymentMethodStateKeyResponseValueCreatedData struct {
	// Unique identifier used for referencing the payment method within iwoca systems.
	// Format: uuid.
	PaymentMethodID      string                 `json:"payment_method_id,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                           // All unmatched properties.
}

type marshalPostPaymentMethodStateKeyResponseValueCreatedData PostPaymentMethodStateKeyResponseValueCreatedData

var knownKeysPostPaymentMethodStateKeyResponseValueCreatedData = []string{
	"payment_method_id",
}

// UnmarshalJSON decodes JSON.
func (p *PostPaymentMethodStateKeyResponseValueCreatedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostPaymentMethodStateKeyResponseValueCreatedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostPaymentMethodStateKeyResponseValueCreatedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostPaymentMethodStateKeyResponseValueCreatedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostPaymentMethodStateKeyResponseValueCreatedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostPaymentMethodStateKeyResponseValueCreatedData(p))
	}

	return marshalUnion(marshalPostPaymentMethodStateKeyResponseValueCreatedData(p), p.AdditionalProperties)
}

// GetPaymentConfirmationResponseValueOK structure is generated from "GetPaymentConfirmation/response/ValueOK".
type GetPaymentConfirmationResponseValueOK struct {
	Data                 []PaymentInstruction                       `json:"data"`  // Required.
	Meta                 GetPaymentConfirmationResponseValueOKMeta  `json:"meta"`  // Required.
	Links                GetPaymentConfirmationResponseValueOKLinks `json:"links"` // Required.
	AdditionalProperties map[string]interface{}                     `json:"-"`     // All unmatched properties.
}

type marshalGetPaymentConfirmationResponseValueOK GetPaymentConfirmationResponseValueOK

var knownKeysGetPaymentConfirmationResponseValueOK = []string{
	"data",
	"meta",
	"links",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentConfirmationResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentConfirmationResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentConfirmationResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentConfirmationResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentConfirmationResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentConfirmationResponseValueOK(g))
	}

	return marshalUnion(marshalGetPaymentConfirmationResponseValueOK(g), g.AdditionalProperties)
}

// PaymentInstruction structure is generated from "#/definitions/payment_instruction".
//
// payment_instruction.
type PaymentInstruction struct {
	// Format: uuid.
	// Required.
	StateKey             string                      `json:"state_key"`
	Amount               float64                     `json:"amount"`                  // Required.
	Direction            PaymentInstructionDirection `json:"direction"`               // Required.
	// Format: uuid.
	// Required.
	ID                   string                      `json:"payment_instruction_id"`
	Outcome              PaymentInstructionOutcome   `json:"outcome"`                 // Required.
	// Format: date-time.
	// Required.
	OutcomeDatetime      *time.Time                  `json:"outcome_datetime"`
	ErrorCode            string                      `json:"error_code,omitempty"`
	ErrorDetails         string                      `json:"error_details,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`                       // All unmatched properties.
}

type marshalPaymentInstruction PaymentInstruction

var knownKeysPaymentInstruction = []string{
	"state_key",
	"amount",
	"direction",
	"payment_instruction_id",
	"outcome",
	"outcome_datetime",
	"error_code",
	"error_details",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentInstruction) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentInstruction(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentInstruction {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentInstruction(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentInstruction) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentInstruction(p))
	}

	return marshalUnion(marshalPaymentInstruction(p), p.AdditionalProperties)
}

// GetPaymentConfirmationResponseValueOKMeta structure is generated from "GetPaymentConfirmation/response/ValueOK->meta".
type GetPaymentConfirmationResponseValueOKMeta struct {
	Count                int64                  `json:"count"`       // Required.
	TotalPages           int64                  `json:"total_pages"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`           // All unmatched properties.
}

type marshalGetPaymentConfirmationResponseValueOKMeta GetPaymentConfirmationResponseValueOKMeta

var knownKeysGetPaymentConfirmationResponseValueOKMeta = []string{
	"count",
	"total_pages",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentConfirmationResponseValueOKMeta) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentConfirmationResponseValueOKMeta(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentConfirmationResponseValueOKMeta {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentConfirmationResponseValueOKMeta(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentConfirmationResponseValueOKMeta) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentConfirmationResponseValueOKMeta(g))
	}

	return marshalUnion(marshalGetPaymentConfirmationResponseValueOKMeta(g), g.AdditionalProperties)
}

// GetPaymentConfirmationResponseValueOKLinks structure is generated from "GetPaymentConfirmation/response/ValueOK->links".
type GetPaymentConfirmationResponseValueOKLinks struct {
	// Format: uri.
	// Required.
	Self                 string                 `json:"self"`
	// Format: uri.
	// Required.
	First                string                 `json:"first"`
	// Format: uri.
	// Required.
	Last                 string                 `json:"last"`
	Previous             string                 `json:"previous,omitempty"` // Format: uri.
	Next                 string                 `json:"next,omitempty"`     // Format: uri.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalGetPaymentConfirmationResponseValueOKLinks GetPaymentConfirmationResponseValueOKLinks

var knownKeysGetPaymentConfirmationResponseValueOKLinks = []string{
	"self",
	"first",
	"last",
	"previous",
	"next",
}

// UnmarshalJSON decodes JSON.
func (g *GetPaymentConfirmationResponseValueOKLinks) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetPaymentConfirmationResponseValueOKLinks(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetPaymentConfirmationResponseValueOKLinks {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetPaymentConfirmationResponseValueOKLinks(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetPaymentConfirmationResponseValueOKLinks) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetPaymentConfirmationResponseValueOKLinks(g))
	}

	return marshalUnion(marshalGetPaymentConfirmationResponseValueOKLinks(g), g.AdditionalProperties)
}

// PostPaymentConfirmationRequestBody structure is generated from "PostPaymentConfirmation/request/body".
type PostPaymentConfirmationRequestBody struct {
	Data                 PostPaymentConfirmationRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                 `json:"-"`    // All unmatched properties.
}

type marshalPostPaymentConfirmationRequestBody PostPaymentConfirmationRequestBody

var knownKeysPostPaymentConfirmationRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostPaymentConfirmationRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostPaymentConfirmationRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostPaymentConfirmationRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostPaymentConfirmationRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostPaymentConfirmationRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostPaymentConfirmationRequestBody(p))
	}

	return marshalUnion(marshalPostPaymentConfirmationRequestBody(p), p.AdditionalProperties)
}

// PostPaymentConfirmationRequestBodyData structure is generated from "PostPaymentConfirmation/request/body->data".
type PostPaymentConfirmationRequestBodyData struct {
	PaymentInstructionOutcomes []PaymentInstructionOutcomeType2 `json:"payment_instruction_outcomes,omitempty"`
	AdditionalProperties       map[string]interface{}           `json:"-"`                                      // All unmatched properties.
}

type marshalPostPaymentConfirmationRequestBodyData PostPaymentConfirmationRequestBodyData

var knownKeysPostPaymentConfirmationRequestBodyData = []string{
	"payment_instruction_outcomes",
}

// UnmarshalJSON decodes JSON.
func (p *PostPaymentConfirmationRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostPaymentConfirmationRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostPaymentConfirmationRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostPaymentConfirmationRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostPaymentConfirmationRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostPaymentConfirmationRequestBodyData(p))
	}

	return marshalUnion(marshalPostPaymentConfirmationRequestBodyData(p), p.AdditionalProperties)
}

// PaymentInstructionOutcomeType2 structure is generated from "#/definitions/payment_instruction_outcome".
//
// payment_instruction_outcome.
type PaymentInstructionOutcomeType2 struct {
	// Format: uuid.
	// Required.
	StateKey             string                                `json:"state_key"`
	// Format: uuid.
	// Required.
	PaymentInstructionID string                                `json:"payment_instruction_id"`
	Outcome              PaymentInstructionOutcomeType2Outcome `json:"outcome"`                // Required.
	Error                *PaymentInstructionOutcomeError       `json:"error,omitempty"`
	// Date-time the transaction occurred, with expected ISO 8601 format.
	// Format: date-time.
	// Required.
	Datetime             *time.Time                            `json:"datetime"`
	AdditionalProperties map[string]interface{}                `json:"-"`                      // All unmatched properties.
}

type marshalPaymentInstructionOutcomeType2 PaymentInstructionOutcomeType2

var knownKeysPaymentInstructionOutcomeType2 = []string{
	"state_key",
	"payment_instruction_id",
	"outcome",
	"error",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentInstructionOutcomeType2) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentInstructionOutcomeType2(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentInstructionOutcomeType2 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentInstructionOutcomeType2(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentInstructionOutcomeType2) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentInstructionOutcomeType2(p))
	}

	return marshalUnion(marshalPaymentInstructionOutcomeType2(p), p.AdditionalProperties)
}

// PaymentInstructionOutcomeError structure is generated from "#/definitions/payment_instruction_outcome->error".
type PaymentInstructionOutcomeError struct {
	Code                 PaymentInstructionOutcomeErrorCode `json:"code"`    // Required.
	Details              string                             `json:"details"` // Required.
	AdditionalProperties map[string]interface{}             `json:"-"`       // All unmatched properties.
}

type marshalPaymentInstructionOutcomeError PaymentInstructionOutcomeError

var knownKeysPaymentInstructionOutcomeError = []string{
	"code",
	"details",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentInstructionOutcomeError) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentInstructionOutcomeError(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentInstructionOutcomeError {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentInstructionOutcomeError(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentInstructionOutcomeError) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentInstructionOutcomeError(p))
	}

	return marshalUnion(marshalPaymentInstructionOutcomeError(p), p.AdditionalProperties)
}

// PostCreditFacilityFundingRequestStateKeyRequestBody structure is generated from "PostCreditFacilityFundingRequestStateKey/request/body".
type PostCreditFacilityFundingRequestStateKeyRequestBody struct {
	Data                 PostCreditFacilityFundingRequestStateKeyRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                  `json:"-"`    // All unmatched properties.
}

type marshalPostCreditFacilityFundingRequestStateKeyRequestBody PostCreditFacilityFundingRequestStateKeyRequestBody

var knownKeysPostCreditFacilityFundingRequestStateKeyRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityFundingRequestStateKeyRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityFundingRequestStateKeyRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityFundingRequestStateKeyRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityFundingRequestStateKeyRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityFundingRequestStateKeyRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityFundingRequestStateKeyRequestBody(p))
	}

	return marshalUnion(marshalPostCreditFacilityFundingRequestStateKeyRequestBody(p), p.AdditionalProperties)
}

// PostCreditFacilityFundingRequestStateKeyRequestBodyData structure is generated from "PostCreditFacilityFundingRequestStateKey/request/body->data".
type PostCreditFacilityFundingRequestStateKeyRequestBodyData struct {
	Amount               float64                                                            `json:"amount"`       // Required.
	BankDetails          PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails `json:"bank_details"` // Required.
	AdditionalProperties map[string]interface{}                                             `json:"-"`            // All unmatched properties.
}

type marshalPostCreditFacilityFundingRequestStateKeyRequestBodyData PostCreditFacilityFundingRequestStateKeyRequestBodyData

var knownKeysPostCreditFacilityFundingRequestStateKeyRequestBodyData = []string{
	"amount",
	"bank_details",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityFundingRequestStateKeyRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityFundingRequestStateKeyRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityFundingRequestStateKeyRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityFundingRequestStateKeyRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityFundingRequestStateKeyRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityFundingRequestStateKeyRequestBodyData(p))
	}

	return marshalUnion(marshalPostCreditFacilityFundingRequestStateKeyRequestBodyData(p), p.AdditionalProperties)
}

// PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails structure is generated from "PostCreditFacilityFundingRequestStateKey/request/body->data->bank_details".
type PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails struct {
	SortCode             string                 `json:"sort_code"`      // Required.
	AccountNumber        string                 `json:"account_number"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails

var knownKeysPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails = []string{
	"sort_code",
	"account_number",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails(p))
	}

	return marshalUnion(marshalPostCreditFacilityFundingRequestStateKeyRequestBodyDataBankDetails(p), p.AdditionalProperties)
}

// CreditFacilityStatus structure is generated from "#/definitions/credit_facility_status".
//
// credit_facility_status.
type CreditFacilityStatus struct {
	Data                 *CreditFacilityStatusData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`              // All unmatched properties.
}

type marshalCreditFacilityStatus CreditFacilityStatus

var knownKeysCreditFacilityStatus = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatus(c))
	}

	return marshalUnion(marshalCreditFacilityStatus(c), c.AdditionalProperties)
}

// CreditFacilityStatusData structure is generated from "#/definitions/credit_facility_status->data".
type CreditFacilityStatusData struct {
	// Approval_request.
	// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
	LatestApprovalRequest *ApprovalRequest                           `json:"latest_approval_request,omitempty"`
	// Approval_status.
	// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
	ApprovalStatus        *ApprovalStatus                            `json:"approval_status,omitempty"`
	ApprovalRequirements  []DataRequirement                          `json:"approval_requirements,omitempty"`
	FundingRequirements   []DataRequirement                          `json:"funding_requirements,omitempty"`
	LoanStatus            CreditFacilityStatusDataLoanStatus         `json:"loan_status,omitempty"`             // Status of current or last loan.
	ScheduledPayments     *CreditFacilityStatusDataScheduledPayments `json:"scheduled_payments,omitempty"`
	Balance               *CreditFacilityStatusDataBalance           `json:"balance,omitempty"`                 // Balance for this credit facility as of today.
	Cashflows             []CreditFacilityStatusDataCashflowsItems   `json:"cashflows,omitempty"`               // Cashflows related to this loan. Mainly funding and repayments.
	AdditionalProperties  map[string]interface{}                     `json:"-"`                                 // All unmatched properties.
}

type marshalCreditFacilityStatusData CreditFacilityStatusData

var knownKeysCreditFacilityStatusData = []string{
	"latest_approval_request",
	"approval_status",
	"approval_requirements",
	"funding_requirements",
	"loan_status",
	"scheduled_payments",
	"balance",
	"cashflows",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusData) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusData(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusData(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusData) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusData(c))
	}

	return marshalUnion(marshalCreditFacilityStatusData(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataScheduledPayments structure is generated from "#/definitions/credit_facility_status->data->scheduled_payments".
type CreditFacilityStatusDataScheduledPayments struct {
	Summary              *RepaymentScheduleSummary `json:"summary,omitempty"`  // Repayment_schedule_summary.
	// Repayment_schedule.
	// Payments schedule to repay the current loan.
	Schedule             []RepaymentScheduleItems  `json:"schedule,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityStatusDataScheduledPayments CreditFacilityStatusDataScheduledPayments

var knownKeysCreditFacilityStatusDataScheduledPayments = []string{
	"summary",
	"schedule",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataScheduledPayments) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataScheduledPayments(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataScheduledPayments {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataScheduledPayments(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataScheduledPayments) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataScheduledPayments(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataScheduledPayments(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataBalance structure is generated from "#/definitions/credit_facility_status->data->balance".
//
// Balance for this credit facility as of today.
type CreditFacilityStatusDataBalance struct {
	ProductFees          float64                `json:"product_fees,omitempty"`
	Total                float64                `json:"total,omitempty"`
	OtherFees            float64                `json:"other_fees,omitempty"`
	Interest             float64                `json:"interest,omitempty"`
	Principal            float64                `json:"principal,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalCreditFacilityStatusDataBalance CreditFacilityStatusDataBalance

var knownKeysCreditFacilityStatusDataBalance = []string{
	"product_fees",
	"total",
	"other_fees",
	"interest",
	"principal",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataBalance) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataBalance(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataBalance {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataBalance(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataBalance) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataBalance(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataBalance(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataCashflowsItems structure is generated from "#/definitions/credit_facility_status->data->cashflows->items".
type CreditFacilityStatusDataCashflowsItems struct {
	Amount               float64                                         `json:"amount,omitempty"`
	Type                 CreditFacilityStatusDataCashflowsItemsType      `json:"type,omitempty"`
	Direction            CreditFacilityStatusDataCashflowsItemsDirection `json:"direction,omitempty"`
	Datetime             *time.Time                                      `json:"datetime,omitempty"`  // Format: date-time.
	AdditionalProperties map[string]interface{}                          `json:"-"`                   // All unmatched properties.
}

type marshalCreditFacilityStatusDataCashflowsItems CreditFacilityStatusDataCashflowsItems

var knownKeysCreditFacilityStatusDataCashflowsItems = []string{
	"amount",
	"type",
	"direction",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataCashflowsItems) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataCashflowsItems(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataCashflowsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataCashflowsItems(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataCashflowsItems) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataCashflowsItems(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataCashflowsItems(c), c.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBody structure is generated from "PostAnonymisedDataEvaluation/request/body".
type PostAnonymisedDataEvaluationRequestBody struct {
	Data                 []PostAnonymisedDataEvaluationRequestBodyDataItems `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                             `json:"-"`    // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBody PostAnonymisedDataEvaluationRequestBody

var knownKeysPostAnonymisedDataEvaluationRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBody(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBody(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items".
type PostAnonymisedDataEvaluationRequestBodyDataItems struct {
	CorrelationID        string                                                          `json:"correlation_id,omitempty"`  // Format: uuid.
	StructuredData       *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData `json:"structured_data,omitempty"`
	Values               []PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems   `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}                                          `json:"-"`                         // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItems PostAnonymisedDataEvaluationRequestBodyDataItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItems = []string{
	"correlation_id",
	"structured_data",
	"values",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data".
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData struct {
	AnonymisedEquifaxBusinessReport *CompanyReport         `json:"anonymised_equifax_business_report,omitempty"` // CompanyReport.
	AdditionalProperties            map[string]interface{} `json:"-"`                                            // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData = []string{
	"anonymised_equifax_business_report",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredData(p), p.AdditionalProperties)
}

// CompanyReport structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report".
//
// CompanyReport.
type CompanyReport struct {
	Auditor              *Auditor                                                                                                            `json:"auditor,omitempty"`              // Auditor.
	Ccds                 *CCDS                                                                                                               `json:"ccds,omitempty"`                 // CCDS.
	CharacteristicGroups []CharacteristicGroup                                                                                               `json:"characteristicGroups,omitempty"`
	Characteristics      []PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems `json:"characteristics,omitempty"`
	Cifas                []Cifas                                                                                                             `json:"cifas,omitempty"`
	Company              string                                                                                                              `json:"company,omitempty"`
	CompanyOfficers      []CompanyOfficer                                                                                                    `json:"companyOfficers,omitempty"`
	Detrimental          *Detrimental                                                                                                        `json:"detrimental,omitempty"`          // Detrimental.
	Financials           []Financials                                                                                                        `json:"financials,omitempty"`
	GroupStructure       *GroupStructure                                                                                                     `json:"groupStructure,omitempty"`       // GroupStructure.
	History              *History                                                                                                            `json:"history,omitempty"`              // History.
	Identification       *Identification                                                                                                     `json:"identification,omitempty"`       // Identification.
	Insight              *Insight                                                                                                            `json:"insight,omitempty"`              // Insight.
	Mortgages            *Mortgages                                                                                                          `json:"mortgages,omitempty"`            // Mortgages.
	ScoresAndLimits      *ScoresAndLimits                                                                                                    `json:"scoresAndLimits,omitempty"`      // ScoresAndLimits.
	TieredOwnership      []TieredOwnership                                                                                                   `json:"tieredOwnership,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                              `json:"-"`                              // All unmatched properties.
}

type marshalCompanyReport CompanyReport

var knownKeysCompanyReport = []string{
	"auditor",
	"ccds",
	"characteristicGroups",
	"characteristics",
	"cifas",
	"company",
	"companyOfficers",
	"detrimental",
	"financials",
	"groupStructure",
	"history",
	"identification",
	"insight",
	"mortgages",
	"scoresAndLimits",
	"tieredOwnership",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyReport) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyReport(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyReport {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyReport(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyReport) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyReport(c))
	}

	return marshalUnion(marshalCompanyReport(c), c.AdditionalProperties)
}

// Auditor structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->auditor".
//
// Auditor.
type Auditor struct {
	Name                 string                 `json:"name,omitempty"`
	Qualifier            bool                   `json:"qualifier,omitempty"`
	Town                 string                 `json:"town,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                   // All unmatched properties.
}

type marshalAuditor Auditor

var knownKeysAuditor = []string{
	"name",
	"qualifier",
	"town",
}

// UnmarshalJSON decodes JSON.
func (a *Auditor) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAuditor(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAuditor {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = Auditor(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a Auditor) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAuditor(a))
	}

	return marshalUnion(marshalAuditor(a), a.AdditionalProperties)
}

// CCDS structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds".
//
// CCDS.
type CCDS struct {
	CreditCardAccounts   []CreditCardAccount    `json:"creditCardAccounts,omitempty"`
	CurrentAccounts      []CurrentAccount       `json:"currentAccounts,omitempty"`
	LoanAccounts         []LoanAccount          `json:"loanAccounts,omitempty"`
	Standard             bool                   `json:"standard,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalCCDS CCDS

var knownKeysCCDS = []string{
	"creditCardAccounts",
	"currentAccounts",
	"loanAccounts",
	"standard",
}

// UnmarshalJSON decodes JSON.
func (c *CCDS) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCCDS(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCCDS {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CCDS(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CCDS) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCCDS(c))
	}

	return marshalUnion(marshalCCDS(c), c.AdditionalProperties)
}

// CreditCardAccount structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items".
//
// CreditCardAccount.
type CreditCardAccount struct {
	AdditionalTradingStyle               string                       `json:"additionalTradingStyle,omitempty"`
	Address                              *AddressLine6                `json:"address,omitempty"`                              // AddressLine6.
	BusinessName                         string                       `json:"businessName,omitempty"`
	BusinessTelephoneNumber              string                       `json:"businessTelephoneNumber,omitempty"`
	ChangedFacilityNumber                string                       `json:"changedFacilityNumber,omitempty"`
	CloseDateOfAgreement                 string                       `json:"closeDateOfAgreement,omitempty"`                 // Format: date.
	CompanyRegisteredNumber              string                       `json:"companyRegisteredNumber,omitempty"`
	CompanyTypeIndicator                 *CompanyTypeIndicator        `json:"companyTypeIndicator,omitempty"`                 // CompanyTypeIndicator.
	CreditOverdraftLimit                 int64                        `json:"creditOverdraftLimit,omitempty"`                 // Format: int64.
	CurrentBalance                       int64                        `json:"currentBalance,omitempty"`                       // Format: int64.
	CurrentBalanceCreditIndicator        string                       `json:"currentBalanceCreditIndicator,omitempty"`
	DefaultDate                          string                       `json:"defaultDate,omitempty"`                          // Format: date.
	DefaultSatisfactionDate              string                       `json:"defaultSatisfactionDate,omitempty"`              // Format: date.
	FacilityNumber                       string                       `json:"facilityNumber,omitempty"`
	// - U: Unclassified - The member is unable to make any statement, whether positive or adverse on the performance of this facility for the period in question. A \'U\' may also be used during the initial period of a facility’s life when the first payment is yet to be made (maximum 2 months excepting \'buy now pay later\' facilities).
	// - D: Dormant – The facility has been inactive for a period of time, usually with a zero balance. This code should be supplied each and every month until the facility is used again or closed.
	// - 0: In advance, up-to-date or less than one payment due but unpaid.
	// - 1: More than one but less than two payments due but unpaid.
	// - 2: More than two but less than three payments due but unpaid.
	// - 3: More than three but less than four payments due but unpaid.
	// - 4: More than four but less than five payments due but unpaid.
	// - 5: More than five but less than six payments due but unpaid.
	// - 6: Six or more payments due but unpaid.
	// - 8: Defaulted Balance- At the date of default the customer had failed to meet the contractual obligations and had failed to satisfactorily respond to requests that the facility be put into order. The circumstances where a facility should be defaulted are more fully explained in the guidance note on the filing of defaults and members are advised to follow this as a guide to best practice.
	// - S: Settled – The facility has been settled within the terms of the agreement terms and is closed.  For Facility Type 15, Current Accounts, this indicates the Current Account was closed with a zero or credit balance.
	FacilityStatus                       string                       `json:"facilityStatus,omitempty"`
	FacilityStatusDate                   string                       `json:"facilityStatusDate,omitempty"`                   // Format: date.
	FacilityStatusEffectiveDate          string                       `json:"facilityStatusEffectiveDate,omitempty"`          // Format: date.
	FacilityType                         *FacilityType                `json:"facilityType,omitempty"`                         // FacilityType.
	FlagSetting                          *FlagSetting                 `json:"flagSetting,omitempty"`                          // FlagSetting.
	MatchStatus                          *CompanyMatchStatus          `json:"matchStatus,omitempty"`                          // CompanyMatchStatus.
	NumberOfCashAdvances                 int64                        `json:"numberOfCashAdvances,omitempty"`                 // Format: int32.
	OriginalDefaultBalance               int64                        `json:"originalDefaultBalance,omitempty"`               // Format: int64.
	PortfolioName                        string                       `json:"portfolioName,omitempty"`
	Profile                              string                       `json:"profile,omitempty"`
	SpecialInstructionIndicator          *SpecialInstructionIndicator `json:"specialInstructionIndicator,omitempty"`          // SpecialInstructionIndicator.
	StartDateOfAgreement                 string                       `json:"startDateOfAgreement,omitempty"`                 // Format: date.
	TransferredToConsolidatedDebtAccount string                       `json:"transferredToConsolidatedDebtAccount,omitempty"`
	ValueOfCashAdvances                  int64                        `json:"valueOfCashAdvances,omitempty"`                  // Format: int64.
	VatNumber                            string                       `json:"vatNumber,omitempty"`
	AdditionalProperties                 map[string]interface{}       `json:"-"`                                              // All unmatched properties.
}

type marshalCreditCardAccount CreditCardAccount

var knownKeysCreditCardAccount = []string{
	"additionalTradingStyle",
	"address",
	"businessName",
	"businessTelephoneNumber",
	"changedFacilityNumber",
	"closeDateOfAgreement",
	"companyRegisteredNumber",
	"companyTypeIndicator",
	"creditOverdraftLimit",
	"currentBalance",
	"currentBalanceCreditIndicator",
	"defaultDate",
	"defaultSatisfactionDate",
	"facilityNumber",
	"facilityStatus",
	"facilityStatusDate",
	"facilityStatusEffectiveDate",
	"facilityType",
	"flagSetting",
	"matchStatus",
	"numberOfCashAdvances",
	"originalDefaultBalance",
	"portfolioName",
	"profile",
	"specialInstructionIndicator",
	"startDateOfAgreement",
	"transferredToConsolidatedDebtAccount",
	"valueOfCashAdvances",
	"vatNumber",
}

// UnmarshalJSON decodes JSON.
func (c *CreditCardAccount) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditCardAccount(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditCardAccount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditCardAccount(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditCardAccount) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditCardAccount(c))
	}

	return marshalUnion(marshalCreditCardAccount(c), c.AdditionalProperties)
}

// AddressLine6 structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->address".
//
// AddressLine6.
type AddressLine6 struct {
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Line6                string                 `json:"line6,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalAddressLine6 AddressLine6

var knownKeysAddressLine6 = []string{
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"line6",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (a *AddressLine6) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressLine6(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressLine6 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressLine6(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressLine6) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressLine6(a))
	}

	return marshalUnion(marshalAddressLine6(a), a.AdditionalProperties)
}

// CompanyTypeIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->companyTypeIndicator".
//
// CompanyTypeIndicator.
type CompanyTypeIndicator struct {
	Code                 CompanyTypeIndicatorCode        `json:"code,omitempty"`
	Description          CompanyTypeIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`                     // All unmatched properties.
}

type marshalCompanyTypeIndicator CompanyTypeIndicator

var knownKeysCompanyTypeIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyTypeIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyTypeIndicator(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyTypeIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyTypeIndicator(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyTypeIndicator) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyTypeIndicator(c))
	}

	return marshalUnion(marshalCompanyTypeIndicator(c), c.AdditionalProperties)
}

// FacilityType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->facilityType".
//
// FacilityType.
type FacilityType struct {
	Code                 int64                   `json:"code,omitempty"`        // Format: int32.
	Description          FacilityTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`                     // All unmatched properties.
}

type marshalFacilityType FacilityType

var knownKeysFacilityType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (f *FacilityType) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFacilityType(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFacilityType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = FacilityType(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f FacilityType) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFacilityType(f))
	}

	return marshalUnion(marshalFacilityType(f), f.AdditionalProperties)
}

// FlagSetting structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->flagSetting".
//
// FlagSetting.
type FlagSetting struct {
	Code                 FlagSettingCode        `json:"code,omitempty"`
	Description          FlagSettingDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalFlagSetting FlagSetting

var knownKeysFlagSetting = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (f *FlagSetting) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFlagSetting(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFlagSetting {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = FlagSetting(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f FlagSetting) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFlagSetting(f))
	}

	return marshalUnion(marshalFlagSetting(f), f.AdditionalProperties)
}

// CompanyMatchStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->matchStatus".
//
// CompanyMatchStatus.
type CompanyMatchStatus struct {
	Code                 CompanyMatchStatusCode        `json:"code,omitempty"`
	Description          CompanyMatchStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`                     // All unmatched properties.
}

type marshalCompanyMatchStatus CompanyMatchStatus

var knownKeysCompanyMatchStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyMatchStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyMatchStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyMatchStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyMatchStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyMatchStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyMatchStatus(c))
	}

	return marshalUnion(marshalCompanyMatchStatus(c), c.AdditionalProperties)
}

// SpecialInstructionIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->creditCardAccounts->items->specialInstructionIndicator".
//
// SpecialInstructionIndicator.
type SpecialInstructionIndicator struct {
	Code                 SpecialInstructionIndicatorCode        `json:"code,omitempty"`
	Description          SpecialInstructionIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                 `json:"-"`                     // All unmatched properties.
}

type marshalSpecialInstructionIndicator SpecialInstructionIndicator

var knownKeysSpecialInstructionIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (s *SpecialInstructionIndicator) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSpecialInstructionIndicator(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSpecialInstructionIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SpecialInstructionIndicator(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SpecialInstructionIndicator) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSpecialInstructionIndicator(s))
	}

	return marshalUnion(marshalSpecialInstructionIndicator(s), s.AdditionalProperties)
}

// CurrentAccount structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items".
//
// CurrentAccount.
type CurrentAccount struct {
	AdditionalTradingStyle               string                                                                                                                                            `json:"additionalTradingStyle,omitempty"`
	Address                              *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress                     `json:"address,omitempty"`                               // AddressLine6.
	AverageBalance                       int64                                                                                                                                             `json:"averageBalance,omitempty"`                        // Format: int64.
	AverageBalanceCreditIndicator        string                                                                                                                                            `json:"averageBalanceCreditIndicator,omitempty"`
	BankAccountIBAN                      string                                                                                                                                            `json:"bankAccountIBAN,omitempty"`
	BankAccountNumber                    string                                                                                                                                            `json:"bankAccountNumber,omitempty"`
	BankSortCode                         string                                                                                                                                            `json:"bankSortCode,omitempty"`
	BusinessName                         string                                                                                                                                            `json:"businessName,omitempty"`
	BusinessTelephoneNumber              string                                                                                                                                            `json:"businessTelephoneNumber,omitempty"`
	ChangedFacilityNumber                string                                                                                                                                            `json:"changedFacilityNumber,omitempty"`
	CloseDateOfAgreement                 string                                                                                                                                            `json:"closeDateOfAgreement,omitempty"`                  // Format: date.
	CompanyRegisteredNumber              string                                                                                                                                            `json:"companyRegisteredNumber,omitempty"`
	CompanyTypeIndicator                 *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator        `json:"companyTypeIndicator,omitempty"`                  // CompanyTypeIndicator.
	CreditOverdraftLimit                 int64                                                                                                                                             `json:"creditOverdraftLimit,omitempty"`                  // Format: int64.
	CreditTurnOverNetGross               *TurnoverType                                                                                                                                     `json:"creditTurnOverNetGross,omitempty"`                // TurnoverType.
	CreditTurnover                       int64                                                                                                                                             `json:"creditTurnover,omitempty"`                        // Format: int64.
	ReportingLevelIndicator              string                                                                                                                                            `json:"currentAccountReportingLevelIndicator,omitempty"`
	CurrentBalance                       int64                                                                                                                                             `json:"currentBalance,omitempty"`                        // Format: int64.
	CurrentBalanceCreditIndicator        string                                                                                                                                            `json:"currentBalanceCreditIndicator,omitempty"`
	DebitTurnOverNetGross                *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross       `json:"debitTurnOverNetGross,omitempty"`                 // TurnoverType.
	DebitTurnover                        int64                                                                                                                                             `json:"debitTurnover,omitempty"`                         // Format: int64.
	DefaultDate                          string                                                                                                                                            `json:"defaultDate,omitempty"`                           // Format: date.
	DefaultSatisfactionDate              string                                                                                                                                            `json:"defaultSatisfactionDate,omitempty"`               // Format: date.
	FacilityNumber                       string                                                                                                                                            `json:"facilityNumber,omitempty"`
	// - U: Unclassified - The member is unable to make any statement, whether positive or adverse on the performance of this facility for the period in question. A \'U\' may also be used during the initial period of a facility’s life when the first payment is yet to be made (maximum 2 months excepting \'buy now pay later\' facilities).
	// - D: Dormant – The facility has been inactive for a period of time, usually with a zero balance. This code should be supplied each and every month until the facility is used again or closed.
	// - 0: In advance, up-to-date or less than one payment due but unpaid.
	// - 1: More than one but less than two payments due but unpaid.
	// - 2: More than two but less than three payments due but unpaid.
	// - 3: More than three but less than four payments due but unpaid.
	// - 4: More than four but less than five payments due but unpaid.
	// - 5: More than five but less than six payments due but unpaid.
	// - 6: Six or more payments due but unpaid.
	// - 8: Defaulted Balance- At the date of default the customer had failed to meet the contractual obligations and had failed to satisfactorily respond to requests that the facility be put into order. The circumstances where a facility should be defaulted are more fully explained in the guidance note on the filing of defaults and members are advised to follow this as a guide to best practice.
	// - S: Settled – The facility has been settled within the terms of the agreement terms and is closed.  For Facility Type 15, Current Accounts, this indicates the Current Account was closed with a zero or credit balance.
	FacilityStatus                       string                                                                                                                                            `json:"facilityStatus,omitempty"`
	FacilityStatusDate                   string                                                                                                                                            `json:"facilityStatusDate,omitempty"`                    // Format: date.
	FacilityStatusEffectiveDate          string                                                                                                                                            `json:"facilityStatusEffectiveDate,omitempty"`           // Format: date.
	FacilityType                         *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType                `json:"facilityType,omitempty"`                          // FacilityType.
	FlagSetting                          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting                 `json:"flagSetting,omitempty"`                           // FlagSetting.
	MatchStatus                          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus                 `json:"matchStatus,omitempty"`                           // CompanyMatchStatus.
	MaximumBalance                       int64                                                                                                                                             `json:"maximumBalance,omitempty"`                        // Format: int64.
	MaximumBalanceCreditIndicator        string                                                                                                                                            `json:"maximumBalanceCreditIndicator,omitempty"`
	MaximumDurationOfExcess              int64                                                                                                                                             `json:"maximumDurationOfExcess,omitempty"`               // Format: int32.
	MinimumBalance                       int64                                                                                                                                             `json:"minimumBalance,omitempty"`                        // Format: int64.
	MinimumBalanceCreditIndicator        string                                                                                                                                            `json:"minimumBalanceCreditIndicator,omitempty"`
	OriginalDefaultBalance               int64                                                                                                                                             `json:"originalDefaultBalance,omitempty"`                // Format: int64.
	PortfolioName                        string                                                                                                                                            `json:"portfolioName,omitempty"`
	Profile                              string                                                                                                                                            `json:"profile,omitempty"`
	RejectedPayments                     int64                                                                                                                                             `json:"rejectedPayments,omitempty"`                      // Format: int32.
	SpecialInstructionIndicator          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator `json:"specialInstructionIndicator,omitempty"`           // SpecialInstructionIndicator.
	StartDateOfAgreement                 string                                                                                                                                            `json:"startDateOfAgreement,omitempty"`                  // Format: date.
	TransferredToConsolidatedDebtAccount string                                                                                                                                            `json:"transferredToConsolidatedDebtAccount,omitempty"`
	VatNumber                            string                                                                                                                                            `json:"vatNumber,omitempty"`
	AdditionalProperties                 map[string]interface{}                                                                                                                            `json:"-"`                                               // All unmatched properties.
}

type marshalCurrentAccount CurrentAccount

var knownKeysCurrentAccount = []string{
	"additionalTradingStyle",
	"address",
	"averageBalance",
	"averageBalanceCreditIndicator",
	"bankAccountIBAN",
	"bankAccountNumber",
	"bankSortCode",
	"businessName",
	"businessTelephoneNumber",
	"changedFacilityNumber",
	"closeDateOfAgreement",
	"companyRegisteredNumber",
	"companyTypeIndicator",
	"creditOverdraftLimit",
	"creditTurnOverNetGross",
	"creditTurnover",
	"currentAccountReportingLevelIndicator",
	"currentBalance",
	"currentBalanceCreditIndicator",
	"debitTurnOverNetGross",
	"debitTurnover",
	"defaultDate",
	"defaultSatisfactionDate",
	"facilityNumber",
	"facilityStatus",
	"facilityStatusDate",
	"facilityStatusEffectiveDate",
	"facilityType",
	"flagSetting",
	"matchStatus",
	"maximumBalance",
	"maximumBalanceCreditIndicator",
	"maximumDurationOfExcess",
	"minimumBalance",
	"minimumBalanceCreditIndicator",
	"originalDefaultBalance",
	"portfolioName",
	"profile",
	"rejectedPayments",
	"specialInstructionIndicator",
	"startDateOfAgreement",
	"transferredToConsolidatedDebtAccount",
	"vatNumber",
}

// UnmarshalJSON decodes JSON.
func (c *CurrentAccount) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCurrentAccount(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCurrentAccount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CurrentAccount(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CurrentAccount) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCurrentAccount(c))
	}

	return marshalUnion(marshalCurrentAccount(c), c.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->address".
//
// AddressLine6.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress struct {
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Line6                string                 `json:"line6,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress = []string{
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"line6",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsAddress(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->companyTypeIndicator".
//
// CompanyTypeIndicator.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                               `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicator(p), p.AdditionalProperties)
}

// TurnoverType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->creditTurnOverNetGross".
//
// TurnoverType.
type TurnoverType struct {
	Code                 TurnoverTypeCode        `json:"code,omitempty"`
	Description          TurnoverTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`                     // All unmatched properties.
}

type marshalTurnoverType TurnoverType

var knownKeysTurnoverType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (t *TurnoverType) UnmarshalJSON(data []byte) error {
	var err error

	mt := marshalTurnoverType(*t)

	err = json.Unmarshal(data, &mt)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysTurnoverType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mt.AdditionalProperties == nil {
			mt.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mt.AdditionalProperties[key] = val
	}

	*t = TurnoverType(mt)

	return nil
}

// MarshalJSON encodes JSON.
func (t TurnoverType) MarshalJSON() ([]byte, error) {
	if len(t.AdditionalProperties) == 0 {
		return json.Marshal(marshalTurnoverType(t))
	}

	return marshalUnion(marshalTurnoverType(t), t.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->debitTurnOverNetGross".
//
// TurnoverType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                                `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGross(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->facilityType".
//
// FacilityType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType struct {
	Code                 int64                                                                                                                                        `json:"code,omitempty"`        // Format: int32.
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                       `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityType(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->flagSetting".
//
// FlagSetting.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                      `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSetting(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->matchStatus".
//
// CompanyMatchStatus.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                      `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatus(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->currentAccounts->items->specialInstructionIndicator".
//
// SpecialInstructionIndicator.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                                      `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicator(p), p.AdditionalProperties)
}

// LoanAccount structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items".
//
// LoanAccount.
type LoanAccount struct {
	AdditionalTradingStyle               string                                                                                                                                         `json:"additionalTradingStyle,omitempty"`
	Address                              *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress                     `json:"address,omitempty"`                              // AddressLine6.
	BusinessName                         string                                                                                                                                         `json:"businessName,omitempty"`
	BusinessTelephoneNumber              string                                                                                                                                         `json:"businessTelephoneNumber,omitempty"`
	ChangedFacilityNumber                string                                                                                                                                         `json:"changedFacilityNumber,omitempty"`
	CloseDateOfAgreement                 string                                                                                                                                         `json:"closeDateOfAgreement,omitempty"`                 // Format: date.
	CompanyRegisteredNumber              string                                                                                                                                         `json:"companyRegisteredNumber,omitempty"`
	CompanyTypeIndicator                 *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator        `json:"companyTypeIndicator,omitempty"`                 // CompanyTypeIndicator.
	CreditOverdraftLimit                 int64                                                                                                                                          `json:"creditOverdraftLimit,omitempty"`                 // Format: int64.
	CurrentBalance                       int64                                                                                                                                          `json:"currentBalance,omitempty"`                       // Format: int64.
	CurrentBalanceCreditIndicator        string                                                                                                                                         `json:"currentBalanceCreditIndicator,omitempty"`
	DefaultDate                          string                                                                                                                                         `json:"defaultDate,omitempty"`                          // Format: date.
	DefaultSatisfactionDate              string                                                                                                                                         `json:"defaultSatisfactionDate,omitempty"`              // Format: date.
	FacilityNumber                       string                                                                                                                                         `json:"facilityNumber,omitempty"`
	// - U: Unclassified - The member is unable to make any statement, whether positive or adverse on the performance of this facility for the period in question. A \'U\' may also be used during the initial period of a facility’s life when the first payment is yet to be made (maximum 2 months excepting \'buy now pay later\' facilities).
	// - D: Dormant – The facility has been inactive for a period of time, usually with a zero balance. This code should be supplied each and every month until the facility is used again or closed.
	// - 0: In advance, up-to-date or less than one payment due but unpaid.
	// - 1: More than one but less than two payments due but unpaid.
	// - 2: More than two but less than three payments due but unpaid.
	// - 3: More than three but less than four payments due but unpaid.
	// - 4: More than four but less than five payments due but unpaid.
	// - 5: More than five but less than six payments due but unpaid.
	// - 6: Six or more payments due but unpaid.
	// - 8: Defaulted Balance- At the date of default the customer had failed to meet the contractual obligations and had failed to satisfactorily respond to requests that the facility be put into order. The circumstances where a facility should be defaulted are more fully explained in the guidance note on the filing of defaults and members are advised to follow this as a guide to best practice.
	// - S: Settled – The facility has been settled within the terms of the agreement terms and is closed.  For Facility Type 15, Current Accounts, this indicates the Current Account was closed with a zero or credit balance.
	FacilityStatus                       string                                                                                                                                         `json:"facilityStatus,omitempty"`
	FacilityStatusDate                   string                                                                                                                                         `json:"facilityStatusDate,omitempty"`                   // Format: date.
	FacilityStatusEffectiveDate          string                                                                                                                                         `json:"facilityStatusEffectiveDate,omitempty"`          // Format: date.
	FacilityType                         *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType                `json:"facilityType,omitempty"`                         // FacilityType.
	FlagSetting                          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting                 `json:"flagSetting,omitempty"`                          // FlagSetting.
	MatchStatus                          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus                 `json:"matchStatus,omitempty"`                          // CompanyMatchStatus.
	OriginalDefaultBalance               int64                                                                                                                                          `json:"originalDefaultBalance,omitempty"`               // Format: int64.
	PaymentAmount                        int64                                                                                                                                          `json:"paymentAmount,omitempty"`                        // Format: int64.
	PaymentFrequency                     *PaymentFrequency                                                                                                                              `json:"paymentFrequency,omitempty"`                     // PaymentFrequency.
	PortfolioName                        string                                                                                                                                         `json:"portfolioName,omitempty"`
	Profile                              string                                                                                                                                         `json:"profile,omitempty"`
	RepaymentPeriod                      int64                                                                                                                                          `json:"repaymentPeriod,omitempty"`                      // Format: int32.
	SpecialInstructionIndicator          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator `json:"specialInstructionIndicator,omitempty"`          // SpecialInstructionIndicator.
	StartDateOfAgreement                 string                                                                                                                                         `json:"startDateOfAgreement,omitempty"`                 // Format: date.
	TransferredToConsolidatedDebtAccount string                                                                                                                                         `json:"transferredToConsolidatedDebtAccount,omitempty"`
	VatNumber                            string                                                                                                                                         `json:"vatNumber,omitempty"`
	AdditionalProperties                 map[string]interface{}                                                                                                                         `json:"-"`                                              // All unmatched properties.
}

type marshalLoanAccount LoanAccount

var knownKeysLoanAccount = []string{
	"additionalTradingStyle",
	"address",
	"businessName",
	"businessTelephoneNumber",
	"changedFacilityNumber",
	"closeDateOfAgreement",
	"companyRegisteredNumber",
	"companyTypeIndicator",
	"creditOverdraftLimit",
	"currentBalance",
	"currentBalanceCreditIndicator",
	"defaultDate",
	"defaultSatisfactionDate",
	"facilityNumber",
	"facilityStatus",
	"facilityStatusDate",
	"facilityStatusEffectiveDate",
	"facilityType",
	"flagSetting",
	"matchStatus",
	"originalDefaultBalance",
	"paymentAmount",
	"paymentFrequency",
	"portfolioName",
	"profile",
	"repaymentPeriod",
	"specialInstructionIndicator",
	"startDateOfAgreement",
	"transferredToConsolidatedDebtAccount",
	"vatNumber",
}

// UnmarshalJSON decodes JSON.
func (l *LoanAccount) UnmarshalJSON(data []byte) error {
	var err error

	ml := marshalLoanAccount(*l)

	err = json.Unmarshal(data, &ml)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysLoanAccount {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ml.AdditionalProperties == nil {
			ml.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ml.AdditionalProperties[key] = val
	}

	*l = LoanAccount(ml)

	return nil
}

// MarshalJSON encodes JSON.
func (l LoanAccount) MarshalJSON() ([]byte, error) {
	if len(l.AdditionalProperties) == 0 {
		return json.Marshal(marshalLoanAccount(l))
	}

	return marshalUnion(marshalLoanAccount(l), l.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->address".
//
// AddressLine6.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress struct {
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Line6                string                 `json:"line6,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress = []string{
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"line6",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsAddress(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->companyTypeIndicator".
//
// CompanyTypeIndicator.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                            `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicator(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->facilityType".
//
// FacilityType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType struct {
	Code                 int64                                                                                                                                     `json:"code,omitempty"`        // Format: int32.
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                    `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityType(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->flagSetting".
//
// FlagSetting.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                   `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSetting(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->matchStatus".
//
// CompanyMatchStatus.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                   `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatus(p), p.AdditionalProperties)
}

// PaymentFrequency structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->paymentFrequency".
//
// PaymentFrequency.
type PaymentFrequency struct {
	Code                 PaymentFrequencyCode        `json:"code,omitempty"`
	Description          PaymentFrequencyDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`                     // All unmatched properties.
}

type marshalPaymentFrequency PaymentFrequency

var knownKeysPaymentFrequency = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PaymentFrequency) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPaymentFrequency(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPaymentFrequency {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PaymentFrequency(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PaymentFrequency) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPaymentFrequency(p))
	}

	return marshalUnion(marshalPaymentFrequency(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->ccds->loanAccounts->items->specialInstructionIndicator".
//
// SpecialInstructionIndicator.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                                   `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicator(p), p.AdditionalProperties)
}

// CharacteristicGroup structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->characteristicGroups->items".
//
// CharacteristicGroup.
type CharacteristicGroup struct {
	Characteristics      []Characteristic       `json:"characteristics,omitempty"`
	Group                string                 `json:"group,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalCharacteristicGroup CharacteristicGroup

var knownKeysCharacteristicGroup = []string{
	"characteristics",
	"group",
}

// UnmarshalJSON decodes JSON.
func (c *CharacteristicGroup) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCharacteristicGroup(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCharacteristicGroup {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CharacteristicGroup(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CharacteristicGroup) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCharacteristicGroup(c))
	}

	return marshalUnion(marshalCharacteristicGroup(c), c.AdditionalProperties)
}

// Characteristic structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->characteristicGroups->items->characteristics->items".
//
// Characteristic.
type Characteristic struct {
	Name                 string                 `json:"name,omitempty"`
	Value                string                 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalCharacteristic Characteristic

var knownKeysCharacteristic = []string{
	"name",
	"value",
}

// UnmarshalJSON decodes JSON.
func (c *Characteristic) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCharacteristic(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCharacteristic {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = Characteristic(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Characteristic) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCharacteristic(c))
	}

	return marshalUnion(marshalCharacteristic(c), c.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->characteristics->items".
//
// Characteristic.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems struct {
	Name                 string                 `json:"name,omitempty"`
	Value                string                 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems = []string{
	"name",
	"value",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCharacteristicsItems(p), p.AdditionalProperties)
}

// Cifas structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->cifas->items".
//
// Cifas.
type Cifas struct {
	Address              *AddressLine5          `json:"address,omitempty"`              // AddressLine5.
	ApplicationDate      string                 `json:"applicationDate,omitempty"`      // Format: date.
	CaseID               string                 `json:"caseId,omitempty"`
	MemberID             int64                  `json:"memberId,omitempty"`             // Format: int32.
	SubjectRole          string                 `json:"subjectRole,omitempty"`
	SubjectRoleQualifier string                 `json:"subjectRoleQualifier,omitempty"`
	SupplierCompany      string                 `json:"supplierCompany,omitempty"`
	SupplierCompanyName  string                 `json:"supplierCompanyName,omitempty"`
	SupplyDate           string                 `json:"supplyDate,omitempty"`           // Format: date.
	AdditionalProperties map[string]interface{} `json:"-"`                              // All unmatched properties.
}

type marshalCifas Cifas

var knownKeysCifas = []string{
	"address",
	"applicationDate",
	"caseId",
	"memberId",
	"subjectRole",
	"subjectRoleQualifier",
	"supplierCompany",
	"supplierCompanyName",
	"supplyDate",
}

// UnmarshalJSON decodes JSON.
func (c *Cifas) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCifas(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCifas {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = Cifas(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Cifas) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCifas(c))
	}

	return marshalUnion(marshalCifas(c), c.AdditionalProperties)
}

// AddressLine5 structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->cifas->items->address".
//
// AddressLine5.
type AddressLine5 struct {
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalAddressLine5 AddressLine5

var knownKeysAddressLine5 = []string{
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (a *AddressLine5) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressLine5(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressLine5 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressLine5(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressLine5) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressLine5(a))
	}

	return marshalUnion(marshalAddressLine5(a), a.AdditionalProperties)
}

// CompanyOfficer structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->companyOfficers->items".
//
// CompanyOfficer.
type CompanyOfficer struct {
	Address                   *AddressLine5AT        `json:"address,omitempty"`                   // AddressLine5AT.
	AppointmentDate           string                 `json:"appointmentDate,omitempty"`           // Format: date.
	AppointmentType           *AppointmentType       `json:"appointmentType,omitempty"`           // AppointmentType.
	CompanyNumber             string                 `json:"companyNumber,omitempty"`
	DateOfBirth               string                 `json:"dateOfBirth,omitempty"`               // Format: date.
	DisqualificationEndDate   string                 `json:"disqualificationEndDate,omitempty"`   // Format: date.
	DisqualificationStartDate string                 `json:"disqualificationStartDate,omitempty"` // Format: date.
	DisqualifiedEndDate       string                 `json:"disqualifiedEndDate,omitempty"`       // Format: date.
	DisqualifiedStartDate     string                 `json:"disqualifiedStartDate,omitempty"`     // Format: date.
	ExclusionCompanies        []ExclusionCompany     `json:"exclusionCompanies,omitempty"`
	Name                      *CompanyOfficerName    `json:"name,omitempty"`                      // CompanyOfficerName.
	Nationality               string                 `json:"nationality,omitempty"`
	Occupation                string                 `json:"occupation,omitempty"`
	PartialDateOfBirth        string                 `json:"partialDateOfBirth,omitempty"`
	PersonID                  string                 `json:"personId,omitempty"`
	ResignationDate           string                 `json:"resignationDate,omitempty"`           // Format: date.
	UnderSection              string                 `json:"underSection,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`                                   // All unmatched properties.
}

type marshalCompanyOfficer CompanyOfficer

var knownKeysCompanyOfficer = []string{
	"address",
	"appointmentDate",
	"appointmentType",
	"companyNumber",
	"dateOfBirth",
	"disqualificationEndDate",
	"disqualificationStartDate",
	"disqualifiedEndDate",
	"disqualifiedStartDate",
	"exclusionCompanies",
	"name",
	"nationality",
	"occupation",
	"partialDateOfBirth",
	"personId",
	"resignationDate",
	"underSection",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyOfficer) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyOfficer(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyOfficer {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyOfficer(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyOfficer) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyOfficer(c))
	}

	return marshalUnion(marshalCompanyOfficer(c), c.AdditionalProperties)
}

// AddressLine5AT structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->companyOfficers->items->address".
//
// AddressLine5AT.
type AddressLine5AT struct {
	AddressType          AddressLine5ATAddressType `json:"addressType,omitempty"`
	Line1                string                    `json:"line1,omitempty"`
	Line2                string                    `json:"line2,omitempty"`
	Line3                string                    `json:"line3,omitempty"`
	Line4                string                    `json:"line4,omitempty"`
	Line5                string                    `json:"line5,omitempty"`
	Postcode             string                    `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`                     // All unmatched properties.
}

type marshalAddressLine5AT AddressLine5AT

var knownKeysAddressLine5AT = []string{
	"addressType",
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (a *AddressLine5AT) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressLine5AT(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressLine5AT {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressLine5AT(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressLine5AT) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressLine5AT(a))
	}

	return marshalUnion(marshalAddressLine5AT(a), a.AdditionalProperties)
}

// AppointmentType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->companyOfficers->items->appointmentType".
//
// AppointmentType.
type AppointmentType struct {
	Code                 AppointmentTypeCode        `json:"code,omitempty"`
	Description          AppointmentTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`                     // All unmatched properties.
}

type marshalAppointmentType AppointmentType

var knownKeysAppointmentType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (a *AppointmentType) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAppointmentType(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAppointmentType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AppointmentType(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AppointmentType) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAppointmentType(a))
	}

	return marshalUnion(marshalAppointmentType(a), a.AdditionalProperties)
}

// ExclusionCompany structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->companyOfficers->items->exclusionCompanies->items".
//
// ExclusionCompany.
type ExclusionCompany struct {
	CompanyName          string                 `json:"companyName,omitempty"`
	CompanyNumber        string                 `json:"companyNumber,omitempty"`
	ExclusionEndDate     string                 `json:"exclusionEndDate,omitempty"`   // Format: date.
	ExclusionStartDate   string                 `json:"exclusionStartDate,omitempty"` // Format: date.
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalExclusionCompany ExclusionCompany

var knownKeysExclusionCompany = []string{
	"companyName",
	"companyNumber",
	"exclusionEndDate",
	"exclusionStartDate",
}

// UnmarshalJSON decodes JSON.
func (e *ExclusionCompany) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalExclusionCompany(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysExclusionCompany {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ExclusionCompany(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ExclusionCompany) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalExclusionCompany(e))
	}

	return marshalUnion(marshalExclusionCompany(e), e.AdditionalProperties)
}

// CompanyOfficerName structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->companyOfficers->items->name".
//
// CompanyOfficerName.
type CompanyOfficerName struct {
	FirstName            string                 `json:"firstName,omitempty"`
	Honours              string                 `json:"honours,omitempty"`
	Surname              string                 `json:"surname,omitempty"`
	Titles               string                 `json:"titles,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                   // All unmatched properties.
}

type marshalCompanyOfficerName CompanyOfficerName

var knownKeysCompanyOfficerName = []string{
	"firstName",
	"honours",
	"surname",
	"titles",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyOfficerName) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyOfficerName(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyOfficerName {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyOfficerName(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyOfficerName) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyOfficerName(c))
	}

	return marshalUnion(marshalCompanyOfficerName(c), c.AdditionalProperties)
}

// Detrimental structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental".
//
// Detrimental.
type Detrimental struct {
	Ccj                  *CCJ                   `json:"ccj,omitempty"`      // CCJ.
	Gazettes             []Gazette              `json:"gazettes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalDetrimental Detrimental

var knownKeysDetrimental = []string{
	"ccj",
	"gazettes",
}

// UnmarshalJSON decodes JSON.
func (d *Detrimental) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDetrimental(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDetrimental {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = Detrimental(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d Detrimental) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDetrimental(d))
	}

	return marshalUnion(marshalDetrimental(d), d.AdditionalProperties)
}

// CCJ structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj".
//
// CCJ.
type CCJ struct {
	CurrentCcjCount        int64                  `json:"currentCcjCount,omitempty"`        // Format: int32.
	LatestCcjDate          string                 `json:"latestCcjDate,omitempty"`          // Format: date.
	LatestSatisfiedCcjDate string                 `json:"latestSatisfiedCcjDate,omitempty"` // Format: date.
	LocationCcjCount       int64                  `json:"locationCcjCount,omitempty"`       // Format: int32.
	LocationCcjs           []LocationCcjDetails   `json:"locationCcjs,omitempty"`
	SatisfiedCcjCount      int64                  `json:"satisfiedCcjCount,omitempty"`      // Format: int32.
	SubjectCcjs            []SubjectCcjDetails    `json:"subjectCcjs,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`                                // All unmatched properties.
}

type marshalCCJ CCJ

var knownKeysCCJ = []string{
	"currentCcjCount",
	"latestCcjDate",
	"latestSatisfiedCcjDate",
	"locationCcjCount",
	"locationCcjs",
	"satisfiedCcjCount",
	"subjectCcjs",
}

// UnmarshalJSON decodes JSON.
func (c *CCJ) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCCJ(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCCJ {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CCJ(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CCJ) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCCJ(c))
	}

	return marshalUnion(marshalCCJ(c), c.AdditionalProperties)
}

// LocationCcjDetails structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->locationCcjs->items".
//
// LocationCcjDetails.
type LocationCcjDetails struct {
	Amount                       float64                                                                                                                                      `json:"amount,omitempty"`
	CaseNumber                   string                                                                                                                                       `json:"caseNumber,omitempty"`
	Court                        string                                                                                                                                       `json:"court,omitempty"`
	JudgementDate                string                                                                                                                                       `json:"judgementDate,omitempty"`                // Format: date.
	LocationMatchedCompanyName   string                                                                                                                                       `json:"locationMatchedCompanyName,omitempty"`
	LocationMatchedCompanyNumber string                                                                                                                                       `json:"locationMatchedCompanyNumber,omitempty"`
	MatchStatus                  *MatchStatus                                                                                                                                 `json:"matchStatus,omitempty"`                  // MatchStatus.
	SatisfiedDate                string                                                                                                                                       `json:"satisfiedDate,omitempty"`                // Format: date.
	SuppliedAddress              *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress `json:"suppliedAddress,omitempty"`              // Address.
	SuppliedDefendantCompanyName string                                                                                                                                       `json:"suppliedDefendantCompanyName,omitempty"`
	Type                         *CcjType                                                                                                                                     `json:"type,omitempty"`                         // CcjType.
	AdditionalProperties         map[string]interface{}                                                                                                                       `json:"-"`                                      // All unmatched properties.
}

type marshalLocationCcjDetails LocationCcjDetails

var knownKeysLocationCcjDetails = []string{
	"amount",
	"caseNumber",
	"court",
	"judgementDate",
	"locationMatchedCompanyName",
	"locationMatchedCompanyNumber",
	"matchStatus",
	"satisfiedDate",
	"suppliedAddress",
	"suppliedDefendantCompanyName",
	"type",
}

// UnmarshalJSON decodes JSON.
func (l *LocationCcjDetails) UnmarshalJSON(data []byte) error {
	var err error

	ml := marshalLocationCcjDetails(*l)

	err = json.Unmarshal(data, &ml)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysLocationCcjDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ml.AdditionalProperties == nil {
			ml.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ml.AdditionalProperties[key] = val
	}

	*l = LocationCcjDetails(ml)

	return nil
}

// MarshalJSON encodes JSON.
func (l LocationCcjDetails) MarshalJSON() ([]byte, error) {
	if len(l.AdditionalProperties) == 0 {
		return json.Marshal(marshalLocationCcjDetails(l))
	}

	return marshalUnion(marshalLocationCcjDetails(l), l.AdditionalProperties)
}

// MatchStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->locationCcjs->items->matchStatus".
//
// MatchStatus.
type MatchStatus struct {
	Code                 MatchStatusCode        `json:"code,omitempty"`
	Description          MatchStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalMatchStatus MatchStatus

var knownKeysMatchStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (m *MatchStatus) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMatchStatus(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMatchStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MatchStatus(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MatchStatus) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMatchStatus(m))
	}

	return marshalUnion(marshalMatchStatus(m), m.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->locationCcjs->items->suppliedAddress".
//
// Address.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress struct {
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress = []string{
	"line1",
	"line2",
	"line3",
	"line4",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjLocationCcjsItemsSuppliedAddress(p), p.AdditionalProperties)
}

// CcjType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->locationCcjs->items->type".
//
// CcjType.
type CcjType struct {
	Code                 CcjTypeCode            `json:"code,omitempty"`
	Description          CcjTypeDescription     `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalCcjType CcjType

var knownKeysCcjType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (c *CcjType) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCcjType(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCcjType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CcjType(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CcjType) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCcjType(c))
	}

	return marshalUnion(marshalCcjType(c), c.AdditionalProperties)
}

// SubjectCcjDetails structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->subjectCcjs->items".
//
// SubjectCcjDetails.
type SubjectCcjDetails struct {
	Amount               float64                                                                                                                                 `json:"amount,omitempty"`
	CaseNumber           string                                                                                                                                  `json:"caseNumber,omitempty"`
	Court                string                                                                                                                                  `json:"court,omitempty"`
	JudgementDate        string                                                                                                                                  `json:"judgementDate,omitempty"` // Format: date.
	MatchStatus          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus `json:"matchStatus,omitempty"`   // MatchStatus.
	SatisfiedDate        string                                                                                                                                  `json:"satisfiedDate,omitempty"` // Format: date.
	Type                 *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType        `json:"type,omitempty"`          // CcjType.
	AdditionalProperties map[string]interface{}                                                                                                                  `json:"-"`                       // All unmatched properties.
}

type marshalSubjectCcjDetails SubjectCcjDetails

var knownKeysSubjectCcjDetails = []string{
	"amount",
	"caseNumber",
	"court",
	"judgementDate",
	"matchStatus",
	"satisfiedDate",
	"type",
}

// UnmarshalJSON decodes JSON.
func (s *SubjectCcjDetails) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalSubjectCcjDetails(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysSubjectCcjDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = SubjectCcjDetails(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s SubjectCcjDetails) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalSubjectCcjDetails(s))
	}

	return marshalUnion(marshalSubjectCcjDetails(s), s.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->subjectCcjs->items->matchStatus".
//
// MatchStatus.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                            `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatus(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->ccj->subjectCcjs->items->type".
//
// CcjType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                     `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsType(p), p.AdditionalProperties)
}

// Gazette structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->detrimental->gazettes->items".
//
// Gazette.
type Gazette struct {
	ActionDate           string                 `json:"actionDate,omitempty"`        // Format: date.
	Code                 GazetteCode            `json:"code,omitempty"`
	Dated                string                 `json:"dated,omitempty"`             // Format: date.
	Description          string                 `json:"description,omitempty"`
	Priority             int64                  `json:"priority,omitempty"`          // Format: int32.
	Published            string                 `json:"published,omitempty"`
	PublishedDocument    string                 `json:"publishedDocument,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                           // All unmatched properties.
}

type marshalGazette Gazette

var knownKeysGazette = []string{
	"actionDate",
	"code",
	"dated",
	"description",
	"priority",
	"published",
	"publishedDocument",
}

// UnmarshalJSON decodes JSON.
func (g *Gazette) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGazette(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGazette {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = Gazette(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g Gazette) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGazette(g))
	}

	return marshalUnion(marshalGazette(g), g.AdditionalProperties)
}

// Financials structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->financials->items".
//
// Financials.
type Financials struct {
	AccountingAndPeriodData *ExtendedAccountingAndPeriodData `json:"accountingAndPeriodData,omitempty"` // ExtendedAccountingAndPeriodData.
	FinancialData           *FinancialData                   `json:"financialData,omitempty"`           // FinancialData.
	AdditionalProperties    map[string]interface{}           `json:"-"`                                 // All unmatched properties.
}

type marshalFinancials Financials

var knownKeysFinancials = []string{
	"accountingAndPeriodData",
	"financialData",
}

// UnmarshalJSON decodes JSON.
func (f *Financials) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFinancials(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFinancials {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = Financials(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f Financials) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFinancials(f))
	}

	return marshalUnion(marshalFinancials(f), f.AdditionalProperties)
}

// ExtendedAccountingAndPeriodData structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->financials->items->accountingAndPeriodData".
//
// ExtendedAccountingAndPeriodData.
type ExtendedAccountingAndPeriodData struct {
	AccountQualified     bool                   `json:"accountQualified,omitempty"`
	Consolidated         bool                   `json:"consolidated,omitempty"`
	Currency             string                 `json:"currency,omitempty"`
	NumberOfMonths       float64                `json:"numberOfMonths,omitempty"`
	YearEndDate          string                 `json:"yearEndDate,omitempty"`      // Format: date.
	AdditionalProperties map[string]interface{} `json:"-"`                          // All unmatched properties.
}

type marshalExtendedAccountingAndPeriodData ExtendedAccountingAndPeriodData

var knownKeysExtendedAccountingAndPeriodData = []string{
	"accountQualified",
	"consolidated",
	"currency",
	"numberOfMonths",
	"yearEndDate",
}

// UnmarshalJSON decodes JSON.
func (e *ExtendedAccountingAndPeriodData) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalExtendedAccountingAndPeriodData(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysExtendedAccountingAndPeriodData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ExtendedAccountingAndPeriodData(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ExtendedAccountingAndPeriodData) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalExtendedAccountingAndPeriodData(e))
	}

	return marshalUnion(marshalExtendedAccountingAndPeriodData(e), e.AdditionalProperties)
}

// FinancialData structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->financials->items->financialData".
//
// FinancialData.
type FinancialData struct {
	BankOverdraft                                 float64                `json:"bankOverdraft,omitempty"`
	CapitalRedemptionReserves                     float64                `json:"capitalRedemptionReserves,omitempty"`
	CapitalReserves                               float64                `json:"capitalReserves,omitempty"`
	CashAndEquivalent                             float64                `json:"cashAndEquivalent,omitempty"`
	ContingentLiability                           float64                `json:"contingentLiability,omitempty"`
	CreditLimit                                   float64                `json:"creditLimit,omitempty"`
	CurrentAssetsInterCompanyBalances             float64                `json:"currentAssetsInterCompanyBalances,omitempty"`
	CurrentLiabilitiesBankLoans                   float64                `json:"currentLiabilitiesBankLoans,omitempty"`
	CurrentLiabilitiesBankLoansOrOverdraft        float64                `json:"currentLiabilitiesBankLoansOrOverdraft,omitempty"`
	CurrentLiabilitiesDirectorsLoans              float64                `json:"currentLiabilitiesDirectorsLoans,omitempty"`
	CurrentLiabilitiesFinanceLease                float64                `json:"currentLiabilitiesFinanceLease,omitempty"`
	CurrentLiabilitiesFinanceOrHirePurchase       float64                `json:"currentLiabilitiesFinanceOrHirePurchase,omitempty"`
	CurrentLiabilitiesHirePurchase                float64                `json:"currentLiabilitiesHirePurchase,omitempty"`
	CurrentLiabilitiesInterCompanyBalances        float64                `json:"currentLiabilitiesInterCompanyBalances,omitempty"`
	Depreciation                                  float64                `json:"depreciation,omitempty"`
	DirectorsFees                                 float64                `json:"directorsFees,omitempty"`
	Dividends                                     float64                `json:"dividends,omitempty"`
	ExceptionalCharges                            float64                `json:"exceptionalCharges,omitempty"`
	ExceptionalIncome                             float64                `json:"exceptionalIncome,omitempty"`
	Exports                                       float64                `json:"exports,omitempty"`
	GoodwillReserves                              float64                `json:"goodwillReserves,omitempty"`
	GrossProfit                                   float64                `json:"grossProfit,omitempty"`
	IncreaseInCash                                float64                `json:"increaseInCash,omitempty"`
	IntangibleAssets                              float64                `json:"intangibleAssets,omitempty"`
	InterestPaid                                  float64                `json:"interestPaid,omitempty"`
	InterestReceivable                            float64                `json:"interestReceivable,omitempty"`
	Investments                                   float64                `json:"investments,omitempty"`
	LongTermDirectorsLoans                        float64                `json:"longTermDirectorsLoans,omitempty"`
	LongTermLiabilitiesBankLoans                  float64                `json:"longTermLiabilitiesBankLoans,omitempty"`
	LongTermLiabilitiesFinanceLeaseObligation     float64                `json:"longTermLiabilitiesFinanceLeaseObligation,omitempty"`
	LongTermLiabilitiesFinanceLeaseOrHirePurchase float64                `json:"longTermLiabilitiesFinanceLeaseOrHirePurchase,omitempty"`
	LongTermLiabilitiesHirePurchaseLoan           float64                `json:"longTermLiabilitiesHirePurchaseLoan,omitempty"`
	LongTermLiabilitiesOwedToGroupCompanies       float64                `json:"longTermLiabilitiesOwedToGroupCompanies,omitempty"`
	NetCashflowBeforeFinancing                    float64                `json:"netCashflowBeforeFinancing,omitempty"`
	NetCashflowFromFinancing                      float64                `json:"netCashflowFromFinancing,omitempty"`
	NetCashflowFromOperatingActivities            float64                `json:"netCashflowFromOperatingActivities,omitempty"`
	NetCashflowFromROIAndServicing                float64                `json:"netCashflowFromROIAndServicing,omitempty"`
	NumberofEmployees                             float64                `json:"numberofEmployees,omitempty"`
	OperatingProfit                               float64                `json:"operatingProfit,omitempty"`
	OtherCurrentAssets                            float64                `json:"otherCurrentAssets,omitempty"`
	OtherCurrentLiabilities                       float64                `json:"otherCurrentLiabilities,omitempty"`
	OtherLongTermBorrowing                        float64                `json:"otherLongTermBorrowing,omitempty"`
	OtherLongTermLiabilities                      float64                `json:"otherLongTermLiabilities,omitempty"`
	OtherReserves                                 float64                `json:"otherReserves,omitempty"`
	OtherShortTermBorrowing                       float64                `json:"otherShortTermBorrowing,omitempty"`
	PaidUpEquity                                  float64                `json:"paidUpEquity,omitempty"`
	ProfitAfterTax                                float64                `json:"profitAfterTax,omitempty"`
	ProfitAndLossAccount                          float64                `json:"profitAndLossAccount,omitempty"`
	ProfitBeforeTax                               float64                `json:"profitBeforeTax,omitempty"`
	RetainedEarnings                              float64                `json:"retainedEarnings,omitempty"`
	RetainedProfits                               float64                `json:"retainedProfits,omitempty"`
	RevaluationReserves                           float64                `json:"revaluationReserves,omitempty"`
	SharePremiumAccount                           float64                `json:"sharePremiumAccount,omitempty"`
	ShareholdersFunds                             float64                `json:"shareholdersFunds,omitempty"`
	Stock                                         float64                `json:"stock,omitempty"`
	TangibleFixedAssets                           float64                `json:"tangibleFixedAssets,omitempty"`
	TangibleNetWorth                              float64                `json:"tangibleNetWorth,omitempty"`
	Taxation                                      float64                `json:"taxation,omitempty"`
	TotalAssets                                   float64                `json:"totalAssets,omitempty"`
	TotalCurrentAssets                            float64                `json:"totalCurrentAssets,omitempty"`
	TotalCurrentLiabilities                       float64                `json:"totalCurrentLiabilities,omitempty"`
	TotalFixedAssets                              float64                `json:"totalFixedAssets,omitempty"`
	TotalLiabilities                              float64                `json:"totalLiabilities,omitempty"`
	TotalLongTermBorrowings                       float64                `json:"totalLongTermBorrowings,omitempty"`
	TotalLongTermLiabilities                      float64                `json:"totalLongTermLiabilities,omitempty"`
	TotalOtherLongTermLiabilities                 float64                `json:"totalOtherLongTermLiabilities,omitempty"`
	TotalReserves                                 float64                `json:"totalReserves,omitempty"`
	TotalShortTermBorrowings                      float64                `json:"totalShortTermBorrowings,omitempty"`
	TradeCreditors                                float64                `json:"tradeCreditors,omitempty"`
	TradeDebtors                                  float64                `json:"tradeDebtors,omitempty"`
	Turnover                                      float64                `json:"turnover,omitempty"`
	Wages                                         float64                `json:"wages,omitempty"`
	WorkingCapital                                float64                `json:"workingCapital,omitempty"`
	AdditionalProperties                          map[string]interface{} `json:"-"`                                                       // All unmatched properties.
}

type marshalFinancialData FinancialData

var knownKeysFinancialData = []string{
	"bankOverdraft",
	"capitalRedemptionReserves",
	"capitalReserves",
	"cashAndEquivalent",
	"contingentLiability",
	"creditLimit",
	"currentAssetsInterCompanyBalances",
	"currentLiabilitiesBankLoans",
	"currentLiabilitiesBankLoansOrOverdraft",
	"currentLiabilitiesDirectorsLoans",
	"currentLiabilitiesFinanceLease",
	"currentLiabilitiesFinanceOrHirePurchase",
	"currentLiabilitiesHirePurchase",
	"currentLiabilitiesInterCompanyBalances",
	"depreciation",
	"directorsFees",
	"dividends",
	"exceptionalCharges",
	"exceptionalIncome",
	"exports",
	"goodwillReserves",
	"grossProfit",
	"increaseInCash",
	"intangibleAssets",
	"interestPaid",
	"interestReceivable",
	"investments",
	"longTermDirectorsLoans",
	"longTermLiabilitiesBankLoans",
	"longTermLiabilitiesFinanceLeaseObligation",
	"longTermLiabilitiesFinanceLeaseOrHirePurchase",
	"longTermLiabilitiesHirePurchaseLoan",
	"longTermLiabilitiesOwedToGroupCompanies",
	"netCashflowBeforeFinancing",
	"netCashflowFromFinancing",
	"netCashflowFromOperatingActivities",
	"netCashflowFromROIAndServicing",
	"numberofEmployees",
	"operatingProfit",
	"otherCurrentAssets",
	"otherCurrentLiabilities",
	"otherLongTermBorrowing",
	"otherLongTermLiabilities",
	"otherReserves",
	"otherShortTermBorrowing",
	"paidUpEquity",
	"profitAfterTax",
	"profitAndLossAccount",
	"profitBeforeTax",
	"retainedEarnings",
	"retainedProfits",
	"revaluationReserves",
	"sharePremiumAccount",
	"shareholdersFunds",
	"stock",
	"tangibleFixedAssets",
	"tangibleNetWorth",
	"taxation",
	"totalAssets",
	"totalCurrentAssets",
	"totalCurrentLiabilities",
	"totalFixedAssets",
	"totalLiabilities",
	"totalLongTermBorrowings",
	"totalLongTermLiabilities",
	"totalOtherLongTermLiabilities",
	"totalReserves",
	"totalShortTermBorrowings",
	"tradeCreditors",
	"tradeDebtors",
	"turnover",
	"wages",
	"workingCapital",
}

// UnmarshalJSON decodes JSON.
func (f *FinancialData) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFinancialData(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFinancialData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = FinancialData(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f FinancialData) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFinancialData(f))
	}

	return marshalUnion(marshalFinancialData(f), f.AdditionalProperties)
}

// GroupStructure structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->groupStructure".
//
// GroupStructure.
type GroupStructure struct {
	ImmediateParentCompanyName   string                 `json:"immediateParentCompanyName,omitempty"`
	ImmediateParentCompanyNumber string                 `json:"immediateParentCompanyNumber,omitempty"`
	IssuedShares                 []IssuedShares         `json:"issuedShares,omitempty"`
	Shareholders                 []Shareholder          `json:"shareholders,omitempty"`
	UltimateParentCompanyName    string                 `json:"ultimateParentCompanyName,omitempty"`
	UltimateParentCompanyNumber  string                 `json:"ultimateParentCompanyNumber,omitempty"`
	AdditionalProperties         map[string]interface{} `json:"-"`                                      // All unmatched properties.
}

type marshalGroupStructure GroupStructure

var knownKeysGroupStructure = []string{
	"immediateParentCompanyName",
	"immediateParentCompanyNumber",
	"issuedShares",
	"shareholders",
	"ultimateParentCompanyName",
	"ultimateParentCompanyNumber",
}

// UnmarshalJSON decodes JSON.
func (g *GroupStructure) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGroupStructure(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGroupStructure {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GroupStructure(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GroupStructure) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGroupStructure(g))
	}

	return marshalUnion(marshalGroupStructure(g), g.AdditionalProperties)
}

// IssuedShares structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->groupStructure->issuedShares->items".
//
// IssuedShares.
type IssuedShares struct {
	TotalIssuedCurrency  string                 `json:"totalIssuedCurrency,omitempty"`
	TotalIssuedNumber    int64                  `json:"totalIssuedNumber,omitempty"`   // Format: int32.
	TotalIssuedType      string                 `json:"totalIssuedType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalIssuedShares IssuedShares

var knownKeysIssuedShares = []string{
	"totalIssuedCurrency",
	"totalIssuedNumber",
	"totalIssuedType",
}

// UnmarshalJSON decodes JSON.
func (i *IssuedShares) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalIssuedShares(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysIssuedShares {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = IssuedShares(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i IssuedShares) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalIssuedShares(i))
	}

	return marshalUnion(marshalIssuedShares(i), i.AdditionalProperties)
}

// Shareholder structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->groupStructure->shareholders->items".
//
// Shareholder.
type Shareholder struct {
	CompanyName          string                 `json:"companyName,omitempty"`
	CompanyNumber        string                 `json:"companyNumber,omitempty"`
	Forename             string                 `json:"forename,omitempty"`
	Initial              string                 `json:"initial,omitempty"`
	PercentageOfOrdinary float64                `json:"percentageOfOrdinary,omitempty"`
	Type                 *ShareholderType       `json:"shareholderType,omitempty"`      // ShareholderType.
	Shares               []Share                `json:"shares,omitempty"`
	Surname              string                 `json:"surname,omitempty"`
	Title                string                 `json:"title,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                              // All unmatched properties.
}

type marshalShareholder Shareholder

var knownKeysShareholder = []string{
	"companyName",
	"companyNumber",
	"forename",
	"initial",
	"percentageOfOrdinary",
	"shareholderType",
	"shares",
	"surname",
	"title",
}

// UnmarshalJSON decodes JSON.
func (s *Shareholder) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalShareholder(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysShareholder {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = Shareholder(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s Shareholder) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalShareholder(s))
	}

	return marshalUnion(marshalShareholder(s), s.AdditionalProperties)
}

// ShareholderType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->groupStructure->shareholders->items->shareholderType".
//
// ShareholderType.
type ShareholderType struct {
	Code                 ShareholderTypeCode        `json:"code,omitempty"`
	Description          ShareholderTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`                     // All unmatched properties.
}

type marshalShareholderType ShareholderType

var knownKeysShareholderType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (s *ShareholderType) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalShareholderType(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysShareholderType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = ShareholderType(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ShareholderType) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalShareholderType(s))
	}

	return marshalUnion(marshalShareholderType(s), s.AdditionalProperties)
}

// Share structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->groupStructure->shareholders->items->shares->items".
//
// Share.
type Share struct {
	Joint                bool                   `json:"joint,omitempty"`
	NumberOfShares       int64                  `json:"numberOfShares,omitempty"`     // Format: int32.
	Currency             string                 `json:"shareCurrency,omitempty"`
	TotalValueOfShares   float64                `json:"totalValueOfShares,omitempty"`
	TypeOfShare          string                 `json:"typeOfShare,omitempty"`
	ValuePerShare        float64                `json:"valuePerShare,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalShare Share

var knownKeysShare = []string{
	"joint",
	"numberOfShares",
	"shareCurrency",
	"totalValueOfShares",
	"typeOfShare",
	"valuePerShare",
}

// UnmarshalJSON decodes JSON.
func (s *Share) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalShare(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysShare {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = Share(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s Share) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalShare(s))
	}

	return marshalUnion(marshalShare(s), s.AdditionalProperties)
}

// History structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->history".
//
// History.
type History struct {
	PreviousLatestNameChangeDate             string                 `json:"previousLatestNameChangeDate,omitempty"`             // Format: date.
	PreviousNameCount                        int64                  `json:"previousNameCount,omitempty"`                        // Format: int32.
	PreviousNames                            []PreviousNames        `json:"previousNames,omitempty"`
	PreviousRegisteredOfficeAddresses        []AddressLine5Date     `json:"previousRegisteredOfficeAddresses,omitempty"`
	PreviousRegisteredOfficeCount            int64                  `json:"previousRegisteredOfficeCount,omitempty"`            // Format: int32.
	PreviousRegisteredOfficeLatestChangeDate string                 `json:"previousRegisteredOfficeLatestChangeDate,omitempty"` // Format: date.
	AdditionalProperties                     map[string]interface{} `json:"-"`                                                  // All unmatched properties.
}

type marshalHistory History

var knownKeysHistory = []string{
	"previousLatestNameChangeDate",
	"previousNameCount",
	"previousNames",
	"previousRegisteredOfficeAddresses",
	"previousRegisteredOfficeCount",
	"previousRegisteredOfficeLatestChangeDate",
}

// UnmarshalJSON decodes JSON.
func (h *History) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHistory(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHistory {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mh.AdditionalProperties == nil {
			mh.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mh.AdditionalProperties[key] = val
	}

	*h = History(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h History) MarshalJSON() ([]byte, error) {
	if len(h.AdditionalProperties) == 0 {
		return json.Marshal(marshalHistory(h))
	}

	return marshalUnion(marshalHistory(h), h.AdditionalProperties)
}

// PreviousNames structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->history->previousNames->items".
//
// PreviousNames.
type PreviousNames struct {
	ChangeDate           string                 `json:"changeDate,omitempty"` // Format: date.
	Name                 string                 `json:"name,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalPreviousNames PreviousNames

var knownKeysPreviousNames = []string{
	"changeDate",
	"name",
}

// UnmarshalJSON decodes JSON.
func (p *PreviousNames) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPreviousNames(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPreviousNames {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PreviousNames(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PreviousNames) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPreviousNames(p))
	}

	return marshalUnion(marshalPreviousNames(p), p.AdditionalProperties)
}

// AddressLine5Date structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->history->previousRegisteredOfficeAddresses->items".
//
// AddressLine5Date.
type AddressLine5Date struct {
	ChangeDate           string                 `json:"changeDate,omitempty"` // Format: date.
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalAddressLine5Date AddressLine5Date

var knownKeysAddressLine5Date = []string{
	"changeDate",
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (a *AddressLine5Date) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressLine5Date(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressLine5Date {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressLine5Date(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressLine5Date) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressLine5Date(a))
	}

	return marshalUnion(marshalAddressLine5Date(a), a.AdditionalProperties)
}

// Identification structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification".
//
// Identification.
type Identification struct {
	AccountReferenceDate            string                                                                                                                                            `json:"accountReferenceDate,omitempty"`
	AccountsFiledDate               string                                                                                                                                            `json:"accountsFiledDate,omitempty"`               // Format: date.
	AccountsType                    *AccountsType                                                                                                                                     `json:"accountsType,omitempty"`                    // AccountsType.
	CompanyNumber                   string                                                                                                                                            `json:"companyNumber,omitempty"`
	CompanyType                     *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType                           `json:"companyType,omitempty"`                     // CompanyType.
	CreationDate                    string                                                                                                                                            `json:"creationDate,omitempty"`                    // Format: date.
	Dissolved                       bool                                                                                                                                              `json:"dissolved,omitempty"`
	DissolvedDate                   string                                                                                                                                            `json:"dissolvedDate,omitempty"`                   // Format: date.
	EquifaxIndustryClassification   *IndustryClassification                                                                                                                           `json:"equifaxIndustryClassification,omitempty"`   // IndustryClassification.
	EstablishedDate                 string                                                                                                                                            `json:"establishedDate,omitempty"`                 // Format: date.
	IncorporationDate               string                                                                                                                                            `json:"incorporationDate,omitempty"`               // Format: date.
	LatestAccountsFiledDate         string                                                                                                                                            `json:"latestAccountsFiledDate,omitempty"`         // Format: date.
	LatestAnalysedAccountDate       string                                                                                                                                            `json:"latestAnalysedAccountDate,omitempty"`       // Format: date.
	LocationType                    *AddressIndicator                                                                                                                                 `json:"locationType,omitempty"`                    // AddressIndicator.
	Name                            string                                                                                                                                            `json:"name,omitempty"`
	NextAnnualReturnDue             string                                                                                                                                            `json:"nextAnnualReturnDue,omitempty"`             // Format: date.
	NonLimitedEmployeeNumber        int64                                                                                                                                             `json:"nonLimitedEmployeeNumber,omitempty"`        // Format: int32.
	RegisteredOffice                *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice                      `json:"registeredOffice,omitempty"`                // AddressLine5Date.
	ReturnMadeUpDate                string                                                                                                                                            `json:"returnMadeUpDate,omitempty"`                // Format: date.
	StandardIndustryClassifications []PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems `json:"standardIndustryClassifications,omitempty"`
	TradingAddresses                []AddressLine5Indicator                                                                                                                           `json:"tradingAddresses,omitempty"`
	TradingStyle                    string                                                                                                                                            `json:"tradingStyle,omitempty"`
	UpdateDate                      string                                                                                                                                            `json:"updateDate,omitempty"`                      // Format: date.
	WebAddress                      string                                                                                                                                            `json:"webAddress,omitempty"`
	AdditionalProperties            map[string]interface{}                                                                                                                            `json:"-"`                                         // All unmatched properties.
}

type marshalIdentification Identification

var knownKeysIdentification = []string{
	"accountReferenceDate",
	"accountsFiledDate",
	"accountsType",
	"companyNumber",
	"companyType",
	"creationDate",
	"dissolved",
	"dissolvedDate",
	"equifaxIndustryClassification",
	"establishedDate",
	"incorporationDate",
	"latestAccountsFiledDate",
	"latestAnalysedAccountDate",
	"locationType",
	"name",
	"nextAnnualReturnDue",
	"nonLimitedEmployeeNumber",
	"registeredOffice",
	"returnMadeUpDate",
	"standardIndustryClassifications",
	"tradingAddresses",
	"tradingStyle",
	"updateDate",
	"webAddress",
}

// UnmarshalJSON decodes JSON.
func (i *Identification) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalIdentification(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysIdentification {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = Identification(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i Identification) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalIdentification(i))
	}

	return marshalUnion(marshalIdentification(i), i.AdditionalProperties)
}

// AccountsType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->accountsType".
//
// AccountsType.
type AccountsType struct {
	Code                 int64                   `json:"code,omitempty"`        // Format: int32.
	Description          AccountsTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`                     // All unmatched properties.
}

type marshalAccountsType AccountsType

var knownKeysAccountsType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (a *AccountsType) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAccountsType(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAccountsType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AccountsType(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AccountsType) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAccountsType(a))
	}

	return marshalUnion(marshalAccountsType(a), a.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->companyType".
//
// CompanyType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                            `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyType(p), p.AdditionalProperties)
}

// IndustryClassification structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->equifaxIndustryClassification".
//
// IndustryClassification.
type IndustryClassification struct {
	Code                 string                 `json:"code,omitempty"`
	Description          string                 `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalIndustryClassification IndustryClassification

var knownKeysIndustryClassification = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (i *IndustryClassification) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalIndustryClassification(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysIndustryClassification {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = IndustryClassification(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i IndustryClassification) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalIndustryClassification(i))
	}

	return marshalUnion(marshalIndustryClassification(i), i.AdditionalProperties)
}

// AddressIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->locationType".
//
// AddressIndicator.
type AddressIndicator struct {
	Code                 AddressIndicatorCode        `json:"code,omitempty"`
	Description          AddressIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`                     // All unmatched properties.
}

type marshalAddressIndicator AddressIndicator

var knownKeysAddressIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (a *AddressIndicator) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressIndicator(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressIndicator(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressIndicator) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressIndicator(a))
	}

	return marshalUnion(marshalAddressIndicator(a), a.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->registeredOffice".
//
// AddressLine5Date.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice struct {
	ChangeDate           string                 `json:"changeDate,omitempty"` // Format: date.
	Line1                string                 `json:"line1,omitempty"`
	Line2                string                 `json:"line2,omitempty"`
	Line3                string                 `json:"line3,omitempty"`
	Line4                string                 `json:"line4,omitempty"`
	Line5                string                 `json:"line5,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                    // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice = []string{
	"changeDate",
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"postcode",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationRegisteredOffice(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->standardIndustryClassifications->items".
//
// IndustryClassification.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems struct {
	Code                 string                 `json:"code,omitempty"`
	Description          string                 `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationStandardIndustryClassificationsItems(p), p.AdditionalProperties)
}

// AddressLine5Indicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->tradingAddresses->items".
//
// AddressLine5Indicator.
type AddressLine5Indicator struct {
	AddressIndicator     *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator `json:"addressIndicator,omitempty"` // AddressIndicator.
	BpHeading            string                                                                                                                                            `json:"bpHeading,omitempty"`
	BpStreet             string                                                                                                                                            `json:"bpStreet,omitempty"`
	CompanyName          string                                                                                                                                            `json:"companyName,omitempty"`
	Email                string                                                                                                                                            `json:"email,omitempty"`
	Fax                  string                                                                                                                                            `json:"fax,omitempty"`
	Line1                string                                                                                                                                            `json:"line1,omitempty"`
	Line2                string                                                                                                                                            `json:"line2,omitempty"`
	Line3                string                                                                                                                                            `json:"line3,omitempty"`
	Line4                string                                                                                                                                            `json:"line4,omitempty"`
	Line5                string                                                                                                                                            `json:"line5,omitempty"`
	Mobile               string                                                                                                                                            `json:"mobile,omitempty"`
	Phone                string                                                                                                                                            `json:"phone,omitempty"`
	Postcode             string                                                                                                                                            `json:"postcode,omitempty"`
	PremiseType          *PremiseType                                                                                                                                      `json:"premiseType,omitempty"`      // PremiseType.
	AdditionalProperties map[string]interface{}                                                                                                                            `json:"-"`                          // All unmatched properties.
}

type marshalAddressLine5Indicator AddressLine5Indicator

var knownKeysAddressLine5Indicator = []string{
	"addressIndicator",
	"bpHeading",
	"bpStreet",
	"companyName",
	"email",
	"fax",
	"line1",
	"line2",
	"line3",
	"line4",
	"line5",
	"mobile",
	"phone",
	"postcode",
	"premiseType",
}

// UnmarshalJSON decodes JSON.
func (a *AddressLine5Indicator) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAddressLine5Indicator(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysAddressLine5Indicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = AddressLine5Indicator(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a AddressLine5Indicator) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalAddressLine5Indicator(a))
	}

	return marshalUnion(marshalAddressLine5Indicator(a), a.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->tradingAddresses->items->addressIndicator".
//
// AddressIndicator.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                                      `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicator(p), p.AdditionalProperties)
}

// PremiseType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->identification->tradingAddresses->items->premiseType".
//
// PremiseType.
type PremiseType struct {
	Code                 PremiseTypeCode        `json:"code,omitempty"`
	Description          PremiseTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalPremiseType PremiseType

var knownKeysPremiseType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PremiseType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPremiseType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPremiseType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PremiseType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PremiseType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPremiseType(p))
	}

	return marshalUnion(marshalPremiseType(p), p.AdditionalProperties)
}

// Insight structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->insight".
//
// Insight.
type Insight struct {
	FinancialAgreements            []FinancialAgreement   `json:"financialAgreements,omitempty"`
	LatestAgreementStartDate       string                 `json:"latestAgreementStartDate,omitempty"`       // Format: date.
	LatestDefaultDate              string                 `json:"latestDefaultDate,omitempty"`              // Format: date.
	LatestSettledDate              string                 `json:"latestSettledDate,omitempty"`              // Format: date.
	TotalAgreements                int64                  `json:"totalAgreements,omitempty"`                // Format: int32.
	TotalCurrentAgreements         int64                  `json:"totalCurrentAgreements,omitempty"`         // Format: int32.
	TotalCurrentOutstandingBalance float64                `json:"totalCurrentOutstandingBalance,omitempty"`
	TotalDefaultAgreements         int64                  `json:"totalDefaultAgreements,omitempty"`         // Format: int32.
	TotalDefaultBalance            float64                `json:"totalDefaultBalance,omitempty"`
	TotalSatisfiedAgreements       int64                  `json:"totalSatisfiedAgreements,omitempty"`       // Format: int32.
	AdditionalProperties           map[string]interface{} `json:"-"`                                        // All unmatched properties.
}

type marshalInsight Insight

var knownKeysInsight = []string{
	"financialAgreements",
	"latestAgreementStartDate",
	"latestDefaultDate",
	"latestSettledDate",
	"totalAgreements",
	"totalCurrentAgreements",
	"totalCurrentOutstandingBalance",
	"totalDefaultAgreements",
	"totalDefaultBalance",
	"totalSatisfiedAgreements",
}

// UnmarshalJSON decodes JSON.
func (i *Insight) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalInsight(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysInsight {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mi.AdditionalProperties == nil {
			mi.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mi.AdditionalProperties[key] = val
	}

	*i = Insight(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i Insight) MarshalJSON() ([]byte, error) {
	if len(i.AdditionalProperties) == 0 {
		return json.Marshal(marshalInsight(i))
	}

	return marshalUnion(marshalInsight(i), i.AdditionalProperties)
}

// FinancialAgreement structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->insight->financialAgreements->items".
//
// FinancialAgreement.
type FinancialAgreement struct {
	AccountType          string                                                                                                                                   `json:"accountType,omitempty"`
	Amount               float64                                                                                                                                  `json:"amount,omitempty"`
	ContributorType      *ContributorType                                                                                                                         `json:"contributorType,omitempty"`    // ContributorType.
	CreditLimit          float64                                                                                                                                  `json:"creditLimit,omitempty"`
	CurrentBalance       float64                                                                                                                                  `json:"currentBalance,omitempty"`
	DefaultBalance       float64                                                                                                                                  `json:"defaultBalance,omitempty"`
	LastUpdate           string                                                                                                                                   `json:"lastUpdate,omitempty"`         // Format: date.
	LatestStatus         *Status                                                                                                                                  `json:"latestStatus,omitempty"`       // Status.
	OverInto             string                                                                                                                                   `json:"overInto,omitempty"`
	OverdueCount         int64                                                                                                                                    `json:"overdueCount,omitempty"`       // Format: int32.
	OwnAgreementNumber   string                                                                                                                                   `json:"ownAgreementNumber,omitempty"`
	Profile              string                                                                                                                                   `json:"profile,omitempty"`
	StartDate            string                                                                                                                                   `json:"startDate,omitempty"`          // Format: date.
	Terms                int64                                                                                                                                    `json:"terms,omitempty"`              // Format: int32.
	WorstStatus          *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus `json:"worstStatus,omitempty"`        // Status.
	AdditionalProperties map[string]interface{}                                                                                                                   `json:"-"`                            // All unmatched properties.
}

type marshalFinancialAgreement FinancialAgreement

var knownKeysFinancialAgreement = []string{
	"accountType",
	"amount",
	"contributorType",
	"creditLimit",
	"currentBalance",
	"defaultBalance",
	"lastUpdate",
	"latestStatus",
	"overInto",
	"overdueCount",
	"ownAgreementNumber",
	"profile",
	"startDate",
	"terms",
	"worstStatus",
}

// UnmarshalJSON decodes JSON.
func (f *FinancialAgreement) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFinancialAgreement(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFinancialAgreement {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = FinancialAgreement(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f FinancialAgreement) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFinancialAgreement(f))
	}

	return marshalUnion(marshalFinancialAgreement(f), f.AdditionalProperties)
}

// ContributorType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->insight->financialAgreements->items->contributorType".
//
// ContributorType.
type ContributorType struct {
	Code                 ContributorTypeCode        `json:"code,omitempty"`
	Description          ContributorTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`                     // All unmatched properties.
}

type marshalContributorType ContributorType

var knownKeysContributorType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (c *ContributorType) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalContributorType(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysContributorType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ContributorType(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ContributorType) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalContributorType(c))
	}

	return marshalUnion(marshalContributorType(c), c.AdditionalProperties)
}

// Status structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->insight->financialAgreements->items->latestStatus".
//
// Status.
type Status struct {
	Code                 StatusCode             `json:"code,omitempty"`
	Description          StatusDescription      `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalStatus Status

var knownKeysStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (s *Status) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatus(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = Status(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s Status) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatus(s))
	}

	return marshalUnion(marshalStatus(s), s.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->insight->financialAgreements->items->worstStatus".
//
// Status.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                             `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatus(p), p.AdditionalProperties)
}

// Mortgages structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->mortgages".
//
// Mortgages.
type Mortgages struct {
	CurrentMortgageStartDate string                 `json:"currentMortgageStartDate,omitempty"` // Format: date.
	CurrentMortgagesCount    int64                  `json:"currentMortgagesCount,omitempty"`    // Format: int32.
	LatestSatifiedDate       string                 `json:"latestSatifiedDate,omitempty"`       // Format: date.
	SatisfiedMortgageCount   int64                  `json:"satisfiedMortgageCount,omitempty"`   // Format: int32.
	Summaries                []MortgageSummary      `json:"summaries,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`                                  // All unmatched properties.
}

type marshalMortgages Mortgages

var knownKeysMortgages = []string{
	"currentMortgageStartDate",
	"currentMortgagesCount",
	"latestSatifiedDate",
	"satisfiedMortgageCount",
	"summaries",
}

// UnmarshalJSON decodes JSON.
func (m *Mortgages) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMortgages(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMortgages {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = Mortgages(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m Mortgages) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMortgages(m))
	}

	return marshalUnion(marshalMortgages(m), m.AdditionalProperties)
}

// MortgageSummary structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->mortgages->summaries->items".
//
// MortgageSummary.
type MortgageSummary struct {
	Charge               int64                  `json:"charge,omitempty"`        // Format: int32.
	Details              []MortgageDetail       `json:"details,omitempty"`
	Satisfied            bool                   `json:"satisfied,omitempty"`
	SatisfiedDate        string                 `json:"satisfiedDate,omitempty"` // Format: date.
	AdditionalProperties map[string]interface{} `json:"-"`                       // All unmatched properties.
}

type marshalMortgageSummary MortgageSummary

var knownKeysMortgageSummary = []string{
	"charge",
	"details",
	"satisfied",
	"satisfiedDate",
}

// UnmarshalJSON decodes JSON.
func (m *MortgageSummary) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMortgageSummary(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMortgageSummary {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MortgageSummary(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MortgageSummary) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMortgageSummary(m))
	}

	return marshalUnion(marshalMortgageSummary(m), m.AdditionalProperties)
}

// MortgageDetail structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->mortgages->summaries->items->details->items".
//
// MortgageDetail.
type MortgageDetail struct {
	CreationDate           string                 `json:"creationDate,omitempty"`           // Format: date.
	Description            string                 `json:"description,omitempty"`
	FormNumber             string                 `json:"formNumber,omitempty"`
	PartiallySatisfiedFlag bool                   `json:"partiallySatisfiedFlag,omitempty"`
	PersonsEntitled        string                 `json:"personsEntitled,omitempty"`
	PropertyCharged        string                 `json:"propertyCharged,omitempty"`
	RegisteredDate         string                 `json:"registeredDate,omitempty"`         // Format: date.
	AdditionalProperties   map[string]interface{} `json:"-"`                                // All unmatched properties.
}

type marshalMortgageDetail MortgageDetail

var knownKeysMortgageDetail = []string{
	"creationDate",
	"description",
	"formNumber",
	"partiallySatisfiedFlag",
	"personsEntitled",
	"propertyCharged",
	"registeredDate",
}

// UnmarshalJSON decodes JSON.
func (m *MortgageDetail) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMortgageDetail(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysMortgageDetail {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mm.AdditionalProperties == nil {
			mm.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mm.AdditionalProperties[key] = val
	}

	*m = MortgageDetail(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MortgageDetail) MarshalJSON() ([]byte, error) {
	if len(m.AdditionalProperties) == 0 {
		return json.Marshal(marshalMortgageDetail(m))
	}

	return marshalUnion(marshalMortgageDetail(m), m.AdditionalProperties)
}

// ScoresAndLimits structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->scoresAndLimits".
//
// ScoresAndLimits.
type ScoresAndLimits struct {
	CreditLimit              int64                                   `json:"creditLimit,omitempty"`              // Format: int32.
	PostcodeRN               int64                                   `json:"postcodeRN,omitempty"`               // Format: int32.
	ProtectCodes             []ProtectCode                           `json:"protectCodes,omitempty"`
	ProtectScore             int64                                   `json:"protectScore,omitempty"`             // Format: int32.
	Score                    int64                                   `json:"score,omitempty"`                    // Format: int32.
	ScoreGrade               ScoresAndLimitsScoreGrade               `json:"scoreGrade,omitempty"`
	ScoreGradeSixMonthsAgo   ScoresAndLimitsScoreGradeSixMonthsAgo   `json:"scoreGradeSixMonthsAgo,omitempty"`
	ScoreGradeThreeMonthsAgo ScoresAndLimitsScoreGradeThreeMonthsAgo `json:"scoreGradeThreeMonthsAgo,omitempty"`
	ScoreName                *ScoreName                              `json:"scoreName,omitempty"`                // ScoreName.
	ScoreSixMonthsAgo        int64                                   `json:"scoreSixMonthsAgo,omitempty"`        // Format: int32.
	ScoreThreeMonthsAgo      int64                                   `json:"scoreThreeMonthsAgo,omitempty"`      // Format: int32.
	AdditionalProperties     map[string]interface{}                  `json:"-"`                                  // All unmatched properties.
}

type marshalScoresAndLimits ScoresAndLimits

var knownKeysScoresAndLimits = []string{
	"creditLimit",
	"postcodeRN",
	"protectCodes",
	"protectScore",
	"score",
	"scoreGrade",
	"scoreGradeSixMonthsAgo",
	"scoreGradeThreeMonthsAgo",
	"scoreName",
	"scoreSixMonthsAgo",
	"scoreThreeMonthsAgo",
}

// UnmarshalJSON decodes JSON.
func (s *ScoresAndLimits) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalScoresAndLimits(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysScoresAndLimits {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = ScoresAndLimits(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ScoresAndLimits) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalScoresAndLimits(s))
	}

	return marshalUnion(marshalScoresAndLimits(s), s.AdditionalProperties)
}

// ProtectCode structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->scoresAndLimits->protectCodes->items".
//
// ProtectCode.
type ProtectCode struct {
	Code                 ProtectCodeCode        `json:"code,omitempty"`
	Description          ProtectCodeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalProtectCode ProtectCode

var knownKeysProtectCode = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *ProtectCode) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalProtectCode(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysProtectCode {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = ProtectCode(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p ProtectCode) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalProtectCode(p))
	}

	return marshalUnion(marshalProtectCode(p), p.AdditionalProperties)
}

// ScoreName structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->scoresAndLimits->scoreName".
//
// ScoreName.
type ScoreName struct {
	Code                 ScoreNameCode          `json:"code,omitempty"`
	Description          ScoreNameDescription   `json:"description,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                     // All unmatched properties.
}

type marshalScoreName ScoreName

var knownKeysScoreName = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (s *ScoreName) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalScoreName(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysScoreName {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = ScoreName(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ScoreName) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalScoreName(s))
	}

	return marshalUnion(marshalScoreName(s), s.AdditionalProperties)
}

// TieredOwnership structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->tieredOwnership->items".
//
// TieredOwnership.
type TieredOwnership struct {
	Shareholders         []PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems `json:"shareholders,omitempty"`
	TierNumber           int64                                                                                                                                `json:"tierNumber,omitempty"`   // Format: int32.
	AdditionalProperties map[string]interface{}                                                                                                               `json:"-"`                      // All unmatched properties.
}

type marshalTieredOwnership TieredOwnership

var knownKeysTieredOwnership = []string{
	"shareholders",
	"tierNumber",
}

// UnmarshalJSON decodes JSON.
func (t *TieredOwnership) UnmarshalJSON(data []byte) error {
	var err error

	mt := marshalTieredOwnership(*t)

	err = json.Unmarshal(data, &mt)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysTieredOwnership {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mt.AdditionalProperties == nil {
			mt.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mt.AdditionalProperties[key] = val
	}

	*t = TieredOwnership(mt)

	return nil
}

// MarshalJSON encodes JSON.
func (t TieredOwnership) MarshalJSON() ([]byte, error) {
	if len(t.AdditionalProperties) == 0 {
		return json.Marshal(marshalTieredOwnership(t))
	}

	return marshalUnion(marshalTieredOwnership(t), t.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->tieredOwnership->items->shareholders->items".
//
// Shareholder.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems struct {
	CompanyName          string                                                                                                                                             `json:"companyName,omitempty"`
	CompanyNumber        string                                                                                                                                             `json:"companyNumber,omitempty"`
	Forename             string                                                                                                                                             `json:"forename,omitempty"`
	Initial              string                                                                                                                                             `json:"initial,omitempty"`
	PercentageOfOrdinary float64                                                                                                                                            `json:"percentageOfOrdinary,omitempty"`
	ShareholderType      *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType `json:"shareholderType,omitempty"`      // ShareholderType.
	Shares               []PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems    `json:"shares,omitempty"`
	Surname              string                                                                                                                                             `json:"surname,omitempty"`
	Title                string                                                                                                                                             `json:"title,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                             `json:"-"`                              // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems = []string{
	"companyName",
	"companyNumber",
	"forename",
	"initial",
	"percentageOfOrdinary",
	"shareholderType",
	"shares",
	"surname",
	"title",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->tieredOwnership->items->shareholders->items->shareholderType".
//
// ShareholderType.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType struct {
	Code                 PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode        `json:"code,omitempty"`
	Description          PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}                                                                                                                                       `json:"-"`                     // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType = []string{
	"code",
	"description",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderType(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->structured_data->anonymised_equifax_business_report->tieredOwnership->items->shareholders->items->shares->items".
//
// Share.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems struct {
	Joint                bool                   `json:"joint,omitempty"`
	NumberOfShares       int64                  `json:"numberOfShares,omitempty"`     // Format: int32.
	ShareCurrency        string                 `json:"shareCurrency,omitempty"`
	TotalValueOfShares   float64                `json:"totalValueOfShares,omitempty"`
	TypeOfShare          string                 `json:"typeOfShare,omitempty"`
	ValuePerShare        float64                `json:"valuePerShare,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems = []string{
	"joint",
	"numberOfShares",
	"shareCurrency",
	"totalValueOfShares",
	"typeOfShare",
	"valuePerShare",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsSharesItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->values->items".
type PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems struct {
	Identifier           PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier `json:"identifier"` // Required.
	Value                PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsValue      `json:"value"`      // Required.
	AdditionalProperties map[string]interface{}                                                `json:"-"`          // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems

var knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems = []string{
	"identifier",
	"value",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationRequestBodyDataItemsValuesItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsValue structure is generated from "PostAnonymisedDataEvaluation/request/body->data->items->values->items->value".
type PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsValue struct {
	TypeNumber  *float64 `json:"-"`
	TypeString  *string  `json:"-"`
	TypeBoolean *bool    `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsValue) UnmarshalJSON(data []byte) error {
	var err error

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &p.TypeNumber)
		if err != nil {
			p.TypeNumber = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &p.TypeString)
		if err != nil {
			p.TypeString = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &p.TypeBoolean)
		if err != nil {
			p.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsValue) MarshalJSON() ([]byte, error) {
	return marshalUnion(p.TypeNumber, p.TypeString, p.TypeBoolean)
}

// PostAnonymisedDataEvaluationResponseValueOK structure is generated from "PostAnonymisedDataEvaluation/response/ValueOK".
type PostAnonymisedDataEvaluationResponseValueOK struct {
	Data                 []PostAnonymisedDataEvaluationResponseValueOKDataItems `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}                                 `json:"-"`              // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationResponseValueOK PostAnonymisedDataEvaluationResponseValueOK

var knownKeysPostAnonymisedDataEvaluationResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationResponseValueOK(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationResponseValueOK(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationResponseValueOK(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationResponseValueOK(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationResponseValueOKDataItems structure is generated from "PostAnonymisedDataEvaluation/response/ValueOK->data->items".
type PostAnonymisedDataEvaluationResponseValueOKDataItems struct {
	// Format: uuid.
	// Required.
	CorrelationID        string                                                              `json:"correlation_id"`
	Products             []PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems `json:"products"`       // Required.
	AdditionalProperties map[string]interface{}                                              `json:"-"`              // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationResponseValueOKDataItems PostAnonymisedDataEvaluationResponseValueOKDataItems

var knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItems = []string{
	"correlation_id",
	"products",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationResponseValueOKDataItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationResponseValueOKDataItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationResponseValueOKDataItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationResponseValueOKDataItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationResponseValueOKDataItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationResponseValueOKDataItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems structure is generated from "PostAnonymisedDataEvaluation/response/ValueOK->data->items->products->items".
type PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems struct {
	AmountEstimate       string                                                                       `json:"amount_estimate"` // Required.
	Eligibility          PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility `json:"eligibility"`     // Required.
	PriceEstimate        string                                                                       `json:"price_estimate"`  // Required.
	Product              interface{}                                                                  `json:"product"`         // Required.
	AdditionalProperties map[string]interface{}                                                       `json:"-"`               // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems

var knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems = []string{
	"amount_estimate",
	"eligibility",
	"price_estimate",
	"product",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItems(p), p.AdditionalProperties)
}

// PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility structure is generated from "PostAnonymisedDataEvaluation/response/ValueOK->data->items->products->items->eligibility".
type PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility struct {
	FailedChecks         []string                                                                            `json:"failed_checks,omitempty"`
	Outcome              PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome `json:"outcome"`                 // Required.
	AdditionalProperties map[string]interface{}                                                              `json:"-"`                       // All unmatched properties.
}

type marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility

var knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility = []string{
	"failed_checks",
	"outcome",
}

// UnmarshalJSON decodes JSON.
func (p *PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility(p))
	}

	return marshalUnion(marshalPostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibility(p), p.AdditionalProperties)
}

// GetCreditFacilityCustomerDocumentStateKeyResponseValueOK structure is generated from "GetCreditFacilityCustomerDocumentStateKey/response/ValueOK".
type GetCreditFacilityCustomerDocumentStateKeyResponseValueOK struct {
	Data                 GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                       `json:"-"`    // All unmatched properties.
}

type marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOK GetCreditFacilityCustomerDocumentStateKeyResponseValueOK

var knownKeysGetCreditFacilityCustomerDocumentStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityCustomerDocumentStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityCustomerDocumentStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityCustomerDocumentStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityCustomerDocumentStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData structure is generated from "GetCreditFacilityCustomerDocumentStateKey/response/ValueOK->data".
type GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData struct {
	CustomerDocuments    []CustomerDocument     `json:"customer_documents"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData

var knownKeysGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData = []string{
	"customer_documents",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityCustomerDocumentStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetCreditFacilityCustomerDocumentStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// CustomerDocument structure is generated from "#/definitions/customer_document".
//
// customer_document.
type CustomerDocument struct {
	// Format: uuid.
	// Required.
	DocumentID               string                         `json:"document_id"`
	Label                    string                         `json:"label,omitempty"`
	Type                     CustomerDocumentType           `json:"type"`                                   // Required.
	Agreed                   bool                           `json:"agreed"`                                 // Required.
	AgreementDate            string                         `json:"agreement_date,omitempty"`               // Format: date.
	RequiredMethod           CustomerDocumentRequiredMethod `json:"required_method,omitempty"`
	Expired                  bool                           `json:"expired"`                                // Required.
	Downloads                *CustomerDocumentDownloads     `json:"downloads,omitempty"`
	Description              string                         `json:"description,omitempty"`
	Title                    string                         `json:"title,omitempty"`
	RequiredPersonToSignUID  string                         `json:"required_person_to_sign_uid,omitempty"`  // Format: uuid.
	RequiredPersonToSignName string                         `json:"required_person_to_sign_name,omitempty"`
	SignatureText            string                         `json:"signature_text,omitempty"`
	AdditionalProperties     map[string]interface{}         `json:"-"`                                      // All unmatched properties.
}

type marshalCustomerDocument CustomerDocument

var knownKeysCustomerDocument = []string{
	"document_id",
	"label",
	"type",
	"agreed",
	"agreement_date",
	"required_method",
	"expired",
	"downloads",
	"description",
	"title",
	"required_person_to_sign_uid",
	"required_person_to_sign_name",
	"signature_text",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerDocument) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerDocument(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerDocument {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerDocument(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerDocument) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerDocument(c))
	}

	return marshalUnion(marshalCustomerDocument(c), c.AdditionalProperties)
}

// CustomerDocumentDownloads structure is generated from "#/definitions/customer_document->downloads".
type CustomerDocumentDownloads struct {
	Signed               string                 `json:"signed,omitempty"`   // Format: uri.
	Unsigned             string                 `json:"unsigned,omitempty"` // Format: uri.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCustomerDocumentDownloads CustomerDocumentDownloads

var knownKeysCustomerDocumentDownloads = []string{
	"signed",
	"unsigned",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerDocumentDownloads) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerDocumentDownloads(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerDocumentDownloads {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerDocumentDownloads(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerDocumentDownloads) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerDocumentDownloads(c))
	}

	return marshalUnion(marshalCustomerDocumentDownloads(c), c.AdditionalProperties)
}

// PutCreditFacilityCustomerDocumentStateKeyRequestBody structure is generated from "PutCreditFacilityCustomerDocumentStateKey/request/body".
type PutCreditFacilityCustomerDocumentStateKeyRequestBody struct {
	Data                 *PutCreditFacilityCustomerDocumentStateKeyRequestBodyData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}                                    `json:"-"`              // All unmatched properties.
}

type marshalPutCreditFacilityCustomerDocumentStateKeyRequestBody PutCreditFacilityCustomerDocumentStateKeyRequestBody

var knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PutCreditFacilityCustomerDocumentStateKeyRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCreditFacilityCustomerDocumentStateKeyRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCreditFacilityCustomerDocumentStateKeyRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCreditFacilityCustomerDocumentStateKeyRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBody(p))
	}

	return marshalUnion(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBody(p), p.AdditionalProperties)
}

// PutCreditFacilityCustomerDocumentStateKeyRequestBodyData structure is generated from "PutCreditFacilityCustomerDocumentStateKey/request/body->data".
type PutCreditFacilityCustomerDocumentStateKeyRequestBodyData struct {
	CustomerDocuments    []PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems `json:"customer_documents,omitempty"`
	AdditionalProperties map[string]interface{}                                                           `json:"-"`                            // All unmatched properties.
}

type marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyData PutCreditFacilityCustomerDocumentStateKeyRequestBodyData

var knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBodyData = []string{
	"customer_documents",
}

// UnmarshalJSON decodes JSON.
func (p *PutCreditFacilityCustomerDocumentStateKeyRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCreditFacilityCustomerDocumentStateKeyRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCreditFacilityCustomerDocumentStateKeyRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyData(p))
	}

	return marshalUnion(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyData(p), p.AdditionalProperties)
}

// PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems structure is generated from "PutCreditFacilityCustomerDocumentStateKey/request/body->data->customer_documents->items".
type PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems struct {
	// Format: uuid.
	// Required.
	DocumentID           string                 `json:"document_id"`
	Agreed               bool                   `json:"agreed"`         // Required.
	// Format: date.
	// Required.
	AgreementDate        string                 `json:"agreement_date"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems

var knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems = []string{
	"document_id",
	"agreed",
	"agreement_date",
}

// UnmarshalJSON decodes JSON.
func (p *PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems(p))
	}

	return marshalUnion(marshalPutCreditFacilityCustomerDocumentStateKeyRequestBodyDataCustomerDocumentsItems(p), p.AdditionalProperties)
}

// GetAccountStatementStateKeyResponseValueOK structure is generated from "GetAccountStatementStateKey/response/ValueOK".
type GetAccountStatementStateKeyResponseValueOK struct {
	Data                 GetAccountStatementStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                         `json:"-"`    // All unmatched properties.
}

type marshalGetAccountStatementStateKeyResponseValueOK GetAccountStatementStateKeyResponseValueOK

var knownKeysGetAccountStatementStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetAccountStatementStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAccountStatementStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAccountStatementStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAccountStatementStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAccountStatementStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAccountStatementStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetAccountStatementStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetAccountStatementStateKeyResponseValueOKData structure is generated from "GetAccountStatementStateKey/response/ValueOK->data".
type GetAccountStatementStateKeyResponseValueOKData struct {
	Summary              GetAccountStatementStateKeyResponseValueOKDataSummary `json:"summary"`              // Required.
	Statements           []StatementRow                                        `json:"statements,omitempty"`
	AdditionalProperties map[string]interface{}                                `json:"-"`                    // All unmatched properties.
}

type marshalGetAccountStatementStateKeyResponseValueOKData GetAccountStatementStateKeyResponseValueOKData

var knownKeysGetAccountStatementStateKeyResponseValueOKData = []string{
	"summary",
	"statements",
}

// UnmarshalJSON decodes JSON.
func (g *GetAccountStatementStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAccountStatementStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAccountStatementStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAccountStatementStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAccountStatementStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAccountStatementStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetAccountStatementStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// GetAccountStatementStateKeyResponseValueOKDataSummary structure is generated from "GetAccountStatementStateKey/response/ValueOK->data->summary".
type GetAccountStatementStateKeyResponseValueOKDataSummary struct {
	OpeningBalance         float64                `json:"opening_balance"`           // Required.
	ClosingBalance         float64                `json:"closing_balance"`           // Required.
	AmountFunded           float64                `json:"amount_funded"`             // Required.
	AmountRepaid           float64                `json:"amount_repaid"`             // Required.
	InterestAndFeesAccrued float64                `json:"interest_and_fees_accrued"` // Required.
	AdditionalProperties   map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalGetAccountStatementStateKeyResponseValueOKDataSummary GetAccountStatementStateKeyResponseValueOKDataSummary

var knownKeysGetAccountStatementStateKeyResponseValueOKDataSummary = []string{
	"opening_balance",
	"closing_balance",
	"amount_funded",
	"amount_repaid",
	"interest_and_fees_accrued",
}

// UnmarshalJSON decodes JSON.
func (g *GetAccountStatementStateKeyResponseValueOKDataSummary) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetAccountStatementStateKeyResponseValueOKDataSummary(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetAccountStatementStateKeyResponseValueOKDataSummary {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetAccountStatementStateKeyResponseValueOKDataSummary(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetAccountStatementStateKeyResponseValueOKDataSummary) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetAccountStatementStateKeyResponseValueOKDataSummary(g))
	}

	return marshalUnion(marshalGetAccountStatementStateKeyResponseValueOKDataSummary(g), g.AdditionalProperties)
}

// StatementRow structure is generated from "#/definitions/statement_row".
//
// statement_row.
type StatementRow struct {
	ClosingBalance       float64                `json:"closing_balance"`              // Required.
	ClosingFees          float64                `json:"closing_fees"`                 // Required.
	ClosingInterest      float64                `json:"closing_interest"`             // Required.
	ClosingPrincipal     float64                `json:"closing_principal"`            // Required.
	Date                 string                 `json:"date,omitempty"`               // Format: date.
	Description          string                 `json:"description"`                  // Required.
	FeesAccrued          float64                `json:"fees_accrued,omitempty"`
	InterestAccrued      float64                `json:"interest_accrued,omitempty"`
	RowType              StatementRowRowType    `json:"row_type"`                     // Required.
	TransactionAmount    float64                `json:"transaction_amount,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                            // All unmatched properties.
}

type marshalStatementRow StatementRow

var knownKeysStatementRow = []string{
	"closing_balance",
	"closing_fees",
	"closing_interest",
	"closing_principal",
	"date",
	"description",
	"fees_accrued",
	"interest_accrued",
	"row_type",
	"transaction_amount",
}

// UnmarshalJSON decodes JSON.
func (s *StatementRow) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatementRow(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatementRow {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatementRow(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatementRow) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatementRow(s))
	}

	return marshalUnion(marshalStatementRow(s), s.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody structure is generated from "PostCreditFacilityPaymentRequestStateKeyPaymentMethodID/request/body".
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody struct {
	Data                 PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                                 `json:"-"`    // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody

var knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData structure is generated from "PostCreditFacilityPaymentRequestStateKeyPaymentMethodID/request/body->data".
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData struct {
	Amount               float64                `json:"amount"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData

var knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData = []string{
	"amount",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBodyData(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated structure is generated from "PostCreditFacilityPaymentRequestStateKeyPaymentMethodID/response/ValueCreated".
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated struct {
	Data                 PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                                          `json:"-"`    // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated

var knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated(p), p.AdditionalProperties)
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData structure is generated from "PostCreditFacilityPaymentRequestStateKeyPaymentMethodID/response/ValueCreated->data".
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData struct {
	Status               PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}                                                                `json:"-"`                // All unmatched properties.
}

type marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData

var knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData = []string{
	"status",
}

// UnmarshalJSON decodes JSON.
func (p *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData(p))
	}

	return marshalUnion(marshalPostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedData(p), p.AdditionalProperties)
}

// Report structure is generated from "#/definitions/report".
//
// report.
type Report struct {
	Data                 map[string]interface{} `json:"data,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalReport Report

var knownKeysReport = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (r *Report) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalReport(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysReport {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = Report(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r Report) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalReport(r))
	}

	return marshalUnion(marshalReport(r), r.AdditionalProperties)
}

// CompanyThirdPartyProvidersItemsType is an enum type.
type CompanyThirdPartyProvidersItemsType string

// CompanyThirdPartyProvidersItemsType values enumeration.
const (
	CompanyThirdPartyProvidersItemsTypeEcommerce = CompanyThirdPartyProvidersItemsType("ecommerce")
	CompanyThirdPartyProvidersItemsTypeSoftware = CompanyThirdPartyProvidersItemsType("software")
	CompanyThirdPartyProvidersItemsTypeBank = CompanyThirdPartyProvidersItemsType("bank")
)

// MarshalJSON encodes JSON.
func (i CompanyThirdPartyProvidersItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyThirdPartyProvidersItemsTypeEcommerce:
	case CompanyThirdPartyProvidersItemsTypeSoftware:
	case CompanyThirdPartyProvidersItemsTypeBank:

	default:
		return nil, fmt.Errorf("unexpected CompanyThirdPartyProvidersItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyThirdPartyProvidersItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyThirdPartyProvidersItemsType(ii)

	switch v {
	case CompanyThirdPartyProvidersItemsTypeEcommerce:
	case CompanyThirdPartyProvidersItemsTypeSoftware:
	case CompanyThirdPartyProvidersItemsTypeBank:

	default:
		return fmt.Errorf("unexpected CompanyThirdPartyProvidersItemsType value: %v", v)
	}

	*i = v

	return nil
}

// CompanyType is an enum type.
type CompanyType string

// CompanyType values enumeration.
const (
	CompanyTypeLimitedLiabilityCompany = CompanyType("limited_liability_company")
	CompanyTypeSoleTrader = CompanyType("sole_trader")
	CompanyTypeOrdinaryPartnership = CompanyType("ordinary_partnership")
	CompanyTypeLimitedLiabilityPartnership = CompanyType("limited_liability_partnership")
	CompanyTypePublicLimitedCompany = CompanyType("public_limited_company")
	CompanyTypeOther = CompanyType("other")
)

// MarshalJSON encodes JSON.
func (i CompanyType) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyTypeLimitedLiabilityCompany:
	case CompanyTypeSoleTrader:
	case CompanyTypeOrdinaryPartnership:
	case CompanyTypeLimitedLiabilityPartnership:
	case CompanyTypePublicLimitedCompany:
	case CompanyTypeOther:

	default:
		return nil, fmt.Errorf("unexpected CompanyType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyType(ii)

	switch v {
	case CompanyTypeLimitedLiabilityCompany:
	case CompanyTypeSoleTrader:
	case CompanyTypeOrdinaryPartnership:
	case CompanyTypeLimitedLiabilityPartnership:
	case CompanyTypePublicLimitedCompany:
	case CompanyTypeOther:

	default:
		return fmt.Errorf("unexpected CompanyType value: %v", v)
	}

	*i = v

	return nil
}

// CompanyAddressCountry is an enum type.
type CompanyAddressCountry string

// CompanyAddressCountry values enumeration.
const (
	CompanyAddressCountryGB = CompanyAddressCountry("GB")
	CompanyAddressCountryDE = CompanyAddressCountry("DE")
	CompanyAddressCountryPL = CompanyAddressCountry("PL")
	CompanyAddressCountryOTHER = CompanyAddressCountry("OTHER")
)

// MarshalJSON encodes JSON.
func (i CompanyAddressCountry) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyAddressCountryGB:
	case CompanyAddressCountryDE:
	case CompanyAddressCountryPL:
	case CompanyAddressCountryOTHER:

	default:
		return nil, fmt.Errorf("unexpected CompanyAddressCountry value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyAddressCountry) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyAddressCountry(ii)

	switch v {
	case CompanyAddressCountryGB:
	case CompanyAddressCountryDE:
	case CompanyAddressCountryPL:
	case CompanyAddressCountryOTHER:

	default:
		return fmt.Errorf("unexpected CompanyAddressCountry value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityRequestApprovalPurpose is an enum type.
type CreditFacilityRequestApprovalPurpose string

// CreditFacilityRequestApprovalPurpose values enumeration.
const (
	CreditFacilityRequestApprovalPurposeStockPurchase = CreditFacilityRequestApprovalPurpose("stock_purchase")
	CreditFacilityRequestApprovalPurposeBridgingLoan = CreditFacilityRequestApprovalPurpose("bridging_loan")
	CreditFacilityRequestApprovalPurposeMarketing = CreditFacilityRequestApprovalPurpose("marketing")
	CreditFacilityRequestApprovalPurposeEquipmentPurchase = CreditFacilityRequestApprovalPurpose("equipment_purchase")
	CreditFacilityRequestApprovalPurposePayBill = CreditFacilityRequestApprovalPurpose("pay_bill")
	CreditFacilityRequestApprovalPurposePayStaff = CreditFacilityRequestApprovalPurpose("pay_staff")
	CreditFacilityRequestApprovalPurposeRefinancingDebt = CreditFacilityRequestApprovalPurpose("refinancing_debt")
	CreditFacilityRequestApprovalPurposeFinancingClientOrder = CreditFacilityRequestApprovalPurpose("financing_client_order")
	CreditFacilityRequestApprovalPurposePayTaxBill = CreditFacilityRequestApprovalPurpose("pay_tax_bill")
	CreditFacilityRequestApprovalPurposeOther = CreditFacilityRequestApprovalPurpose("other")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityRequestApprovalPurpose) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityRequestApprovalPurposeStockPurchase:
	case CreditFacilityRequestApprovalPurposeBridgingLoan:
	case CreditFacilityRequestApprovalPurposeMarketing:
	case CreditFacilityRequestApprovalPurposeEquipmentPurchase:
	case CreditFacilityRequestApprovalPurposePayBill:
	case CreditFacilityRequestApprovalPurposePayStaff:
	case CreditFacilityRequestApprovalPurposeRefinancingDebt:
	case CreditFacilityRequestApprovalPurposeFinancingClientOrder:
	case CreditFacilityRequestApprovalPurposePayTaxBill:
	case CreditFacilityRequestApprovalPurposeOther:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityRequestApprovalPurpose value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityRequestApprovalPurpose) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityRequestApprovalPurpose(ii)

	switch v {
	case CreditFacilityRequestApprovalPurposeStockPurchase:
	case CreditFacilityRequestApprovalPurposeBridgingLoan:
	case CreditFacilityRequestApprovalPurposeMarketing:
	case CreditFacilityRequestApprovalPurposeEquipmentPurchase:
	case CreditFacilityRequestApprovalPurposePayBill:
	case CreditFacilityRequestApprovalPurposePayStaff:
	case CreditFacilityRequestApprovalPurposeRefinancingDebt:
	case CreditFacilityRequestApprovalPurposeFinancingClientOrder:
	case CreditFacilityRequestApprovalPurposePayTaxBill:
	case CreditFacilityRequestApprovalPurposeOther:

	default:
		return fmt.Errorf("unexpected CreditFacilityRequestApprovalPurpose value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityRequestApprovalUrgency is an enum type.
type CreditFacilityRequestApprovalUrgency string

// CreditFacilityRequestApprovalUrgency values enumeration.
const (
	CreditFacilityRequestApprovalUrgencyAsap = CreditFacilityRequestApprovalUrgency("asap")
	CreditFacilityRequestApprovalUrgencyWeeks = CreditFacilityRequestApprovalUrgency("weeks")
	CreditFacilityRequestApprovalUrgencyFutureUse = CreditFacilityRequestApprovalUrgency("future_use")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityRequestApprovalUrgency) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityRequestApprovalUrgencyAsap:
	case CreditFacilityRequestApprovalUrgencyWeeks:
	case CreditFacilityRequestApprovalUrgencyFutureUse:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityRequestApprovalUrgency value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityRequestApprovalUrgency) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityRequestApprovalUrgency(ii)

	switch v {
	case CreditFacilityRequestApprovalUrgencyAsap:
	case CreditFacilityRequestApprovalUrgencyWeeks:
	case CreditFacilityRequestApprovalUrgencyFutureUse:

	default:
		return fmt.Errorf("unexpected CreditFacilityRequestApprovalUrgency value: %v", v)
	}

	*i = v

	return nil
}

// PersonRolesItems is an enum type.
type PersonRolesItems string

// PersonRolesItems values enumeration.
const (
	PersonRolesItemsShareholder = PersonRolesItems("shareholder")
	PersonRolesItemsApplicant = PersonRolesItems("applicant")
	PersonRolesItemsDirector = PersonRolesItems("director")
	PersonRolesItemsGuarantor = PersonRolesItems("guarantor")
	PersonRolesItemsPartner = PersonRolesItems("partner")
	PersonRolesItemsBeneficialOwner = PersonRolesItems("beneficial_owner")
	PersonRolesItemsOther = PersonRolesItems("other")
)

// MarshalJSON encodes JSON.
func (i PersonRolesItems) MarshalJSON() ([]byte, error) {
	switch i {
	case PersonRolesItemsShareholder:
	case PersonRolesItemsApplicant:
	case PersonRolesItemsDirector:
	case PersonRolesItemsGuarantor:
	case PersonRolesItemsPartner:
	case PersonRolesItemsBeneficialOwner:
	case PersonRolesItemsOther:

	default:
		return nil, fmt.Errorf("unexpected PersonRolesItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PersonRolesItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PersonRolesItems(ii)

	switch v {
	case PersonRolesItemsShareholder:
	case PersonRolesItemsApplicant:
	case PersonRolesItemsDirector:
	case PersonRolesItemsGuarantor:
	case PersonRolesItemsPartner:
	case PersonRolesItemsBeneficialOwner:
	case PersonRolesItemsOther:

	default:
		return fmt.Errorf("unexpected PersonRolesItems value: %v", v)
	}

	*i = v

	return nil
}

// PersonTitle is an enum type.
type PersonTitle string

// PersonTitle values enumeration.
const (
	PersonTitleMr = PersonTitle("mr")
	PersonTitleMs = PersonTitle("ms")
	PersonTitleMrs = PersonTitle("mrs")
	PersonTitleMiss = PersonTitle("miss")
	PersonTitleDoctor = PersonTitle("doctor")
	PersonTitleProfessor = PersonTitle("professor")
	PersonTitleSir = PersonTitle("sir")
	PersonTitleLord = PersonTitle("lord")
	PersonTitleLady = PersonTitle("lady")
	PersonTitleBaron = PersonTitle("baron")
	PersonTitleBaroness = PersonTitle("baroness")
	PersonTitleRev = PersonTitle("rev")
	PersonTitleOther = PersonTitle("other")
)

// MarshalJSON encodes JSON.
func (i PersonTitle) MarshalJSON() ([]byte, error) {
	switch i {
	case PersonTitleMr:
	case PersonTitleMs:
	case PersonTitleMrs:
	case PersonTitleMiss:
	case PersonTitleDoctor:
	case PersonTitleProfessor:
	case PersonTitleSir:
	case PersonTitleLord:
	case PersonTitleLady:
	case PersonTitleBaron:
	case PersonTitleBaroness:
	case PersonTitleRev:
	case PersonTitleOther:

	default:
		return nil, fmt.Errorf("unexpected PersonTitle value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PersonTitle) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PersonTitle(ii)

	switch v {
	case PersonTitleMr:
	case PersonTitleMs:
	case PersonTitleMrs:
	case PersonTitleMiss:
	case PersonTitleDoctor:
	case PersonTitleProfessor:
	case PersonTitleSir:
	case PersonTitleLord:
	case PersonTitleLady:
	case PersonTitleBaron:
	case PersonTitleBaroness:
	case PersonTitleRev:
	case PersonTitleOther:

	default:
		return fmt.Errorf("unexpected PersonTitle value: %v", v)
	}

	*i = v

	return nil
}

// PersonPhonesItemsType is an enum type.
type PersonPhonesItemsType string

// PersonPhonesItemsType values enumeration.
const (
	PersonPhonesItemsTypePrimary = PersonPhonesItemsType("primary")
	PersonPhonesItemsTypeSecondary = PersonPhonesItemsType("secondary")
)

// MarshalJSON encodes JSON.
func (i PersonPhonesItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case PersonPhonesItemsTypePrimary:
	case PersonPhonesItemsTypeSecondary:

	default:
		return nil, fmt.Errorf("unexpected PersonPhonesItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PersonPhonesItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PersonPhonesItemsType(ii)

	switch v {
	case PersonPhonesItemsTypePrimary:
	case PersonPhonesItemsTypeSecondary:

	default:
		return fmt.Errorf("unexpected PersonPhonesItemsType value: %v", v)
	}

	*i = v

	return nil
}

// AddressResidentialStatus is an enum type.
type AddressResidentialStatus string

// AddressResidentialStatus values enumeration.
const (
	AddressResidentialStatusTenant = AddressResidentialStatus("tenant")
	AddressResidentialStatusOwnerWithMortgage = AddressResidentialStatus("owner_with_mortgage")
	AddressResidentialStatusOwnerNoMortgage = AddressResidentialStatus("owner_no_mortgage")
	AddressResidentialStatusRentFree = AddressResidentialStatus("rent_free")
)

// MarshalJSON encodes JSON.
func (i AddressResidentialStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case AddressResidentialStatusTenant:
	case AddressResidentialStatusOwnerWithMortgage:
	case AddressResidentialStatusOwnerNoMortgage:
	case AddressResidentialStatusRentFree:

	default:
		return nil, fmt.Errorf("unexpected AddressResidentialStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AddressResidentialStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AddressResidentialStatus(ii)

	switch v {
	case AddressResidentialStatusTenant:
	case AddressResidentialStatusOwnerWithMortgage:
	case AddressResidentialStatusOwnerNoMortgage:
	case AddressResidentialStatusRentFree:

	default:
		return fmt.Errorf("unexpected AddressResidentialStatus value: %v", v)
	}

	*i = v

	return nil
}

// AddressCountry is an enum type.
type AddressCountry string

// AddressCountry values enumeration.
const (
	AddressCountryDB = AddressCountry("DB")
	AddressCountryDE = AddressCountry("DE")
	AddressCountryPL = AddressCountry("PL")
	AddressCountryOTHER = AddressCountry("OTHER")
)

// MarshalJSON encodes JSON.
func (i AddressCountry) MarshalJSON() ([]byte, error) {
	switch i {
	case AddressCountryDB:
	case AddressCountryDE:
	case AddressCountryPL:
	case AddressCountryOTHER:

	default:
		return nil, fmt.Errorf("unexpected AddressCountry value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AddressCountry) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AddressCountry(ii)

	switch v {
	case AddressCountryDB:
	case AddressCountryDE:
	case AddressCountryPL:
	case AddressCountryOTHER:

	default:
		return fmt.Errorf("unexpected AddressCountry value: %v", v)
	}

	*i = v

	return nil
}

// PersonEmailsItemsType is an enum type.
type PersonEmailsItemsType string

// PersonEmailsItemsType values enumeration.
const (
	PersonEmailsItemsTypePrimary = PersonEmailsItemsType("primary")
	PersonEmailsItemsTypeSecondary = PersonEmailsItemsType("secondary")
)

// MarshalJSON encodes JSON.
func (i PersonEmailsItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case PersonEmailsItemsTypePrimary:
	case PersonEmailsItemsTypeSecondary:

	default:
		return nil, fmt.Errorf("unexpected PersonEmailsItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PersonEmailsItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PersonEmailsItemsType(ii)

	switch v {
	case PersonEmailsItemsTypePrimary:
	case PersonEmailsItemsTypeSecondary:

	default:
		return fmt.Errorf("unexpected PersonEmailsItemsType value: %v", v)
	}

	*i = v

	return nil
}

// PersonHowDidYouFindUsAnswer is an enum type.
type PersonHowDidYouFindUsAnswer string

// PersonHowDidYouFindUsAnswer values enumeration.
const (
	PersonHowDidYouFindUsAnswerLetter = PersonHowDidYouFindUsAnswer("letter")
	PersonHowDidYouFindUsAnswerSearchEngine = PersonHowDidYouFindUsAnswer("search_engine")
	PersonHowDidYouFindUsAnswerFriendOrPress = PersonHowDidYouFindUsAnswer("friend_or_press")
	PersonHowDidYouFindUsAnswerAdvisor = PersonHowDidYouFindUsAnswer("advisor")
	PersonHowDidYouFindUsAnswerEmail = PersonHowDidYouFindUsAnswer("email")
	PersonHowDidYouFindUsAnswerOnlineAdvert = PersonHowDidYouFindUsAnswer("online_advert")
	PersonHowDidYouFindUsAnswerPhoneCall = PersonHowDidYouFindUsAnswer("phone_call")
	PersonHowDidYouFindUsAnswerNoAnswer = PersonHowDidYouFindUsAnswer("no_answer")
)

// MarshalJSON encodes JSON.
func (i PersonHowDidYouFindUsAnswer) MarshalJSON() ([]byte, error) {
	switch i {
	case PersonHowDidYouFindUsAnswerLetter:
	case PersonHowDidYouFindUsAnswerSearchEngine:
	case PersonHowDidYouFindUsAnswerFriendOrPress:
	case PersonHowDidYouFindUsAnswerAdvisor:
	case PersonHowDidYouFindUsAnswerEmail:
	case PersonHowDidYouFindUsAnswerOnlineAdvert:
	case PersonHowDidYouFindUsAnswerPhoneCall:
	case PersonHowDidYouFindUsAnswerNoAnswer:

	default:
		return nil, fmt.Errorf("unexpected PersonHowDidYouFindUsAnswer value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PersonHowDidYouFindUsAnswer) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PersonHowDidYouFindUsAnswer(ii)

	switch v {
	case PersonHowDidYouFindUsAnswerLetter:
	case PersonHowDidYouFindUsAnswerSearchEngine:
	case PersonHowDidYouFindUsAnswerFriendOrPress:
	case PersonHowDidYouFindUsAnswerAdvisor:
	case PersonHowDidYouFindUsAnswerEmail:
	case PersonHowDidYouFindUsAnswerOnlineAdvert:
	case PersonHowDidYouFindUsAnswerPhoneCall:
	case PersonHowDidYouFindUsAnswerNoAnswer:

	default:
		return fmt.Errorf("unexpected PersonHowDidYouFindUsAnswer value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("passed")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("failed")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("in_progress")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("other")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("passport")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("driving_licence")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("national_id")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("other")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("document_scan")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("photo")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("video")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("archive")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType value: %v", v)
	}

	*i = v

	return nil
}

// QuizStatus is an enum type.
type QuizStatus string

// QuizStatus values enumeration.
const (
	QuizStatusNotAvailable = QuizStatus("not_available")
	QuizStatusInProgress = QuizStatus("in_progress")
	QuizStatusSuccess = QuizStatus("success")
	QuizStatusFailure = QuizStatus("failure")
)

// MarshalJSON encodes JSON.
func (i QuizStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case QuizStatusNotAvailable:
	case QuizStatusInProgress:
	case QuizStatusSuccess:
	case QuizStatusFailure:

	default:
		return nil, fmt.Errorf("unexpected QuizStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *QuizStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := QuizStatus(ii)

	switch v {
	case QuizStatusNotAvailable:
	case QuizStatusInProgress:
	case QuizStatusSuccess:
	case QuizStatusFailure:

	default:
		return fmt.Errorf("unexpected QuizStatus value: %v", v)
	}

	*i = v

	return nil
}

// PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType is an enum type.
type PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType string

// PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType values enumeration.
const (
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("aged debtor report")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("articles of association")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("invoices")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("management accounts")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("self assessment tax return")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("limited partner id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("pnl and balance")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("share registry")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("other")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("personal bank statement")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("company bylaws")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("business plan")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("profit and loss")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("business accounts")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("personal id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("customer broker consent")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("cash register")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("certificados")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("trade certificate")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("balance sheet")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("bank statement")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("shareholder id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("nif card")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("modelo")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("vat return")
)

// MarshalJSON encodes JSON.
func (i PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn:

	default:
		return nil, fmt.Errorf("unexpected PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType(ii)

	switch v {
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn:

	default:
		return fmt.Errorf("unexpected PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// CustomerUploadedDocumentDocumentType is an enum type.
type CustomerUploadedDocumentDocumentType string

// CustomerUploadedDocumentDocumentType values enumeration.
const (
	CustomerUploadedDocumentDocumentTypeAgedDebtorReport = CustomerUploadedDocumentDocumentType("aged debtor report")
	CustomerUploadedDocumentDocumentTypeArticlesOfAssociation = CustomerUploadedDocumentDocumentType("articles of association")
	CustomerUploadedDocumentDocumentTypeInvoices = CustomerUploadedDocumentDocumentType("invoices")
	CustomerUploadedDocumentDocumentTypeManagementAccounts = CustomerUploadedDocumentDocumentType("management accounts")
	CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn = CustomerUploadedDocumentDocumentType("self assessment tax return")
	CustomerUploadedDocumentDocumentTypeLimitedPartnerID = CustomerUploadedDocumentDocumentType("limited partner id")
	CustomerUploadedDocumentDocumentTypePnlAndBalance = CustomerUploadedDocumentDocumentType("pnl and balance")
	CustomerUploadedDocumentDocumentTypeShareRegistry = CustomerUploadedDocumentDocumentType("share registry")
	CustomerUploadedDocumentDocumentTypeOther = CustomerUploadedDocumentDocumentType("other")
	CustomerUploadedDocumentDocumentTypePersonalBankStatement = CustomerUploadedDocumentDocumentType("personal bank statement")
	CustomerUploadedDocumentDocumentTypeCompanyBylaws = CustomerUploadedDocumentDocumentType("company bylaws")
	CustomerUploadedDocumentDocumentTypeBusinessPlan = CustomerUploadedDocumentDocumentType("business plan")
	CustomerUploadedDocumentDocumentTypeProfitAndLoss = CustomerUploadedDocumentDocumentType("profit and loss")
	CustomerUploadedDocumentDocumentTypeBusinessAccounts = CustomerUploadedDocumentDocumentType("business accounts")
	CustomerUploadedDocumentDocumentTypePersonalID = CustomerUploadedDocumentDocumentType("personal id")
	CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent = CustomerUploadedDocumentDocumentType("customer broker consent")
	CustomerUploadedDocumentDocumentTypeCashRegister = CustomerUploadedDocumentDocumentType("cash register")
	CustomerUploadedDocumentDocumentTypeCertificados = CustomerUploadedDocumentDocumentType("certificados")
	CustomerUploadedDocumentDocumentTypeTradeCertificate = CustomerUploadedDocumentDocumentType("trade certificate")
	CustomerUploadedDocumentDocumentTypeBalanceSheet = CustomerUploadedDocumentDocumentType("balance sheet")
	CustomerUploadedDocumentDocumentTypeBankStatement = CustomerUploadedDocumentDocumentType("bank statement")
	CustomerUploadedDocumentDocumentTypeShareholderID = CustomerUploadedDocumentDocumentType("shareholder id")
	CustomerUploadedDocumentDocumentTypeNifCard = CustomerUploadedDocumentDocumentType("nif card")
	CustomerUploadedDocumentDocumentTypeModelo = CustomerUploadedDocumentDocumentType("modelo")
	CustomerUploadedDocumentDocumentTypeVatReturn = CustomerUploadedDocumentDocumentType("vat return")
)

// MarshalJSON encodes JSON.
func (i CustomerUploadedDocumentDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case CustomerUploadedDocumentDocumentTypeAgedDebtorReport:
	case CustomerUploadedDocumentDocumentTypeArticlesOfAssociation:
	case CustomerUploadedDocumentDocumentTypeInvoices:
	case CustomerUploadedDocumentDocumentTypeManagementAccounts:
	case CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn:
	case CustomerUploadedDocumentDocumentTypeLimitedPartnerID:
	case CustomerUploadedDocumentDocumentTypePnlAndBalance:
	case CustomerUploadedDocumentDocumentTypeShareRegistry:
	case CustomerUploadedDocumentDocumentTypeOther:
	case CustomerUploadedDocumentDocumentTypePersonalBankStatement:
	case CustomerUploadedDocumentDocumentTypeCompanyBylaws:
	case CustomerUploadedDocumentDocumentTypeBusinessPlan:
	case CustomerUploadedDocumentDocumentTypeProfitAndLoss:
	case CustomerUploadedDocumentDocumentTypeBusinessAccounts:
	case CustomerUploadedDocumentDocumentTypePersonalID:
	case CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent:
	case CustomerUploadedDocumentDocumentTypeCashRegister:
	case CustomerUploadedDocumentDocumentTypeCertificados:
	case CustomerUploadedDocumentDocumentTypeTradeCertificate:
	case CustomerUploadedDocumentDocumentTypeBalanceSheet:
	case CustomerUploadedDocumentDocumentTypeBankStatement:
	case CustomerUploadedDocumentDocumentTypeShareholderID:
	case CustomerUploadedDocumentDocumentTypeNifCard:
	case CustomerUploadedDocumentDocumentTypeModelo:
	case CustomerUploadedDocumentDocumentTypeVatReturn:

	default:
		return nil, fmt.Errorf("unexpected CustomerUploadedDocumentDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CustomerUploadedDocumentDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CustomerUploadedDocumentDocumentType(ii)

	switch v {
	case CustomerUploadedDocumentDocumentTypeAgedDebtorReport:
	case CustomerUploadedDocumentDocumentTypeArticlesOfAssociation:
	case CustomerUploadedDocumentDocumentTypeInvoices:
	case CustomerUploadedDocumentDocumentTypeManagementAccounts:
	case CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn:
	case CustomerUploadedDocumentDocumentTypeLimitedPartnerID:
	case CustomerUploadedDocumentDocumentTypePnlAndBalance:
	case CustomerUploadedDocumentDocumentTypeShareRegistry:
	case CustomerUploadedDocumentDocumentTypeOther:
	case CustomerUploadedDocumentDocumentTypePersonalBankStatement:
	case CustomerUploadedDocumentDocumentTypeCompanyBylaws:
	case CustomerUploadedDocumentDocumentTypeBusinessPlan:
	case CustomerUploadedDocumentDocumentTypeProfitAndLoss:
	case CustomerUploadedDocumentDocumentTypeBusinessAccounts:
	case CustomerUploadedDocumentDocumentTypePersonalID:
	case CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent:
	case CustomerUploadedDocumentDocumentTypeCashRegister:
	case CustomerUploadedDocumentDocumentTypeCertificados:
	case CustomerUploadedDocumentDocumentTypeTradeCertificate:
	case CustomerUploadedDocumentDocumentTypeBalanceSheet:
	case CustomerUploadedDocumentDocumentTypeBankStatement:
	case CustomerUploadedDocumentDocumentTypeShareholderID:
	case CustomerUploadedDocumentDocumentTypeNifCard:
	case CustomerUploadedDocumentDocumentTypeModelo:
	case CustomerUploadedDocumentDocumentTypeVatReturn:

	default:
		return fmt.Errorf("unexpected CustomerUploadedDocumentDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// PostDocumentUploadStateKeyRequestFormDataDocumentType is an enum type.
type PostDocumentUploadStateKeyRequestFormDataDocumentType string

// PostDocumentUploadStateKeyRequestFormDataDocumentType values enumeration.
const (
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport = PostDocumentUploadStateKeyRequestFormDataDocumentType("aged debtor report")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices = PostDocumentUploadStateKeyRequestFormDataDocumentType("invoices")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("management accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeSelfAssessmentTaxReturn = PostDocumentUploadStateKeyRequestFormDataDocumentType("self assessment tax return")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther = PostDocumentUploadStateKeyRequestFormDataDocumentType("other")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement = PostDocumentUploadStateKeyRequestFormDataDocumentType("personal bank statement")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws = PostDocumentUploadStateKeyRequestFormDataDocumentType("company bylaws")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan = PostDocumentUploadStateKeyRequestFormDataDocumentType("business plan")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss = PostDocumentUploadStateKeyRequestFormDataDocumentType("profit and loss")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("business accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID = PostDocumentUploadStateKeyRequestFormDataDocumentType("personal id")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent = PostDocumentUploadStateKeyRequestFormDataDocumentType("customer broker consent")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister = PostDocumentUploadStateKeyRequestFormDataDocumentType("cash register")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet = PostDocumentUploadStateKeyRequestFormDataDocumentType("balance sheet")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement = PostDocumentUploadStateKeyRequestFormDataDocumentType("bank statement")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard = PostDocumentUploadStateKeyRequestFormDataDocumentType("nif card")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo = PostDocumentUploadStateKeyRequestFormDataDocumentType("modelo")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn = PostDocumentUploadStateKeyRequestFormDataDocumentType("vat return")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashflowForecast = PostDocumentUploadStateKeyRequestFormDataDocumentType("cashflow forecast")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders = PostDocumentUploadStateKeyRequestFormDataDocumentType("list of shareholders")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeOutstandingDebtInformation = PostDocumentUploadStateKeyRequestFormDataDocumentType("outstanding debt information")
)

// MarshalJSON encodes JSON.
func (i PostDocumentUploadStateKeyRequestFormDataDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeSelfAssessmentTaxReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashflowForecast:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOutstandingDebtInformation:

	default:
		return nil, fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestFormDataDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostDocumentUploadStateKeyRequestFormDataDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostDocumentUploadStateKeyRequestFormDataDocumentType(ii)

	switch v {
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeSelfAssessmentTaxReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashflowForecast:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOutstandingDebtInformation:

	default:
		return fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestFormDataDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// PostDocumentUploadStateKeyRequestDocumentType is an enum type.
type PostDocumentUploadStateKeyRequestDocumentType string

// PostDocumentUploadStateKeyRequestDocumentType values enumeration.
const (
	PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport = PostDocumentUploadStateKeyRequestDocumentType("aged debtor report")
	PostDocumentUploadStateKeyRequestDocumentTypeInvoices = PostDocumentUploadStateKeyRequestDocumentType("invoices")
	PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts = PostDocumentUploadStateKeyRequestDocumentType("management accounts")
	PostDocumentUploadStateKeyRequestDocumentTypeSelfAssessmentTaxReturn = PostDocumentUploadStateKeyRequestDocumentType("self assessment tax return")
	PostDocumentUploadStateKeyRequestDocumentTypeOther = PostDocumentUploadStateKeyRequestDocumentType("other")
	PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement = PostDocumentUploadStateKeyRequestDocumentType("personal bank statement")
	PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws = PostDocumentUploadStateKeyRequestDocumentType("company bylaws")
	PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan = PostDocumentUploadStateKeyRequestDocumentType("business plan")
	PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss = PostDocumentUploadStateKeyRequestDocumentType("profit and loss")
	PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts = PostDocumentUploadStateKeyRequestDocumentType("business accounts")
	PostDocumentUploadStateKeyRequestDocumentTypePersonalID = PostDocumentUploadStateKeyRequestDocumentType("personal id")
	PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent = PostDocumentUploadStateKeyRequestDocumentType("customer broker consent")
	PostDocumentUploadStateKeyRequestDocumentTypeCashRegister = PostDocumentUploadStateKeyRequestDocumentType("cash register")
	PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet = PostDocumentUploadStateKeyRequestDocumentType("balance sheet")
	PostDocumentUploadStateKeyRequestDocumentTypeBankStatement = PostDocumentUploadStateKeyRequestDocumentType("bank statement")
	PostDocumentUploadStateKeyRequestDocumentTypeNifCard = PostDocumentUploadStateKeyRequestDocumentType("nif card")
	PostDocumentUploadStateKeyRequestDocumentTypeModelo = PostDocumentUploadStateKeyRequestDocumentType("modelo")
	PostDocumentUploadStateKeyRequestDocumentTypeVatReturn = PostDocumentUploadStateKeyRequestDocumentType("vat return")
	PostDocumentUploadStateKeyRequestDocumentTypeCashflowForecast = PostDocumentUploadStateKeyRequestDocumentType("cashflow forecast")
	PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders = PostDocumentUploadStateKeyRequestDocumentType("list of shareholders")
	PostDocumentUploadStateKeyRequestDocumentTypeOutstandingDebtInformation = PostDocumentUploadStateKeyRequestDocumentType("outstanding debt information")
)

// MarshalJSON encodes JSON.
func (i PostDocumentUploadStateKeyRequestDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeSelfAssessmentTaxReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashflowForecast:
	case PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestDocumentTypeOutstandingDebtInformation:

	default:
		return nil, fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostDocumentUploadStateKeyRequestDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostDocumentUploadStateKeyRequestDocumentType(ii)

	switch v {
	case PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeSelfAssessmentTaxReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashflowForecast:
	case PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestDocumentTypeOutstandingDebtInformation:

	default:
		return fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus is an enum type.
type PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus string

// PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus values enumeration.
const (
	PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusInitiated = PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus("initiated")
	PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusSuccess = PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus("success")
	PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusFailure = PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus("failure")
)

// MarshalJSON encodes JSON.
func (i PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusInitiated:
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusSuccess:
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusFailure:

	default:
		return nil, fmt.Errorf("unexpected PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus(ii)

	switch v {
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusInitiated:
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusSuccess:
	case PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatusFailure:

	default:
		return fmt.Errorf("unexpected PostCreditFacilityPaymentRequestStateKeyResponseValueCreatedDataStatus value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalRequestStatus is an enum type.
type ApprovalRequestStatus string

// ApprovalRequestStatus values enumeration.
const (
	ApprovalRequestStatusPending = ApprovalRequestStatus("pending")
	ApprovalRequestStatusDecisionMade = ApprovalRequestStatus("decision_made")
	ApprovalRequestStatusNoDecisionPossible = ApprovalRequestStatus("no_decision_possible")
	ApprovalRequestStatusUnderManualReview = ApprovalRequestStatus("under_manual_review")
)

// MarshalJSON encodes JSON.
func (i ApprovalRequestStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalRequestStatusPending:
	case ApprovalRequestStatusDecisionMade:
	case ApprovalRequestStatusNoDecisionPossible:
	case ApprovalRequestStatusUnderManualReview:

	default:
		return nil, fmt.Errorf("unexpected ApprovalRequestStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalRequestStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalRequestStatus(ii)

	switch v {
	case ApprovalRequestStatusPending:
	case ApprovalRequestStatusDecisionMade:
	case ApprovalRequestStatusNoDecisionPossible:
	case ApprovalRequestStatusUnderManualReview:

	default:
		return fmt.Errorf("unexpected ApprovalRequestStatus value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalStatusStatus is an enum type.
type ApprovalStatusStatus string

// ApprovalStatusStatus values enumeration.
const (
	ApprovalStatusStatusApproved = ApprovalStatusStatus("approved")
	ApprovalStatusStatusDeclined = ApprovalStatusStatus("declined")
	ApprovalStatusStatusDeferred = ApprovalStatusStatus("deferred")
)

// MarshalJSON encodes JSON.
func (i ApprovalStatusStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalStatusStatusApproved:
	case ApprovalStatusStatusDeclined:
	case ApprovalStatusStatusDeferred:

	default:
		return nil, fmt.Errorf("unexpected ApprovalStatusStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalStatusStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalStatusStatus(ii)

	switch v {
	case ApprovalStatusStatusApproved:
	case ApprovalStatusStatusDeclined:
	case ApprovalStatusStatusDeferred:

	default:
		return fmt.Errorf("unexpected ApprovalStatusStatus value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalPromotionsItems is an enum type.
type ApprovalPromotionsItems string

// ApprovalPromotionsItems values enumeration.
const (
	ApprovalPromotionsItemsFirstMonthInterestFree = ApprovalPromotionsItems("first_month_interest_free")
	ApprovalPromotionsItemsThreeMonthsInterestFree = ApprovalPromotionsItems("three_months_interest_free")
	ApprovalPromotionsItemsFirstMonthHalfInterest = ApprovalPromotionsItems("first_month_half_interest")
)

// MarshalJSON encodes JSON.
func (i ApprovalPromotionsItems) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalPromotionsItemsFirstMonthInterestFree:
	case ApprovalPromotionsItemsThreeMonthsInterestFree:
	case ApprovalPromotionsItemsFirstMonthHalfInterest:

	default:
		return nil, fmt.Errorf("unexpected ApprovalPromotionsItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalPromotionsItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalPromotionsItems(ii)

	switch v {
	case ApprovalPromotionsItemsFirstMonthInterestFree:
	case ApprovalPromotionsItemsThreeMonthsInterestFree:
	case ApprovalPromotionsItemsFirstMonthHalfInterest:

	default:
		return fmt.Errorf("unexpected ApprovalPromotionsItems value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementStatus is an enum type.
type DataRequirementStatus string

// DataRequirementStatus values enumeration.
const (
	DataRequirementStatusRequired = DataRequirementStatus("required")
	DataRequirementStatusPending = DataRequirementStatus("pending")
	DataRequirementStatusCompleted = DataRequirementStatus("completed")
)

// MarshalJSON encodes JSON.
func (i DataRequirementStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementStatusRequired:
	case DataRequirementStatusPending:
	case DataRequirementStatusCompleted:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementStatus(ii)

	switch v {
	case DataRequirementStatusRequired:
	case DataRequirementStatusPending:
	case DataRequirementStatusCompleted:

	default:
		return fmt.Errorf("unexpected DataRequirementStatus value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementType is an enum type.
type DataRequirementType string

// DataRequirementType values enumeration.
const (
	DataRequirementTypeCc = DataRequirementType("cc")
	DataRequirementTypeBusCc = DataRequirementType("bus_cc")
	DataRequirementTypeDirGuarantor = DataRequirementType("dir_guarantor")
	DataRequirementTypeFraud = DataRequirementType("fraud")
	DataRequirementTypeDocs = DataRequirementType("docs")
	DataRequirementTypeEnhancedSecurityCheck = DataRequirementType("enhanced_security_check")
)

// MarshalJSON encodes JSON.
func (i DataRequirementType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementTypeCc:
	case DataRequirementTypeBusCc:
	case DataRequirementTypeDirGuarantor:
	case DataRequirementTypeFraud:
	case DataRequirementTypeDocs:
	case DataRequirementTypeEnhancedSecurityCheck:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementType(ii)

	switch v {
	case DataRequirementTypeCc:
	case DataRequirementTypeBusCc:
	case DataRequirementTypeDirGuarantor:
	case DataRequirementTypeFraud:
	case DataRequirementTypeDocs:
	case DataRequirementTypeEnhancedSecurityCheck:

	default:
		return fmt.Errorf("unexpected DataRequirementType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsType is an enum type.
type DataRequirementResolutionMethodsItemsType string

// DataRequirementResolutionMethodsItemsType values enumeration.
const (
	DataRequirementResolutionMethodsItemsTypeFileUpload = DataRequirementResolutionMethodsItemsType("file_upload")
	DataRequirementResolutionMethodsItemsTypeAccountLinking = DataRequirementResolutionMethodsItemsType("account_linking")
	DataRequirementResolutionMethodsItemsTypeDataSubmit = DataRequirementResolutionMethodsItemsType("data_submit")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsTypeFileUpload:
	case DataRequirementResolutionMethodsItemsTypeAccountLinking:
	case DataRequirementResolutionMethodsItemsTypeDataSubmit:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsType(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsTypeFileUpload:
	case DataRequirementResolutionMethodsItemsTypeAccountLinking:
	case DataRequirementResolutionMethodsItemsTypeDataSubmit:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsStatusType is an enum type.
type DataRequirementResolutionMethodsItemsStatusType string

// DataRequirementResolutionMethodsItemsStatusType values enumeration.
const (
	DataRequirementResolutionMethodsItemsStatusTypeNoActionYet = DataRequirementResolutionMethodsItemsStatusType("no_action_yet")
	DataRequirementResolutionMethodsItemsStatusTypePending = DataRequirementResolutionMethodsItemsStatusType("pending")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsStatusType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsStatusTypeNoActionYet:
	case DataRequirementResolutionMethodsItemsStatusTypePending:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsStatusType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsStatusType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsStatusType(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsStatusTypeNoActionYet:
	case DataRequirementResolutionMethodsItemsStatusTypePending:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsStatusType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsItemsItemsStatus is an enum type.
type DataRequirementResolutionMethodsItemsItemsItemsStatus string

// DataRequirementResolutionMethodsItemsItemsItemsStatus values enumeration.
const (
	DataRequirementResolutionMethodsItemsItemsItemsStatusPending = DataRequirementResolutionMethodsItemsItemsItemsStatus("pending")
	DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted = DataRequirementResolutionMethodsItemsItemsItemsStatus("completed")
	DataRequirementResolutionMethodsItemsItemsItemsStatusFailed = DataRequirementResolutionMethodsItemsItemsItemsStatus("failed")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsItemsItemsStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsItemsItemsStatusPending:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusFailed:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsItemsItemsStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsItemsItemsStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsItemsItemsStatus(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsItemsItemsStatusPending:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusFailed:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsItemsItemsStatus value: %v", v)
	}

	*i = v

	return nil
}

// WebhookPaymentInstructionDirection is an enum type.
type WebhookPaymentInstructionDirection string

// WebhookPaymentInstructionDirection values enumeration.
const (
	WebhookPaymentInstructionDirectionIwocaToCustomer = WebhookPaymentInstructionDirection("iwoca_to_customer")
	WebhookPaymentInstructionDirectionCustomerToIwoca = WebhookPaymentInstructionDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i WebhookPaymentInstructionDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case WebhookPaymentInstructionDirectionIwocaToCustomer:
	case WebhookPaymentInstructionDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected WebhookPaymentInstructionDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *WebhookPaymentInstructionDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := WebhookPaymentInstructionDirection(ii)

	switch v {
	case WebhookPaymentInstructionDirectionIwocaToCustomer:
	case WebhookPaymentInstructionDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected WebhookPaymentInstructionDirection value: %v", v)
	}

	*i = v

	return nil
}

// PostPartnerWebhookURLRequestHeaderXIWEventType is an enum type.
type PostPartnerWebhookURLRequestHeaderXIWEventType string

// PostPartnerWebhookURLRequestHeaderXIWEventType values enumeration.
const (
	PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged = PostPartnerWebhookURLRequestHeaderXIWEventType("approval_status_changed")
	PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments = PostPartnerWebhookURLRequestHeaderXIWEventType("instruct_payments")
	PostPartnerWebhookURLRequestHeaderXIWEventTypeCustomerFunded = PostPartnerWebhookURLRequestHeaderXIWEventType("customer_funded")
)

// MarshalJSON encodes JSON.
func (i PostPartnerWebhookURLRequestHeaderXIWEventType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeCustomerFunded:

	default:
		return nil, fmt.Errorf("unexpected PostPartnerWebhookURLRequestHeaderXIWEventType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostPartnerWebhookURLRequestHeaderXIWEventType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostPartnerWebhookURLRequestHeaderXIWEventType(ii)

	switch v {
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeCustomerFunded:

	default:
		return fmt.Errorf("unexpected PostPartnerWebhookURLRequestHeaderXIWEventType value: %v", v)
	}

	*i = v

	return nil
}

// Property01abfc is an enum type.
type Property01abfc string

// Property01abfc values enumeration.
const (
	Property01AbfcApprovalStatusChanged = Property01abfc("approval_status_changed")
	Property01AbfcInstructPayments = Property01abfc("instruct_payments")
	Property01AbfcCustomerFunded = Property01abfc("customer_funded")
)

// MarshalJSON encodes JSON.
func (i Property01abfc) MarshalJSON() ([]byte, error) {
	switch i {
	case Property01AbfcApprovalStatusChanged:
	case Property01AbfcInstructPayments:
	case Property01AbfcCustomerFunded:

	default:
		return nil, fmt.Errorf("unexpected Property01abfc value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *Property01abfc) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := Property01abfc(ii)

	switch v {
	case Property01AbfcApprovalStatusChanged:
	case Property01AbfcInstructPayments:
	case Property01AbfcCustomerFunded:

	default:
		return fmt.Errorf("unexpected Property01abfc value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode is an enum type.
type GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode string

// GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode values enumeration.
const (
	GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment = GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode("early_repayment")
	GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown = GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode("draw_down")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode(ii)

	switch v {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityRepaymentScheduleStateKeyRequestMode is an enum type.
type GetCreditFacilityRepaymentScheduleStateKeyRequestMode string

// GetCreditFacilityRepaymentScheduleStateKeyRequestMode values enumeration.
const (
	GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment = GetCreditFacilityRepaymentScheduleStateKeyRequestMode("early_repayment")
	GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown = GetCreditFacilityRepaymentScheduleStateKeyRequestMode("draw_down")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityRepaymentScheduleStateKeyRequestMode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestMode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityRepaymentScheduleStateKeyRequestMode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityRepaymentScheduleStateKeyRequestMode(ii)

	switch v {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestMode value: %v", v)
	}

	*i = v

	return nil
}

// RepaymentScheduleSummaryAnnualInterestRateRateType is an enum type.
type RepaymentScheduleSummaryAnnualInterestRateRateType string

// RepaymentScheduleSummaryAnnualInterestRateRateType values enumeration.
const (
	RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed = RepaymentScheduleSummaryAnnualInterestRateRateType("fixed")
	RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable = RepaymentScheduleSummaryAnnualInterestRateRateType("variable")
)

// MarshalJSON encodes JSON.
func (i RepaymentScheduleSummaryAnnualInterestRateRateType) MarshalJSON() ([]byte, error) {
	switch i {
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed:
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable:

	default:
		return nil, fmt.Errorf("unexpected RepaymentScheduleSummaryAnnualInterestRateRateType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *RepaymentScheduleSummaryAnnualInterestRateRateType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := RepaymentScheduleSummaryAnnualInterestRateRateType(ii)

	switch v {
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed:
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable:

	default:
		return fmt.Errorf("unexpected RepaymentScheduleSummaryAnnualInterestRateRateType value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat is an enum type.
type GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat string

// GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat values enumeration.
const (
	GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatPdf = GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat("pdf")
	GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatHTML = GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat("html")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatPdf:
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatHTML:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat(ii)

	switch v {
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatPdf:
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormatHTML:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestQueryFileFormat value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat is an enum type.
type GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat string

// GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat values enumeration.
const (
	GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatPdf = GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat("pdf")
	GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatHTML = GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat("html")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatPdf:
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatHTML:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat(ii)

	switch v {
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatPdf:
	case GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormatHTML:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityCustomerDocumentStateKeyDocumentIDDownloadRequestFileFormat value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsBrand is an enum type.
type GetPaymentMethodStateKeyResponseValueOKDataItemsBrand string

// GetPaymentMethodStateKeyResponseValueOKDataItemsBrand values enumeration.
const (
	GetPaymentMethodStateKeyResponseValueOKDataItemsBrandMastercard = GetPaymentMethodStateKeyResponseValueOKDataItemsBrand("mastercard")
	GetPaymentMethodStateKeyResponseValueOKDataItemsBrandVisa = GetPaymentMethodStateKeyResponseValueOKDataItemsBrand("visa")
	GetPaymentMethodStateKeyResponseValueOKDataItemsBrandOther = GetPaymentMethodStateKeyResponseValueOKDataItemsBrand("other")
)

// MarshalJSON encodes JSON.
func (i GetPaymentMethodStateKeyResponseValueOKDataItemsBrand) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandMastercard:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandVisa:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandOther:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsBrand value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentMethodStateKeyResponseValueOKDataItemsBrand) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentMethodStateKeyResponseValueOKDataItemsBrand(ii)

	switch v {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandMastercard:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandVisa:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsBrandOther:

	default:
		return fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsBrand value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus is an enum type.
type GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus string

// GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus values enumeration.
const (
	GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusInitiated = GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus("initiated")
	GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusSuccess = GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus("success")
	GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusFailure = GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus("failure")
)

// MarshalJSON encodes JSON.
func (i GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusInitiated:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusSuccess:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusFailure:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus(ii)

	switch v {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusInitiated:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusSuccess:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatusFailure:

	default:
		return fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsLastAttemptStatus value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType is an enum type.
type GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType string

// GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType values enumeration.
const (
	GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeCard = GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType("card")
	GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeBankAccount = GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType("bank_account")
)

// MarshalJSON encodes JSON.
func (i GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeCard:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeBankAccount:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType(ii)

	switch v {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeCard:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodTypeBankAccount:

	default:
		return fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsPaymentMethodType value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding is an enum type.
type GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding string

// GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding values enumeration.
const (
	GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingEnabled = GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding("enabled")
	GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingDisabled = GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding("disabled")
)

// MarshalJSON encodes JSON.
func (i GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingEnabled:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingDisabled:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding(ii)

	switch v {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingEnabled:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFundingDisabled:

	default:
		return fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsRolesFunding value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment is an enum type.
type GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment string

// GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment values enumeration.
const (
	GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentPrimary = GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment("primary")
	GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentBackup = GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment("backup")
	GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentDisabled = GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment("disabled")
)

// MarshalJSON encodes JSON.
func (i GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentPrimary:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentBackup:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentDisabled:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment(ii)

	switch v {
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentPrimary:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentBackup:
	case GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepaymentDisabled:

	default:
		return fmt.Errorf("unexpected GetPaymentMethodStateKeyResponseValueOKDataItemsRolesRepayment value: %v", v)
	}

	*i = v

	return nil
}

// PaymentMethodDataRolesFunding is an enum type.
type PaymentMethodDataRolesFunding string

// PaymentMethodDataRolesFunding values enumeration.
const (
	PaymentMethodDataRolesFundingEnabled = PaymentMethodDataRolesFunding("enabled")
	PaymentMethodDataRolesFundingDisabled = PaymentMethodDataRolesFunding("disabled")
)

// MarshalJSON encodes JSON.
func (i PaymentMethodDataRolesFunding) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentMethodDataRolesFundingEnabled:
	case PaymentMethodDataRolesFundingDisabled:

	default:
		return nil, fmt.Errorf("unexpected PaymentMethodDataRolesFunding value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentMethodDataRolesFunding) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentMethodDataRolesFunding(ii)

	switch v {
	case PaymentMethodDataRolesFundingEnabled:
	case PaymentMethodDataRolesFundingDisabled:

	default:
		return fmt.Errorf("unexpected PaymentMethodDataRolesFunding value: %v", v)
	}

	*i = v

	return nil
}

// PaymentMethodDataRolesRepayment is an enum type.
type PaymentMethodDataRolesRepayment string

// PaymentMethodDataRolesRepayment values enumeration.
const (
	PaymentMethodDataRolesRepaymentPrimary = PaymentMethodDataRolesRepayment("primary")
	PaymentMethodDataRolesRepaymentBackup = PaymentMethodDataRolesRepayment("backup")
	PaymentMethodDataRolesRepaymentDisabled = PaymentMethodDataRolesRepayment("disabled")
)

// MarshalJSON encodes JSON.
func (i PaymentMethodDataRolesRepayment) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentMethodDataRolesRepaymentPrimary:
	case PaymentMethodDataRolesRepaymentBackup:
	case PaymentMethodDataRolesRepaymentDisabled:

	default:
		return nil, fmt.Errorf("unexpected PaymentMethodDataRolesRepayment value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentMethodDataRolesRepayment) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentMethodDataRolesRepayment(ii)

	switch v {
	case PaymentMethodDataRolesRepaymentPrimary:
	case PaymentMethodDataRolesRepaymentBackup:
	case PaymentMethodDataRolesRepaymentDisabled:

	default:
		return fmt.Errorf("unexpected PaymentMethodDataRolesRepayment value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestQueryOutcome is an enum type.
type GetPaymentConfirmationRequestQueryOutcome string

// GetPaymentConfirmationRequestQueryOutcome values enumeration.
const (
	GetPaymentConfirmationRequestQueryOutcomeInitiated = GetPaymentConfirmationRequestQueryOutcome("initiated")
	GetPaymentConfirmationRequestQueryOutcomeSuccess = GetPaymentConfirmationRequestQueryOutcome("success")
	GetPaymentConfirmationRequestQueryOutcomeFailure = GetPaymentConfirmationRequestQueryOutcome("failure")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestQueryOutcome) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestQueryOutcomeInitiated:
	case GetPaymentConfirmationRequestQueryOutcomeSuccess:
	case GetPaymentConfirmationRequestQueryOutcomeFailure:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryOutcome value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestQueryOutcome) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestQueryOutcome(ii)

	switch v {
	case GetPaymentConfirmationRequestQueryOutcomeInitiated:
	case GetPaymentConfirmationRequestQueryOutcomeSuccess:
	case GetPaymentConfirmationRequestQueryOutcomeFailure:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryOutcome value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestQueryErrorCode is an enum type.
type GetPaymentConfirmationRequestQueryErrorCode string

// GetPaymentConfirmationRequestQueryErrorCode values enumeration.
const (
	GetPaymentConfirmationRequestQueryErrorCodeEmpty = GetPaymentConfirmationRequestQueryErrorCode("")
	GetPaymentConfirmationRequestQueryErrorCodeInsufficientFunds = GetPaymentConfirmationRequestQueryErrorCode("insufficient_funds")
	GetPaymentConfirmationRequestQueryErrorCodeTechnicalError = GetPaymentConfirmationRequestQueryErrorCode("technical_error")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestQueryErrorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestQueryErrorCodeEmpty:
	case GetPaymentConfirmationRequestQueryErrorCodeInsufficientFunds:
	case GetPaymentConfirmationRequestQueryErrorCodeTechnicalError:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryErrorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestQueryErrorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestQueryErrorCode(ii)

	switch v {
	case GetPaymentConfirmationRequestQueryErrorCodeEmpty:
	case GetPaymentConfirmationRequestQueryErrorCodeInsufficientFunds:
	case GetPaymentConfirmationRequestQueryErrorCodeTechnicalError:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryErrorCode value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestQueryDirection is an enum type.
type GetPaymentConfirmationRequestQueryDirection string

// GetPaymentConfirmationRequestQueryDirection values enumeration.
const (
	GetPaymentConfirmationRequestQueryDirectionIwocaToCustomer = GetPaymentConfirmationRequestQueryDirection("iwoca_to_customer")
	GetPaymentConfirmationRequestQueryDirectionCustomerToIwoca = GetPaymentConfirmationRequestQueryDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestQueryDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestQueryDirectionIwocaToCustomer:
	case GetPaymentConfirmationRequestQueryDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestQueryDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestQueryDirection(ii)

	switch v {
	case GetPaymentConfirmationRequestQueryDirectionIwocaToCustomer:
	case GetPaymentConfirmationRequestQueryDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestQueryDirection value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestOutcome is an enum type.
type GetPaymentConfirmationRequestOutcome string

// GetPaymentConfirmationRequestOutcome values enumeration.
const (
	GetPaymentConfirmationRequestOutcomeInitiated = GetPaymentConfirmationRequestOutcome("initiated")
	GetPaymentConfirmationRequestOutcomeSuccess = GetPaymentConfirmationRequestOutcome("success")
	GetPaymentConfirmationRequestOutcomeFailure = GetPaymentConfirmationRequestOutcome("failure")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestOutcome) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestOutcomeInitiated:
	case GetPaymentConfirmationRequestOutcomeSuccess:
	case GetPaymentConfirmationRequestOutcomeFailure:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestOutcome value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestOutcome) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestOutcome(ii)

	switch v {
	case GetPaymentConfirmationRequestOutcomeInitiated:
	case GetPaymentConfirmationRequestOutcomeSuccess:
	case GetPaymentConfirmationRequestOutcomeFailure:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestOutcome value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestErrorCode is an enum type.
type GetPaymentConfirmationRequestErrorCode string

// GetPaymentConfirmationRequestErrorCode values enumeration.
const (
	GetPaymentConfirmationRequestErrorCodeEmpty = GetPaymentConfirmationRequestErrorCode("")
	GetPaymentConfirmationRequestErrorCodeInsufficientFunds = GetPaymentConfirmationRequestErrorCode("insufficient_funds")
	GetPaymentConfirmationRequestErrorCodeTechnicalError = GetPaymentConfirmationRequestErrorCode("technical_error")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestErrorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestErrorCodeEmpty:
	case GetPaymentConfirmationRequestErrorCodeInsufficientFunds:
	case GetPaymentConfirmationRequestErrorCodeTechnicalError:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestErrorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestErrorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestErrorCode(ii)

	switch v {
	case GetPaymentConfirmationRequestErrorCodeEmpty:
	case GetPaymentConfirmationRequestErrorCodeInsufficientFunds:
	case GetPaymentConfirmationRequestErrorCodeTechnicalError:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestErrorCode value: %v", v)
	}

	*i = v

	return nil
}

// GetPaymentConfirmationRequestDirection is an enum type.
type GetPaymentConfirmationRequestDirection string

// GetPaymentConfirmationRequestDirection values enumeration.
const (
	GetPaymentConfirmationRequestDirectionIwocaToCustomer = GetPaymentConfirmationRequestDirection("iwoca_to_customer")
	GetPaymentConfirmationRequestDirectionCustomerToIwoca = GetPaymentConfirmationRequestDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i GetPaymentConfirmationRequestDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case GetPaymentConfirmationRequestDirectionIwocaToCustomer:
	case GetPaymentConfirmationRequestDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected GetPaymentConfirmationRequestDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetPaymentConfirmationRequestDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetPaymentConfirmationRequestDirection(ii)

	switch v {
	case GetPaymentConfirmationRequestDirectionIwocaToCustomer:
	case GetPaymentConfirmationRequestDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected GetPaymentConfirmationRequestDirection value: %v", v)
	}

	*i = v

	return nil
}

// PaymentInstructionDirection is an enum type.
type PaymentInstructionDirection string

// PaymentInstructionDirection values enumeration.
const (
	PaymentInstructionDirectionIwocaToCustomer = PaymentInstructionDirection("iwoca_to_customer")
	PaymentInstructionDirectionCustomerToIwoca = PaymentInstructionDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i PaymentInstructionDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentInstructionDirectionIwocaToCustomer:
	case PaymentInstructionDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected PaymentInstructionDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentInstructionDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentInstructionDirection(ii)

	switch v {
	case PaymentInstructionDirectionIwocaToCustomer:
	case PaymentInstructionDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected PaymentInstructionDirection value: %v", v)
	}

	*i = v

	return nil
}

// PaymentInstructionOutcome is an enum type.
type PaymentInstructionOutcome string

// PaymentInstructionOutcome values enumeration.
const (
	PaymentInstructionOutcomeInitiated = PaymentInstructionOutcome("initiated")
	PaymentInstructionOutcomeSuccess = PaymentInstructionOutcome("success")
	PaymentInstructionOutcomeFailure = PaymentInstructionOutcome("failure")
)

// MarshalJSON encodes JSON.
func (i PaymentInstructionOutcome) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentInstructionOutcomeInitiated:
	case PaymentInstructionOutcomeSuccess:
	case PaymentInstructionOutcomeFailure:

	default:
		return nil, fmt.Errorf("unexpected PaymentInstructionOutcome value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentInstructionOutcome) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentInstructionOutcome(ii)

	switch v {
	case PaymentInstructionOutcomeInitiated:
	case PaymentInstructionOutcomeSuccess:
	case PaymentInstructionOutcomeFailure:

	default:
		return fmt.Errorf("unexpected PaymentInstructionOutcome value: %v", v)
	}

	*i = v

	return nil
}

// PaymentInstructionOutcomeType2Outcome is an enum type.
type PaymentInstructionOutcomeType2Outcome string

// PaymentInstructionOutcomeType2Outcome values enumeration.
const (
	PaymentInstructionOutcomeType2OutcomeSuccess = PaymentInstructionOutcomeType2Outcome("success")
	PaymentInstructionOutcomeType2OutcomeFailure = PaymentInstructionOutcomeType2Outcome("failure")
)

// MarshalJSON encodes JSON.
func (i PaymentInstructionOutcomeType2Outcome) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentInstructionOutcomeType2OutcomeSuccess:
	case PaymentInstructionOutcomeType2OutcomeFailure:

	default:
		return nil, fmt.Errorf("unexpected PaymentInstructionOutcomeType2Outcome value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentInstructionOutcomeType2Outcome) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentInstructionOutcomeType2Outcome(ii)

	switch v {
	case PaymentInstructionOutcomeType2OutcomeSuccess:
	case PaymentInstructionOutcomeType2OutcomeFailure:

	default:
		return fmt.Errorf("unexpected PaymentInstructionOutcomeType2Outcome value: %v", v)
	}

	*i = v

	return nil
}

// PaymentInstructionOutcomeErrorCode is an enum type.
type PaymentInstructionOutcomeErrorCode string

// PaymentInstructionOutcomeErrorCode values enumeration.
const (
	PaymentInstructionOutcomeErrorCodeInsufficientFunds = PaymentInstructionOutcomeErrorCode("insufficient_funds")
	PaymentInstructionOutcomeErrorCodeTechnicalError = PaymentInstructionOutcomeErrorCode("technical_error")
)

// MarshalJSON encodes JSON.
func (i PaymentInstructionOutcomeErrorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentInstructionOutcomeErrorCodeInsufficientFunds:
	case PaymentInstructionOutcomeErrorCodeTechnicalError:

	default:
		return nil, fmt.Errorf("unexpected PaymentInstructionOutcomeErrorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentInstructionOutcomeErrorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentInstructionOutcomeErrorCode(ii)

	switch v {
	case PaymentInstructionOutcomeErrorCodeInsufficientFunds:
	case PaymentInstructionOutcomeErrorCodeTechnicalError:

	default:
		return fmt.Errorf("unexpected PaymentInstructionOutcomeErrorCode value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataLoanStatus is an enum type.
type CreditFacilityStatusDataLoanStatus string

// CreditFacilityStatusDataLoanStatus values enumeration.
const (
	CreditFacilityStatusDataLoanStatusOngoing = CreditFacilityStatusDataLoanStatus("ongoing")
	CreditFacilityStatusDataLoanStatusEnded = CreditFacilityStatusDataLoanStatus("ended")
	CreditFacilityStatusDataLoanStatusTopup = CreditFacilityStatusDataLoanStatus("topup")
	CreditFacilityStatusDataLoanStatusPending = CreditFacilityStatusDataLoanStatus("pending")
	CreditFacilityStatusDataLoanStatusOverdue = CreditFacilityStatusDataLoanStatus("overdue")
	CreditFacilityStatusDataLoanStatusDuetoday = CreditFacilityStatusDataLoanStatus("duetoday")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataLoanStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataLoanStatusOngoing:
	case CreditFacilityStatusDataLoanStatusEnded:
	case CreditFacilityStatusDataLoanStatusTopup:
	case CreditFacilityStatusDataLoanStatusPending:
	case CreditFacilityStatusDataLoanStatusOverdue:
	case CreditFacilityStatusDataLoanStatusDuetoday:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataLoanStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataLoanStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataLoanStatus(ii)

	switch v {
	case CreditFacilityStatusDataLoanStatusOngoing:
	case CreditFacilityStatusDataLoanStatusEnded:
	case CreditFacilityStatusDataLoanStatusTopup:
	case CreditFacilityStatusDataLoanStatusPending:
	case CreditFacilityStatusDataLoanStatusOverdue:
	case CreditFacilityStatusDataLoanStatusDuetoday:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataLoanStatus value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataCashflowsItemsType is an enum type.
type CreditFacilityStatusDataCashflowsItemsType string

// CreditFacilityStatusDataCashflowsItemsType values enumeration.
const (
	CreditFacilityStatusDataCashflowsItemsTypeFunding = CreditFacilityStatusDataCashflowsItemsType("funding")
	CreditFacilityStatusDataCashflowsItemsTypeRepayment = CreditFacilityStatusDataCashflowsItemsType("repayment")
	CreditFacilityStatusDataCashflowsItemsTypeReimbursement = CreditFacilityStatusDataCashflowsItemsType("reimbursement")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataCashflowsItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataCashflowsItemsTypeFunding:
	case CreditFacilityStatusDataCashflowsItemsTypeRepayment:
	case CreditFacilityStatusDataCashflowsItemsTypeReimbursement:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataCashflowsItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataCashflowsItemsType(ii)

	switch v {
	case CreditFacilityStatusDataCashflowsItemsTypeFunding:
	case CreditFacilityStatusDataCashflowsItemsTypeRepayment:
	case CreditFacilityStatusDataCashflowsItemsTypeReimbursement:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsType value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataCashflowsItemsDirection is an enum type.
type CreditFacilityStatusDataCashflowsItemsDirection string

// CreditFacilityStatusDataCashflowsItemsDirection values enumeration.
const (
	CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer = CreditFacilityStatusDataCashflowsItemsDirection("iwoca_to_customer")
	CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca = CreditFacilityStatusDataCashflowsItemsDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataCashflowsItemsDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer:
	case CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataCashflowsItemsDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataCashflowsItemsDirection(ii)

	switch v {
	case CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer:
	case CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsDirection value: %v", v)
	}

	*i = v

	return nil
}

// CompanyTypeIndicatorCode is an enum type.
type CompanyTypeIndicatorCode string

// CompanyTypeIndicatorCode values enumeration.
const (
	CompanyTypeIndicatorCodeL = CompanyTypeIndicatorCode("L")
	CompanyTypeIndicatorCodeN = CompanyTypeIndicatorCode("N")
	CompanyTypeIndicatorCodeO = CompanyTypeIndicatorCode("O")
)

// MarshalJSON encodes JSON.
func (i CompanyTypeIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyTypeIndicatorCodeL:
	case CompanyTypeIndicatorCodeN:
	case CompanyTypeIndicatorCodeO:

	default:
		return nil, fmt.Errorf("unexpected CompanyTypeIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyTypeIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyTypeIndicatorCode(ii)

	switch v {
	case CompanyTypeIndicatorCodeL:
	case CompanyTypeIndicatorCodeN:
	case CompanyTypeIndicatorCodeO:

	default:
		return fmt.Errorf("unexpected CompanyTypeIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// CompanyTypeIndicatorDescription is an enum type.
type CompanyTypeIndicatorDescription string

// CompanyTypeIndicatorDescription values enumeration.
const (
	CompanyTypeIndicatorDescriptionLimited = CompanyTypeIndicatorDescription("Limited")
	CompanyTypeIndicatorDescriptionNonLimited = CompanyTypeIndicatorDescription("Non-limited")
	CompanyTypeIndicatorDescriptionOther = CompanyTypeIndicatorDescription("Other")
)

// MarshalJSON encodes JSON.
func (i CompanyTypeIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyTypeIndicatorDescriptionLimited:
	case CompanyTypeIndicatorDescriptionNonLimited:
	case CompanyTypeIndicatorDescriptionOther:

	default:
		return nil, fmt.Errorf("unexpected CompanyTypeIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyTypeIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyTypeIndicatorDescription(ii)

	switch v {
	case CompanyTypeIndicatorDescriptionLimited:
	case CompanyTypeIndicatorDescriptionNonLimited:
	case CompanyTypeIndicatorDescriptionOther:

	default:
		return fmt.Errorf("unexpected CompanyTypeIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// FacilityTypeDescription is an enum type.
type FacilityTypeDescription string

// FacilityTypeDescription values enumeration.
const (
	FacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale = FacilityTypeDescription("Hire purchase (including Lease Purchase)/ Conditional sale")
	FacilityTypeDescriptionUnsecuredLoan = FacilityTypeDescription("Unsecured Loan")
	FacilityTypeDescriptionMortgage = FacilityTypeDescription("Mortgage")
	FacilityTypeDescriptionCreditCard = FacilityTypeDescription("Credit Card")
	FacilityTypeDescriptionCurrentAccount = FacilityTypeDescription("Current Account")
	FacilityTypeDescriptionSecuredLoanOrSecondMortgage = FacilityTypeDescription("Secured Loan or Second Mortgage")
	FacilityTypeDescriptionCreditSaleFixedTerm = FacilityTypeDescription("Credit Sale Fixed Term")
	FacilityTypeDescriptionFixedTermDeferredPayment = FacilityTypeDescription("Fixed Term Deferred Payment")
	FacilityTypeDescriptionVariableSubscription = FacilityTypeDescription("Variable Subscription")
	FacilityTypeDescriptionFinanceLease = FacilityTypeDescription("Finance Lease")
	FacilityTypeDescriptionOperatingLease = FacilityTypeDescription("Operating Lease")
	FacilityTypeDescriptionFlexibleMortgages = FacilityTypeDescription("Flexible Mortgages")
	FacilityTypeDescriptionConsolidatedDebt = FacilityTypeDescription("Consolidated Debt")
	FacilityTypeDescriptionPrimaryLease = FacilityTypeDescription("Primary Lease")
	FacilityTypeDescriptionSecondaryLease = FacilityTypeDescription("Secondary Lease")
	FacilityTypeDescriptionDealerBuyBack = FacilityTypeDescription("Dealer Buy-Back")
	FacilityTypeDescriptionFixedTermAccount = FacilityTypeDescription("Fixed Term Account")
	FacilityTypeDescriptionVariableTermAccount = FacilityTypeDescription("Variable Term Account")
	FacilityTypeDescriptionContractHire = FacilityTypeDescription("Contract Hire")
)

// MarshalJSON encodes JSON.
func (i FacilityTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case FacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case FacilityTypeDescriptionUnsecuredLoan:
	case FacilityTypeDescriptionMortgage:
	case FacilityTypeDescriptionCreditCard:
	case FacilityTypeDescriptionCurrentAccount:
	case FacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case FacilityTypeDescriptionCreditSaleFixedTerm:
	case FacilityTypeDescriptionFixedTermDeferredPayment:
	case FacilityTypeDescriptionVariableSubscription:
	case FacilityTypeDescriptionFinanceLease:
	case FacilityTypeDescriptionOperatingLease:
	case FacilityTypeDescriptionFlexibleMortgages:
	case FacilityTypeDescriptionConsolidatedDebt:
	case FacilityTypeDescriptionPrimaryLease:
	case FacilityTypeDescriptionSecondaryLease:
	case FacilityTypeDescriptionDealerBuyBack:
	case FacilityTypeDescriptionFixedTermAccount:
	case FacilityTypeDescriptionVariableTermAccount:
	case FacilityTypeDescriptionContractHire:

	default:
		return nil, fmt.Errorf("unexpected FacilityTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *FacilityTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := FacilityTypeDescription(ii)

	switch v {
	case FacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case FacilityTypeDescriptionUnsecuredLoan:
	case FacilityTypeDescriptionMortgage:
	case FacilityTypeDescriptionCreditCard:
	case FacilityTypeDescriptionCurrentAccount:
	case FacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case FacilityTypeDescriptionCreditSaleFixedTerm:
	case FacilityTypeDescriptionFixedTermDeferredPayment:
	case FacilityTypeDescriptionVariableSubscription:
	case FacilityTypeDescriptionFinanceLease:
	case FacilityTypeDescriptionOperatingLease:
	case FacilityTypeDescriptionFlexibleMortgages:
	case FacilityTypeDescriptionConsolidatedDebt:
	case FacilityTypeDescriptionPrimaryLease:
	case FacilityTypeDescriptionSecondaryLease:
	case FacilityTypeDescriptionDealerBuyBack:
	case FacilityTypeDescriptionFixedTermAccount:
	case FacilityTypeDescriptionVariableTermAccount:
	case FacilityTypeDescriptionContractHire:

	default:
		return fmt.Errorf("unexpected FacilityTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// FlagSettingCode is an enum type.
type FlagSettingCode string

// FlagSettingCode values enumeration.
const (
	FlagSettingCodeD = FlagSettingCode("D")
	FlagSettingCodeE = FlagSettingCode("E")
	FlagSettingCodeP = FlagSettingCode("P")
	FlagSettingCodeC = FlagSettingCode("C")
	FlagSettingCodeS = FlagSettingCode("S")
	FlagSettingCodeG = FlagSettingCode("G")
	FlagSettingCodeR = FlagSettingCode("R")
	FlagSettingCodeV = FlagSettingCode("V")
	FlagSettingCodeA = FlagSettingCode("A")
	FlagSettingCodeM = FlagSettingCode("M")
	FlagSettingCodeI = FlagSettingCode("I")
	FlagSettingCodeQ = FlagSettingCode("Q")
)

// MarshalJSON encodes JSON.
func (i FlagSettingCode) MarshalJSON() ([]byte, error) {
	switch i {
	case FlagSettingCodeD:
	case FlagSettingCodeE:
	case FlagSettingCodeP:
	case FlagSettingCodeC:
	case FlagSettingCodeS:
	case FlagSettingCodeG:
	case FlagSettingCodeR:
	case FlagSettingCodeV:
	case FlagSettingCodeA:
	case FlagSettingCodeM:
	case FlagSettingCodeI:
	case FlagSettingCodeQ:

	default:
		return nil, fmt.Errorf("unexpected FlagSettingCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *FlagSettingCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := FlagSettingCode(ii)

	switch v {
	case FlagSettingCodeD:
	case FlagSettingCodeE:
	case FlagSettingCodeP:
	case FlagSettingCodeC:
	case FlagSettingCodeS:
	case FlagSettingCodeG:
	case FlagSettingCodeR:
	case FlagSettingCodeV:
	case FlagSettingCodeA:
	case FlagSettingCodeM:
	case FlagSettingCodeI:
	case FlagSettingCodeQ:

	default:
		return fmt.Errorf("unexpected FlagSettingCode value: %v", v)
	}

	*i = v

	return nil
}

// FlagSettingDescription is an enum type.
type FlagSettingDescription string

// FlagSettingDescription values enumeration.
const (
	FlagSettingDescriptionDeceased = FlagSettingDescription("Deceased")
	FlagSettingDescriptionBusinessClosure = FlagSettingDescription("Business Closure")
	FlagSettingDescriptionPartialOrNoSettlement = FlagSettingDescription("Partial or No settlement")
	FlagSettingDescriptionDebtAssignedNonCCDSMember = FlagSettingDescription("Debt assigned (non CCDS member)")
	FlagSettingDescriptionDebtSoldToCCDSMember = FlagSettingDescription("Debt sold to CCDS member")
	FlagSettingDescriptionGoneAway = FlagSettingDescription("Gone away")
	FlagSettingDescriptionRecourse = FlagSettingDescription("Recourse")
	FlagSettingDescriptionVoluntaryTermination = FlagSettingDescription("Voluntary termination")
	FlagSettingDescriptionArrangement = FlagSettingDescription("Arrangement")
	FlagSettingDescriptionDebtManagementProgramme = FlagSettingDescription("Debt management programme")
	FlagSettingDescriptionThirdPartyPaymentFlag = FlagSettingDescription("Third Party Payment flag")
	FlagSettingDescriptionAccountQuery = FlagSettingDescription("Account query")
)

// MarshalJSON encodes JSON.
func (i FlagSettingDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case FlagSettingDescriptionDeceased:
	case FlagSettingDescriptionBusinessClosure:
	case FlagSettingDescriptionPartialOrNoSettlement:
	case FlagSettingDescriptionDebtAssignedNonCCDSMember:
	case FlagSettingDescriptionDebtSoldToCCDSMember:
	case FlagSettingDescriptionGoneAway:
	case FlagSettingDescriptionRecourse:
	case FlagSettingDescriptionVoluntaryTermination:
	case FlagSettingDescriptionArrangement:
	case FlagSettingDescriptionDebtManagementProgramme:
	case FlagSettingDescriptionThirdPartyPaymentFlag:
	case FlagSettingDescriptionAccountQuery:

	default:
		return nil, fmt.Errorf("unexpected FlagSettingDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *FlagSettingDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := FlagSettingDescription(ii)

	switch v {
	case FlagSettingDescriptionDeceased:
	case FlagSettingDescriptionBusinessClosure:
	case FlagSettingDescriptionPartialOrNoSettlement:
	case FlagSettingDescriptionDebtAssignedNonCCDSMember:
	case FlagSettingDescriptionDebtSoldToCCDSMember:
	case FlagSettingDescriptionGoneAway:
	case FlagSettingDescriptionRecourse:
	case FlagSettingDescriptionVoluntaryTermination:
	case FlagSettingDescriptionArrangement:
	case FlagSettingDescriptionDebtManagementProgramme:
	case FlagSettingDescriptionThirdPartyPaymentFlag:
	case FlagSettingDescriptionAccountQuery:

	default:
		return fmt.Errorf("unexpected FlagSettingDescription value: %v", v)
	}

	*i = v

	return nil
}

// CompanyMatchStatusCode is an enum type.
type CompanyMatchStatusCode string

// CompanyMatchStatusCode values enumeration.
const (
	CompanyMatchStatusCodeC = CompanyMatchStatusCode("C")
	CompanyMatchStatusCodeN = CompanyMatchStatusCode("N")
	CompanyMatchStatusCodeL = CompanyMatchStatusCode("L")
)

// MarshalJSON encodes JSON.
func (i CompanyMatchStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyMatchStatusCodeC:
	case CompanyMatchStatusCodeN:
	case CompanyMatchStatusCodeL:

	default:
		return nil, fmt.Errorf("unexpected CompanyMatchStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyMatchStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyMatchStatusCode(ii)

	switch v {
	case CompanyMatchStatusCodeC:
	case CompanyMatchStatusCodeN:
	case CompanyMatchStatusCodeL:

	default:
		return fmt.Errorf("unexpected CompanyMatchStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// CompanyMatchStatusDescription is an enum type.
type CompanyMatchStatusDescription string

// CompanyMatchStatusDescription values enumeration.
const (
	CompanyMatchStatusDescriptionCorporation = CompanyMatchStatusDescription("Corporation")
	CompanyMatchStatusDescriptionNonLimited = CompanyMatchStatusDescription("Non-limited")
	CompanyMatchStatusDescriptionLimited = CompanyMatchStatusDescription("Limited")
)

// MarshalJSON encodes JSON.
func (i CompanyMatchStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyMatchStatusDescriptionCorporation:
	case CompanyMatchStatusDescriptionNonLimited:
	case CompanyMatchStatusDescriptionLimited:

	default:
		return nil, fmt.Errorf("unexpected CompanyMatchStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyMatchStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyMatchStatusDescription(ii)

	switch v {
	case CompanyMatchStatusDescriptionCorporation:
	case CompanyMatchStatusDescriptionNonLimited:
	case CompanyMatchStatusDescriptionLimited:

	default:
		return fmt.Errorf("unexpected CompanyMatchStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// SpecialInstructionIndicatorCode is an enum type.
type SpecialInstructionIndicatorCode string

// SpecialInstructionIndicatorCode values enumeration.
const (
	SpecialInstructionIndicatorCodeD = SpecialInstructionIndicatorCode("D")
	SpecialInstructionIndicatorCodeL = SpecialInstructionIndicatorCode("L")
	SpecialInstructionIndicatorCodeX = SpecialInstructionIndicatorCode("X")
	SpecialInstructionIndicatorCodeF = SpecialInstructionIndicatorCode("F")
	SpecialInstructionIndicatorCodeA = SpecialInstructionIndicatorCode("A")
)

// MarshalJSON encodes JSON.
func (i SpecialInstructionIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case SpecialInstructionIndicatorCodeD:
	case SpecialInstructionIndicatorCodeL:
	case SpecialInstructionIndicatorCodeX:
	case SpecialInstructionIndicatorCodeF:
	case SpecialInstructionIndicatorCodeA:

	default:
		return nil, fmt.Errorf("unexpected SpecialInstructionIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *SpecialInstructionIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := SpecialInstructionIndicatorCode(ii)

	switch v {
	case SpecialInstructionIndicatorCodeD:
	case SpecialInstructionIndicatorCodeL:
	case SpecialInstructionIndicatorCodeX:
	case SpecialInstructionIndicatorCodeF:
	case SpecialInstructionIndicatorCodeA:

	default:
		return fmt.Errorf("unexpected SpecialInstructionIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// SpecialInstructionIndicatorDescription is an enum type.
type SpecialInstructionIndicatorDescription string

// SpecialInstructionIndicatorDescription values enumeration.
const (
	SpecialInstructionIndicatorDescriptionDeleted = SpecialInstructionIndicatorDescription("Deleted")
	SpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment = SpecialInstructionIndicatorDescription("Temporary name or address amendment")
	SpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium = SpecialInstructionIndicatorDescription("Customer ceases to meet the definition of a small or medium")
	SpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer = SpecialInstructionIndicatorDescription("Subject ceases to be a customer")
	SpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged = SpecialInstructionIndicatorDescription("Business name or address of a default (status 8) record has changed")
)

// MarshalJSON encodes JSON.
func (i SpecialInstructionIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case SpecialInstructionIndicatorDescriptionDeleted:
	case SpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case SpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case SpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case SpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return nil, fmt.Errorf("unexpected SpecialInstructionIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *SpecialInstructionIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := SpecialInstructionIndicatorDescription(ii)

	switch v {
	case SpecialInstructionIndicatorDescriptionDeleted:
	case SpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case SpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case SpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case SpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return fmt.Errorf("unexpected SpecialInstructionIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode("L")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeO = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode("O")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeO:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCodeO:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription("Limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionNonLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription("Non-limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionOther = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription("Other")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionOther:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescriptionOther:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsCompanyTypeIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// TurnoverTypeCode is an enum type.
type TurnoverTypeCode string

// TurnoverTypeCode values enumeration.
const (
	TurnoverTypeCodeN = TurnoverTypeCode("N")
	TurnoverTypeCodeG = TurnoverTypeCode("G")
)

// MarshalJSON encodes JSON.
func (i TurnoverTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case TurnoverTypeCodeN:
	case TurnoverTypeCodeG:

	default:
		return nil, fmt.Errorf("unexpected TurnoverTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *TurnoverTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := TurnoverTypeCode(ii)

	switch v {
	case TurnoverTypeCodeN:
	case TurnoverTypeCodeG:

	default:
		return fmt.Errorf("unexpected TurnoverTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// TurnoverTypeDescription is an enum type.
type TurnoverTypeDescription string

// TurnoverTypeDescription values enumeration.
const (
	TurnoverTypeDescriptionNet = TurnoverTypeDescription("Net")
	TurnoverTypeDescriptionGross = TurnoverTypeDescription("Gross")
)

// MarshalJSON encodes JSON.
func (i TurnoverTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case TurnoverTypeDescriptionNet:
	case TurnoverTypeDescriptionGross:

	default:
		return nil, fmt.Errorf("unexpected TurnoverTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *TurnoverTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := TurnoverTypeDescription(ii)

	switch v {
	case TurnoverTypeDescriptionNet:
	case TurnoverTypeDescriptionGross:

	default:
		return fmt.Errorf("unexpected TurnoverTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeG = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode("G")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeG:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCodeG:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionNet = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription("Net")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionGross = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription("Gross")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionNet:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionGross:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionNet:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescriptionGross:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsDebitTurnOverNetGrossDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Hire purchase (including Lease Purchase)/ Conditional sale")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionUnsecuredLoan = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Unsecured Loan")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionMortgage = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Mortgage")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditCard = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Credit Card")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCurrentAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Current Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Secured Loan or Second Mortgage")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Credit Sale Fixed Term")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Fixed Term Deferred Payment")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableSubscription = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Variable Subscription")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFinanceLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Finance Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionOperatingLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Operating Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFlexibleMortgages = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Flexible Mortgages")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionConsolidatedDebt = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Consolidated Debt")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionPrimaryLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Primary Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecondaryLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Secondary Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionDealerBuyBack = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Dealer Buy-Back")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Fixed Term Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableTermAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Variable Term Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionContractHire = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription("Contract Hire")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionUnsecuredLoan:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditCard:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCurrentAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableSubscription:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFinanceLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionOperatingLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFlexibleMortgages:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionConsolidatedDebt:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionPrimaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecondaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionDealerBuyBack:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionContractHire:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionUnsecuredLoan:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditCard:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCurrentAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableSubscription:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFinanceLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionOperatingLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFlexibleMortgages:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionConsolidatedDebt:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionPrimaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionSecondaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionDealerBuyBack:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionFixedTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionVariableTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescriptionContractHire:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFacilityTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeE = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("E")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeP = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("P")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("C")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeS = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("S")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeG = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("G")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeR = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("R")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeV = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("V")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("A")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeM = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("M")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeI = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("I")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeQ = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode("Q")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeM:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeQ:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeM:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCodeQ:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDeceased = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Deceased")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionBusinessClosure = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Business Closure")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionPartialOrNoSettlement = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Partial or No settlement")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Debt assigned (non CCDS member)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Debt sold to CCDS member")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionGoneAway = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Gone away")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionRecourse = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Recourse")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionVoluntaryTermination = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Voluntary termination")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionArrangement = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Arrangement")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtManagementProgramme = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Debt management programme")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Third Party Payment flag")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionAccountQuery = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription("Account query")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDeceased:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionBusinessClosure:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionPartialOrNoSettlement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionGoneAway:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionRecourse:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionVoluntaryTermination:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionArrangement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtManagementProgramme:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionAccountQuery:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDeceased:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionBusinessClosure:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionPartialOrNoSettlement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionGoneAway:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionRecourse:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionVoluntaryTermination:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionArrangement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionDebtManagementProgramme:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescriptionAccountQuery:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsFlagSettingDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode("C")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode("L")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeL:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCodeL:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionCorporation = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription("Corporation")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionNonLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription("Non-limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription("Limited")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionCorporation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionLimited:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionCorporation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescriptionLimited:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsMatchStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode("L")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeX = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode("X")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeF = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode("F")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode("A")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeX:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeF:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeA:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeX:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeF:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCodeA:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionDeleted = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription("Deleted")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription("Temporary name or address amendment")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription("Customer ceases to meet the definition of a small or medium")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription("Subject ceases to be a customer")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription("Business name or address of a default (status 8) record has changed")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionDeleted:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionDeleted:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsCurrentAccountsItemsSpecialInstructionIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode("L")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeO = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode("O")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeO:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCodeO:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription("Limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionNonLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription("Non-limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionOther = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription("Other")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionOther:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescriptionOther:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsCompanyTypeIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Hire purchase (including Lease Purchase)/ Conditional sale")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionUnsecuredLoan = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Unsecured Loan")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionMortgage = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Mortgage")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditCard = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Credit Card")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCurrentAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Current Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Secured Loan or Second Mortgage")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Credit Sale Fixed Term")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Fixed Term Deferred Payment")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableSubscription = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Variable Subscription")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFinanceLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Finance Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionOperatingLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Operating Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFlexibleMortgages = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Flexible Mortgages")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionConsolidatedDebt = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Consolidated Debt")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionPrimaryLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Primary Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecondaryLease = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Secondary Lease")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionDealerBuyBack = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Dealer Buy-Back")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Fixed Term Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableTermAccount = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Variable Term Account")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionContractHire = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription("Contract Hire")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionUnsecuredLoan:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditCard:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCurrentAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableSubscription:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFinanceLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionOperatingLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFlexibleMortgages:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionConsolidatedDebt:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionPrimaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecondaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionDealerBuyBack:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionContractHire:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionHirePurchaseIncludingLeasePurchaseConditionalSale:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionUnsecuredLoan:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditCard:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCurrentAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecuredLoanOrSecondMortgage:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionCreditSaleFixedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermDeferredPayment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableSubscription:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFinanceLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionOperatingLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFlexibleMortgages:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionConsolidatedDebt:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionPrimaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionSecondaryLease:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionDealerBuyBack:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionFixedTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionVariableTermAccount:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescriptionContractHire:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFacilityTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeE = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("E")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeP = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("P")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("C")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeS = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("S")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeG = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("G")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeR = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("R")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeV = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("V")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("A")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeM = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("M")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeI = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("I")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeQ = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode("Q")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeM:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeQ:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeM:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCodeQ:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDeceased = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Deceased")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionBusinessClosure = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Business Closure")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionPartialOrNoSettlement = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Partial or No settlement")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Debt assigned (non CCDS member)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Debt sold to CCDS member")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionGoneAway = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Gone away")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionRecourse = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Recourse")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionVoluntaryTermination = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Voluntary termination")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionArrangement = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Arrangement")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtManagementProgramme = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Debt management programme")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Third Party Payment flag")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionAccountQuery = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription("Account query")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDeceased:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionBusinessClosure:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionPartialOrNoSettlement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionGoneAway:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionRecourse:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionVoluntaryTermination:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionArrangement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtManagementProgramme:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionAccountQuery:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDeceased:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionBusinessClosure:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionPartialOrNoSettlement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtAssignedNonCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtSoldToCCDSMember:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionGoneAway:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionRecourse:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionVoluntaryTermination:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionArrangement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionDebtManagementProgramme:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionThirdPartyPaymentFlag:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescriptionAccountQuery:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsFlagSettingDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode("C")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode("L")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeL:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCodeL:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionCorporation = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription("Corporation")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionNonLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription("Non-limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription("Limited")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionCorporation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionLimited:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionCorporation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionNonLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescriptionLimited:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsMatchStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// PaymentFrequencyCode is an enum type.
type PaymentFrequencyCode string

// PaymentFrequencyCode values enumeration.
const (
	PaymentFrequencyCodeA = PaymentFrequencyCode("A")
	PaymentFrequencyCodeD = PaymentFrequencyCode("D")
	PaymentFrequencyCodeF = PaymentFrequencyCode("F")
	PaymentFrequencyCodeM = PaymentFrequencyCode("M")
	PaymentFrequencyCodeP = PaymentFrequencyCode("P")
	PaymentFrequencyCodeQ = PaymentFrequencyCode("Q")
	PaymentFrequencyCodeW = PaymentFrequencyCode("W")
)

// MarshalJSON encodes JSON.
func (i PaymentFrequencyCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentFrequencyCodeA:
	case PaymentFrequencyCodeD:
	case PaymentFrequencyCodeF:
	case PaymentFrequencyCodeM:
	case PaymentFrequencyCodeP:
	case PaymentFrequencyCodeQ:
	case PaymentFrequencyCodeW:

	default:
		return nil, fmt.Errorf("unexpected PaymentFrequencyCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentFrequencyCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentFrequencyCode(ii)

	switch v {
	case PaymentFrequencyCodeA:
	case PaymentFrequencyCodeD:
	case PaymentFrequencyCodeF:
	case PaymentFrequencyCodeM:
	case PaymentFrequencyCodeP:
	case PaymentFrequencyCodeQ:
	case PaymentFrequencyCodeW:

	default:
		return fmt.Errorf("unexpected PaymentFrequencyCode value: %v", v)
	}

	*i = v

	return nil
}

// PaymentFrequencyDescription is an enum type.
type PaymentFrequencyDescription string

// PaymentFrequencyDescription values enumeration.
const (
	PaymentFrequencyDescriptionAnnually = PaymentFrequencyDescription("Annually")
	PaymentFrequencyDescriptionDaily = PaymentFrequencyDescription("Daily")
	PaymentFrequencyDescriptionFortnightly = PaymentFrequencyDescription("Fortnightly")
	PaymentFrequencyDescriptionMonthly = PaymentFrequencyDescription("Monthly")
	PaymentFrequencyDescriptionPeriodically = PaymentFrequencyDescription("Periodically")
	PaymentFrequencyDescriptionQuarterly = PaymentFrequencyDescription("Quarterly")
	PaymentFrequencyDescriptionWeekly = PaymentFrequencyDescription("Weekly")
)

// MarshalJSON encodes JSON.
func (i PaymentFrequencyDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PaymentFrequencyDescriptionAnnually:
	case PaymentFrequencyDescriptionDaily:
	case PaymentFrequencyDescriptionFortnightly:
	case PaymentFrequencyDescriptionMonthly:
	case PaymentFrequencyDescriptionPeriodically:
	case PaymentFrequencyDescriptionQuarterly:
	case PaymentFrequencyDescriptionWeekly:

	default:
		return nil, fmt.Errorf("unexpected PaymentFrequencyDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PaymentFrequencyDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PaymentFrequencyDescription(ii)

	switch v {
	case PaymentFrequencyDescriptionAnnually:
	case PaymentFrequencyDescriptionDaily:
	case PaymentFrequencyDescriptionFortnightly:
	case PaymentFrequencyDescriptionMonthly:
	case PaymentFrequencyDescriptionPeriodically:
	case PaymentFrequencyDescriptionQuarterly:
	case PaymentFrequencyDescriptionWeekly:

	default:
		return fmt.Errorf("unexpected PaymentFrequencyDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode("L")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeX = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode("X")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeF = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode("F")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode("A")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeX:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeF:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeA:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeX:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeF:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCodeA:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionDeleted = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription("Deleted")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription("Temporary name or address amendment")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription("Customer ceases to meet the definition of a small or medium")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription("Subject ceases to be a customer")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription("Business name or address of a default (status 8) record has changed")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionDeleted:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionDeleted:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionTemporaryNameOrAddressAmendment:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionCustomerCeasesToMeetTheDefinitionOfASmallOrMedium:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionSubjectCeasesToBeACustomer:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescriptionBusinessNameOrAddressOfADefaultStatus8RecordHasChanged:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportCcdsLoanAccountsItemsSpecialInstructionIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// AddressLine5ATAddressType is an enum type.
type AddressLine5ATAddressType string

// AddressLine5ATAddressType values enumeration.
const (
	AddressLine5ATAddressTypePublicAddress = AddressLine5ATAddressType("Public Address")
	AddressLine5ATAddressTypePrivateAddress = AddressLine5ATAddressType("Private Address")
	AddressLine5ATAddressTypeTradingAddress = AddressLine5ATAddressType("Trading Address")
	AddressLine5ATAddressTypeDirectorAddress = AddressLine5ATAddressType("Director Address")
	AddressLine5ATAddressTypeRegisteredOffice = AddressLine5ATAddressType("Registered Office")
	AddressLine5ATAddressTypeRegOfficeAndDirectors = AddressLine5ATAddressType("Reg Office and Directors")
)

// MarshalJSON encodes JSON.
func (i AddressLine5ATAddressType) MarshalJSON() ([]byte, error) {
	switch i {
	case AddressLine5ATAddressTypePublicAddress:
	case AddressLine5ATAddressTypePrivateAddress:
	case AddressLine5ATAddressTypeTradingAddress:
	case AddressLine5ATAddressTypeDirectorAddress:
	case AddressLine5ATAddressTypeRegisteredOffice:
	case AddressLine5ATAddressTypeRegOfficeAndDirectors:

	default:
		return nil, fmt.Errorf("unexpected AddressLine5ATAddressType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AddressLine5ATAddressType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AddressLine5ATAddressType(ii)

	switch v {
	case AddressLine5ATAddressTypePublicAddress:
	case AddressLine5ATAddressTypePrivateAddress:
	case AddressLine5ATAddressTypeTradingAddress:
	case AddressLine5ATAddressTypeDirectorAddress:
	case AddressLine5ATAddressTypeRegisteredOffice:
	case AddressLine5ATAddressTypeRegOfficeAndDirectors:

	default:
		return fmt.Errorf("unexpected AddressLine5ATAddressType value: %v", v)
	}

	*i = v

	return nil
}

// AppointmentTypeCode is an enum type.
type AppointmentTypeCode string

// AppointmentTypeCode values enumeration.
const (
	AppointmentTypeCodeC = AppointmentTypeCode("C")
	AppointmentTypeCodeD = AppointmentTypeCode("D")
	AppointmentTypeCodePC = AppointmentTypeCode("PC")
	AppointmentTypeCodePD = AppointmentTypeCode("PD")
	AppointmentTypeCodeM = AppointmentTypeCode("M")
	AppointmentTypeCodeG = AppointmentTypeCode("G")
	AppointmentTypeCodePM = AppointmentTypeCode("PM")
	AppointmentTypeCodePG = AppointmentTypeCode("PG")
	AppointmentTypeCodeU = AppointmentTypeCode("U")
	AppointmentTypeCodeKP = AppointmentTypeCode("KP")
)

// MarshalJSON encodes JSON.
func (i AppointmentTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case AppointmentTypeCodeC:
	case AppointmentTypeCodeD:
	case AppointmentTypeCodePC:
	case AppointmentTypeCodePD:
	case AppointmentTypeCodeM:
	case AppointmentTypeCodeG:
	case AppointmentTypeCodePM:
	case AppointmentTypeCodePG:
	case AppointmentTypeCodeU:
	case AppointmentTypeCodeKP:

	default:
		return nil, fmt.Errorf("unexpected AppointmentTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AppointmentTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AppointmentTypeCode(ii)

	switch v {
	case AppointmentTypeCodeC:
	case AppointmentTypeCodeD:
	case AppointmentTypeCodePC:
	case AppointmentTypeCodePD:
	case AppointmentTypeCodeM:
	case AppointmentTypeCodeG:
	case AppointmentTypeCodePM:
	case AppointmentTypeCodePG:
	case AppointmentTypeCodeU:
	case AppointmentTypeCodeKP:

	default:
		return fmt.Errorf("unexpected AppointmentTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// AppointmentTypeDescription is an enum type.
type AppointmentTypeDescription string

// AppointmentTypeDescription values enumeration.
const (
	AppointmentTypeDescriptionCompanySecretary = AppointmentTypeDescription("Company Secretary")
	AppointmentTypeDescriptionDirector = AppointmentTypeDescription("Director")
	AppointmentTypeDescriptionPreviousCompanySecretary = AppointmentTypeDescription("Previous Company Secretary")
	AppointmentTypeDescriptionPreviousDirector = AppointmentTypeDescription("Previous Director")
	AppointmentTypeDescriptionMemberOfLLP = AppointmentTypeDescription("Member (of LLP)")
	AppointmentTypeDescriptionDesignatedMemberOfLLP = AppointmentTypeDescription("Designated Member (of LLP)")
	AppointmentTypeDescriptionPreviousMemberOfLLP = AppointmentTypeDescription("Previous Member (of LLP)")
	AppointmentTypeDescriptionPreviousDesignatedMemberOfLLP = AppointmentTypeDescription("Previous Designated Member (of LLP)")
	AppointmentTypeDescriptionUnknown = AppointmentTypeDescription("Unknown")
	AppointmentTypeDescriptionKeyPersonnel = AppointmentTypeDescription("Key Personnel")
)

// MarshalJSON encodes JSON.
func (i AppointmentTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case AppointmentTypeDescriptionCompanySecretary:
	case AppointmentTypeDescriptionDirector:
	case AppointmentTypeDescriptionPreviousCompanySecretary:
	case AppointmentTypeDescriptionPreviousDirector:
	case AppointmentTypeDescriptionMemberOfLLP:
	case AppointmentTypeDescriptionDesignatedMemberOfLLP:
	case AppointmentTypeDescriptionPreviousMemberOfLLP:
	case AppointmentTypeDescriptionPreviousDesignatedMemberOfLLP:
	case AppointmentTypeDescriptionUnknown:
	case AppointmentTypeDescriptionKeyPersonnel:

	default:
		return nil, fmt.Errorf("unexpected AppointmentTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AppointmentTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AppointmentTypeDescription(ii)

	switch v {
	case AppointmentTypeDescriptionCompanySecretary:
	case AppointmentTypeDescriptionDirector:
	case AppointmentTypeDescriptionPreviousCompanySecretary:
	case AppointmentTypeDescriptionPreviousDirector:
	case AppointmentTypeDescriptionMemberOfLLP:
	case AppointmentTypeDescriptionDesignatedMemberOfLLP:
	case AppointmentTypeDescriptionPreviousMemberOfLLP:
	case AppointmentTypeDescriptionPreviousDesignatedMemberOfLLP:
	case AppointmentTypeDescriptionUnknown:
	case AppointmentTypeDescriptionKeyPersonnel:

	default:
		return fmt.Errorf("unexpected AppointmentTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// MatchStatusCode is an enum type.
type MatchStatusCode string

// MatchStatusCode values enumeration.
const (
	MatchStatusCodeL = MatchStatusCode("L")
	MatchStatusCodeD = MatchStatusCode("D")
	MatchStatusCodeE = MatchStatusCode("E")
	MatchStatusCodeP = MatchStatusCode("P")
	MatchStatusCodeU = MatchStatusCode("U")
	MatchStatusCodeI = MatchStatusCode("I")
	MatchStatusCodeN = MatchStatusCode("N")
)

// MarshalJSON encodes JSON.
func (i MatchStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case MatchStatusCodeL:
	case MatchStatusCodeD:
	case MatchStatusCodeE:
	case MatchStatusCodeP:
	case MatchStatusCodeU:
	case MatchStatusCodeI:
	case MatchStatusCodeN:

	default:
		return nil, fmt.Errorf("unexpected MatchStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *MatchStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := MatchStatusCode(ii)

	switch v {
	case MatchStatusCodeL:
	case MatchStatusCodeD:
	case MatchStatusCodeE:
	case MatchStatusCodeP:
	case MatchStatusCodeU:
	case MatchStatusCodeI:
	case MatchStatusCodeN:

	default:
		return fmt.Errorf("unexpected MatchStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// MatchStatusDescription is an enum type.
type MatchStatusDescription string

// MatchStatusDescription values enumeration.
const (
	MatchStatusDescriptionLocation = MatchStatusDescription("Location")
	MatchStatusDescriptionDiscarded = MatchStatusDescription("Discarded")
	MatchStatusDescriptionExact = MatchStatusDescription("Exact")
	MatchStatusDescriptionProbable = MatchStatusDescription("Probable")
	MatchStatusDescriptionUnmatched = MatchStatusDescription("Unmatched")
	MatchStatusDescriptionInitial = MatchStatusDescription("Initial")
	MatchStatusDescriptionNotMatched = MatchStatusDescription("Not matched")
)

// MarshalJSON encodes JSON.
func (i MatchStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case MatchStatusDescriptionLocation:
	case MatchStatusDescriptionDiscarded:
	case MatchStatusDescriptionExact:
	case MatchStatusDescriptionProbable:
	case MatchStatusDescriptionUnmatched:
	case MatchStatusDescriptionInitial:
	case MatchStatusDescriptionNotMatched:

	default:
		return nil, fmt.Errorf("unexpected MatchStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *MatchStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := MatchStatusDescription(ii)

	switch v {
	case MatchStatusDescriptionLocation:
	case MatchStatusDescriptionDiscarded:
	case MatchStatusDescriptionExact:
	case MatchStatusDescriptionProbable:
	case MatchStatusDescriptionUnmatched:
	case MatchStatusDescriptionInitial:
	case MatchStatusDescriptionNotMatched:

	default:
		return fmt.Errorf("unexpected MatchStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// CcjTypeCode is an enum type.
type CcjTypeCode string

// CcjTypeCode values enumeration.
const (
	CcjTypeCodeJ = CcjTypeCode("J")
	CcjTypeCodeS = CcjTypeCode("S")
)

// MarshalJSON encodes JSON.
func (i CcjTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case CcjTypeCodeJ:
	case CcjTypeCodeS:

	default:
		return nil, fmt.Errorf("unexpected CcjTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CcjTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CcjTypeCode(ii)

	switch v {
	case CcjTypeCodeJ:
	case CcjTypeCodeS:

	default:
		return fmt.Errorf("unexpected CcjTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// CcjTypeDescription is an enum type.
type CcjTypeDescription string

// CcjTypeDescription values enumeration.
const (
	CcjTypeDescriptionJudgement = CcjTypeDescription("Judgement")
	CcjTypeDescriptionSatisfied = CcjTypeDescription("Satisfied")
)

// MarshalJSON encodes JSON.
func (i CcjTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case CcjTypeDescriptionJudgement:
	case CcjTypeDescriptionSatisfied:

	default:
		return nil, fmt.Errorf("unexpected CcjTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CcjTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CcjTypeDescription(ii)

	switch v {
	case CcjTypeDescriptionJudgement:
	case CcjTypeDescriptionSatisfied:

	default:
		return fmt.Errorf("unexpected CcjTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeL = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("L")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeE = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("E")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeP = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("P")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeU = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("U")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeI = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("I")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode("N")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeU:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeN:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeL:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeE:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeU:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCodeN:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionLocation = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Location")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionDiscarded = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Discarded")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionExact = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Exact")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionProbable = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Probable")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionUnmatched = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Unmatched")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionInitial = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Initial")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionNotMatched = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription("Not matched")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionLocation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionDiscarded:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionExact:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionProbable:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionUnmatched:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionInitial:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionNotMatched:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionLocation:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionDiscarded:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionExact:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionProbable:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionUnmatched:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionInitial:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescriptionNotMatched:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsMatchStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeJ = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode("J")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeS = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode("S")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeJ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeS:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeJ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCodeS:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionJudgement = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription("Judgement")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionSatisfied = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription("Satisfied")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionJudgement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionSatisfied:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionJudgement:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescriptionSatisfied:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportDetrimentalCcjSubjectCcjsItemsTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// GazetteCode is an enum type.
type GazetteCode string

// GazetteCode values enumeration.
const (
	GazetteCodeALM = GazetteCode("ALM")
	GazetteCodeAO = GazetteCode("AO")
	GazetteCodeAOD = GazetteCode("AOD")
	GazetteCodeARA = GazetteCode("ARA")
	GazetteCodeARC = GazetteCode("ARC")
	GazetteCodeBKO = GazetteCode("BKO")
	GazetteCodeCCD = GazetteCode("CCD")
	GazetteCodeCNA = GazetteCode("CNA")
	GazetteCodeCND = GazetteCode("CND")
	GazetteCodeCNW = GazetteCode("CNW")
	GazetteCodeCVA = GazetteCode("CVA")
	GazetteCodeDIS = GazetteCode("DIS")
	GazetteCodeDP = GazetteCode("DP")
	GazetteCodeEXA = GazetteCode("EXA")
	GazetteCodeFM = GazetteCode("FM")
	GazetteCodeHCW = GazetteCode("HCW")
	GazetteCodeJAA = GazetteCode("JAA")
	GazetteCodeLA = GazetteCode("LA")
	GazetteCodeLAF = GazetteCode("LAF")
	GazetteCodeLR = GazetteCode("LR")
	GazetteCodeLRA = GazetteCode("LRA")
	GazetteCodeMOC = GazetteCode("MOC")
	GazetteCodePDS = GazetteCode("PDS")
	GazetteCodePET = GazetteCode("PET")
	GazetteCodePNA = GazetteCode("PNA")
	GazetteCodePNW = GazetteCode("PNW")
	GazetteCodeRES = GazetteCode("RES")
	GazetteCodeRMA = GazetteCode("RMA")
	GazetteCodeRMC = GazetteCode("RMC")
	GazetteCodeRNC = GazetteCode("RNC")
	GazetteCodeSEQ = GazetteCode("SEQ")
	GazetteCodeSOD = GazetteCode("SOD")
	GazetteCodeSOJ = GazetteCode("SOJ")
	GazetteCodeSOS = GazetteCode("SOS")
	GazetteCodeSTA = GazetteCode("STA")
	GazetteCodeSTR = GazetteCode("STR")
	GazetteCodeSTW = GazetteCode("STW")
	GazetteCodeTD = GazetteCode("TD")
	GazetteCodeUAP = GazetteCode("UAP")
	GazetteCodeUPP = GazetteCode("UPP")
	GazetteCodeVAC = GazetteCode("VAC")
	GazetteCodeVAD = GazetteCode("VAD")
	GazetteCodeVWO = GazetteCode("VWO")
	GazetteCodeWOR = GazetteCode("WOR")
	GazetteCodeWUO = GazetteCode("WUO")
)

// MarshalJSON encodes JSON.
func (i GazetteCode) MarshalJSON() ([]byte, error) {
	switch i {
	case GazetteCodeALM:
	case GazetteCodeAO:
	case GazetteCodeAOD:
	case GazetteCodeARA:
	case GazetteCodeARC:
	case GazetteCodeBKO:
	case GazetteCodeCCD:
	case GazetteCodeCNA:
	case GazetteCodeCND:
	case GazetteCodeCNW:
	case GazetteCodeCVA:
	case GazetteCodeDIS:
	case GazetteCodeDP:
	case GazetteCodeEXA:
	case GazetteCodeFM:
	case GazetteCodeHCW:
	case GazetteCodeJAA:
	case GazetteCodeLA:
	case GazetteCodeLAF:
	case GazetteCodeLR:
	case GazetteCodeLRA:
	case GazetteCodeMOC:
	case GazetteCodePDS:
	case GazetteCodePET:
	case GazetteCodePNA:
	case GazetteCodePNW:
	case GazetteCodeRES:
	case GazetteCodeRMA:
	case GazetteCodeRMC:
	case GazetteCodeRNC:
	case GazetteCodeSEQ:
	case GazetteCodeSOD:
	case GazetteCodeSOJ:
	case GazetteCodeSOS:
	case GazetteCodeSTA:
	case GazetteCodeSTR:
	case GazetteCodeSTW:
	case GazetteCodeTD:
	case GazetteCodeUAP:
	case GazetteCodeUPP:
	case GazetteCodeVAC:
	case GazetteCodeVAD:
	case GazetteCodeVWO:
	case GazetteCodeWOR:
	case GazetteCodeWUO:

	default:
		return nil, fmt.Errorf("unexpected GazetteCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GazetteCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GazetteCode(ii)

	switch v {
	case GazetteCodeALM:
	case GazetteCodeAO:
	case GazetteCodeAOD:
	case GazetteCodeARA:
	case GazetteCodeARC:
	case GazetteCodeBKO:
	case GazetteCodeCCD:
	case GazetteCodeCNA:
	case GazetteCodeCND:
	case GazetteCodeCNW:
	case GazetteCodeCVA:
	case GazetteCodeDIS:
	case GazetteCodeDP:
	case GazetteCodeEXA:
	case GazetteCodeFM:
	case GazetteCodeHCW:
	case GazetteCodeJAA:
	case GazetteCodeLA:
	case GazetteCodeLAF:
	case GazetteCodeLR:
	case GazetteCodeLRA:
	case GazetteCodeMOC:
	case GazetteCodePDS:
	case GazetteCodePET:
	case GazetteCodePNA:
	case GazetteCodePNW:
	case GazetteCodeRES:
	case GazetteCodeRMA:
	case GazetteCodeRMC:
	case GazetteCodeRNC:
	case GazetteCodeSEQ:
	case GazetteCodeSOD:
	case GazetteCodeSOJ:
	case GazetteCodeSOS:
	case GazetteCodeSTA:
	case GazetteCodeSTR:
	case GazetteCodeSTW:
	case GazetteCodeTD:
	case GazetteCodeUAP:
	case GazetteCodeUPP:
	case GazetteCodeVAC:
	case GazetteCodeVAD:
	case GazetteCodeVWO:
	case GazetteCodeWOR:
	case GazetteCodeWUO:

	default:
		return fmt.Errorf("unexpected GazetteCode value: %v", v)
	}

	*i = v

	return nil
}

// ShareholderTypeCode is an enum type.
type ShareholderTypeCode string

// ShareholderTypeCode values enumeration.
const (
	ShareholderTypeCodeP = ShareholderTypeCode("P")
	ShareholderTypeCodeO = ShareholderTypeCode("O")
	ShareholderTypeCodeC = ShareholderTypeCode("C")
)

// MarshalJSON encodes JSON.
func (i ShareholderTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case ShareholderTypeCodeP:
	case ShareholderTypeCodeO:
	case ShareholderTypeCodeC:

	default:
		return nil, fmt.Errorf("unexpected ShareholderTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ShareholderTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ShareholderTypeCode(ii)

	switch v {
	case ShareholderTypeCodeP:
	case ShareholderTypeCodeO:
	case ShareholderTypeCodeC:

	default:
		return fmt.Errorf("unexpected ShareholderTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// ShareholderTypeDescription is an enum type.
type ShareholderTypeDescription string

// ShareholderTypeDescription values enumeration.
const (
	ShareholderTypeDescriptionIndividual = ShareholderTypeDescription("Individual")
	ShareholderTypeDescriptionOther = ShareholderTypeDescription("Other")
	ShareholderTypeDescriptionCompany = ShareholderTypeDescription("Company")
)

// MarshalJSON encodes JSON.
func (i ShareholderTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case ShareholderTypeDescriptionIndividual:
	case ShareholderTypeDescriptionOther:
	case ShareholderTypeDescriptionCompany:

	default:
		return nil, fmt.Errorf("unexpected ShareholderTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ShareholderTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ShareholderTypeDescription(ii)

	switch v {
	case ShareholderTypeDescriptionIndividual:
	case ShareholderTypeDescriptionOther:
	case ShareholderTypeDescriptionCompany:

	default:
		return fmt.Errorf("unexpected ShareholderTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// AccountsTypeDescription is an enum type.
type AccountsTypeDescription string

// AccountsTypeDescription values enumeration.
const (
	AccountsTypeDescriptionNotAvailable = AccountsTypeDescription("Not Available")
	AccountsTypeDescriptionFullAccounts = AccountsTypeDescription("Full Accounts")
	AccountsTypeDescriptionSmallCompany = AccountsTypeDescription("Small Company")
	AccountsTypeDescriptionMediumCompany = AccountsTypeDescription("Medium Company")
	AccountsTypeDescriptionGroupAccounts = AccountsTypeDescription("Group Accounts")
	AccountsTypeDescriptionDormant = AccountsTypeDescription("Dormant")
	AccountsTypeDescriptionInterim = AccountsTypeDescription("Interim")
	AccountsTypeDescriptionInitial = AccountsTypeDescription("Initial")
	AccountsTypeDescriptionTotalExemptionFull = AccountsTypeDescription("Total Exemption Full")
	AccountsTypeDescriptionTotalExemptionSmall = AccountsTypeDescription("Total Exemption Small")
	AccountsTypeDescriptionPartialExemption = AccountsTypeDescription("Partial Exemption")
	AccountsTypeDescriptionAuditExemptionSubsidiary = AccountsTypeDescription("Audit Exemption Subsidiary")
	AccountsTypeDescriptionFilingExemptionSubsidiary = AccountsTypeDescription("Filing Exemption Subsidiary")
	AccountsTypeDescriptionMicroEntity = AccountsTypeDescription("Micro Entity")
	AccountsTypeDescriptionAuditedAbridged = AccountsTypeDescription("Audited Abridged")
	AccountsTypeDescriptionUnauditedAbridged = AccountsTypeDescription("Unaudited Abridged")
)

// MarshalJSON encodes JSON.
func (i AccountsTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case AccountsTypeDescriptionNotAvailable:
	case AccountsTypeDescriptionFullAccounts:
	case AccountsTypeDescriptionSmallCompany:
	case AccountsTypeDescriptionMediumCompany:
	case AccountsTypeDescriptionGroupAccounts:
	case AccountsTypeDescriptionDormant:
	case AccountsTypeDescriptionInterim:
	case AccountsTypeDescriptionInitial:
	case AccountsTypeDescriptionTotalExemptionFull:
	case AccountsTypeDescriptionTotalExemptionSmall:
	case AccountsTypeDescriptionPartialExemption:
	case AccountsTypeDescriptionAuditExemptionSubsidiary:
	case AccountsTypeDescriptionFilingExemptionSubsidiary:
	case AccountsTypeDescriptionMicroEntity:
	case AccountsTypeDescriptionAuditedAbridged:
	case AccountsTypeDescriptionUnauditedAbridged:

	default:
		return nil, fmt.Errorf("unexpected AccountsTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AccountsTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AccountsTypeDescription(ii)

	switch v {
	case AccountsTypeDescriptionNotAvailable:
	case AccountsTypeDescriptionFullAccounts:
	case AccountsTypeDescriptionSmallCompany:
	case AccountsTypeDescriptionMediumCompany:
	case AccountsTypeDescriptionGroupAccounts:
	case AccountsTypeDescriptionDormant:
	case AccountsTypeDescriptionInterim:
	case AccountsTypeDescriptionInitial:
	case AccountsTypeDescriptionTotalExemptionFull:
	case AccountsTypeDescriptionTotalExemptionSmall:
	case AccountsTypeDescriptionPartialExemption:
	case AccountsTypeDescriptionAuditExemptionSubsidiary:
	case AccountsTypeDescriptionFilingExemptionSubsidiary:
	case AccountsTypeDescriptionMicroEntity:
	case AccountsTypeDescriptionAuditedAbridged:
	case AccountsTypeDescriptionUnauditedAbridged:

	default:
		return fmt.Errorf("unexpected AccountsTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode0 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("0")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode1 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("1")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode2 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("2")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode3 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("3")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode4 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("4")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode5 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("5")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode6 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("6")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode7 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("7")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode8 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("8")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode9 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("9")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode("A")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode0:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode1:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode2:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode3:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode4:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode5:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode6:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode7:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode8:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode9:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCodeA:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode0:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode1:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode2:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode3:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode4:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode5:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode6:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode7:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode8:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode9:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCodeA:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOther = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Other")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Private Unlimited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimited = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Private Limited")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPLC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("PLC")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOldPublicCompany = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Old Public Company")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionTheCompanyIsLimitedByGuaranteeAndAsSuchHasNoShareCapital = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("The company is limited by guarantee and as such has no share capital")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionLimitedPartnership = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Limited Partnership")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimitedCompanyWOShareCapital = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Private Limited Company w/o share capital")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionCompanyConvertedClosed = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Company Converted/Closed")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimitedCompanyWOShareCapital = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Private Unlimited Company w/o share capital")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateCompanyLimitedByShares = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription("Private Company limited by shares")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOther:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPLC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOldPublicCompany:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionTheCompanyIsLimitedByGuaranteeAndAsSuchHasNoShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionLimitedPartnership:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimitedCompanyWOShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionCompanyConvertedClosed:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimitedCompanyWOShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateCompanyLimitedByShares:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOther:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimited:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPLC:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionOldPublicCompany:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionTheCompanyIsLimitedByGuaranteeAndAsSuchHasNoShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionLimitedPartnership:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateLimitedCompanyWOShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionCompanyConvertedClosed:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateUnlimitedCompanyWOShareCapital:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescriptionPrivateCompanyLimitedByShares:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationCompanyTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// AddressIndicatorCode is an enum type.
type AddressIndicatorCode string

// AddressIndicatorCode values enumeration.
const (
	AddressIndicatorCodeHO = AddressIndicatorCode("HO")
	AddressIndicatorCodeH = AddressIndicatorCode("H")
	AddressIndicatorCodeS = AddressIndicatorCode("S")
	AddressIndicatorCodeB = AddressIndicatorCode("B")
)

// MarshalJSON encodes JSON.
func (i AddressIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case AddressIndicatorCodeHO:
	case AddressIndicatorCodeH:
	case AddressIndicatorCodeS:
	case AddressIndicatorCodeB:

	default:
		return nil, fmt.Errorf("unexpected AddressIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AddressIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AddressIndicatorCode(ii)

	switch v {
	case AddressIndicatorCodeHO:
	case AddressIndicatorCodeH:
	case AddressIndicatorCodeS:
	case AddressIndicatorCodeB:

	default:
		return fmt.Errorf("unexpected AddressIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// AddressIndicatorDescription is an enum type.
type AddressIndicatorDescription string

// AddressIndicatorDescription values enumeration.
const (
	AddressIndicatorDescriptionHeadOffice = AddressIndicatorDescription("Head office")
	AddressIndicatorDescriptionSingleSite = AddressIndicatorDescription("Single site")
	AddressIndicatorDescriptionBranch = AddressIndicatorDescription("Branch")
)

// MarshalJSON encodes JSON.
func (i AddressIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case AddressIndicatorDescriptionHeadOffice:
	case AddressIndicatorDescriptionSingleSite:
	case AddressIndicatorDescriptionBranch:

	default:
		return nil, fmt.Errorf("unexpected AddressIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AddressIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AddressIndicatorDescription(ii)

	switch v {
	case AddressIndicatorDescriptionHeadOffice:
	case AddressIndicatorDescriptionSingleSite:
	case AddressIndicatorDescriptionBranch:

	default:
		return fmt.Errorf("unexpected AddressIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeHO = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode("HO")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeH = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode("H")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeS = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode("S")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeB = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode("B")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeHO:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeH:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeB:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeHO:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeH:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCodeB:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionHeadOffice = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription("Head office")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionSingleSite = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription("Single site")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionBranch = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription("Branch")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionHeadOffice:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionSingleSite:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionBranch:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionHeadOffice:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionSingleSite:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescriptionBranch:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportIdentificationTradingAddressesItemsAddressIndicatorDescription value: %v", v)
	}

	*i = v

	return nil
}

// PremiseTypeCode is an enum type.
type PremiseTypeCode string

// PremiseTypeCode values enumeration.
const (
	PremiseTypeCodeUC = PremiseTypeCode("UC")
	PremiseTypeCodeAG = PremiseTypeCode("AG")
	PremiseTypeCodeHO = PremiseTypeCode("HO")
	PremiseTypeCodeMA = PremiseTypeCode("MA")
	PremiseTypeCodeOF = PremiseTypeCode("OF")
	PremiseTypeCodePW = PremiseTypeCode("PW")
	PremiseTypeCodeSC = PremiseTypeCode("SC")
	PremiseTypeCodeSH = PremiseTypeCode("SH")
	PremiseTypeCodeSO = PremiseTypeCode("SO")
	PremiseTypeCodeSP = PremiseTypeCode("SP")
	PremiseTypeCodeSV = PremiseTypeCode("SV")
	PremiseTypeCodeTR = PremiseTypeCode("TR")
	PremiseTypeCodeWA = PremiseTypeCode("WA")
	PremiseTypeCodeWO = PremiseTypeCode("WO")
	PremiseTypeCodeFAC = PremiseTypeCode("FAC")
	PremiseTypeCodeFWS = PremiseTypeCode("FWS")
	PremiseTypeCodeGAR = PremiseTypeCode("GAR")
	PremiseTypeCodeIREF = PremiseTypeCode("IREF")
	PremiseTypeCodeMS = PremiseTypeCode("MS")
	PremiseTypeCodeNK = PremiseTypeCode("NK")
	PremiseTypeCodeOFF = PremiseTypeCode("OFF")
	PremiseTypeCodePUBH = PremiseTypeCode("PUBH")
	PremiseTypeCodeREP = PremiseTypeCode("REP")
	PremiseTypeCodeRES = PremiseTypeCode("RES")
	PremiseTypeCodeRESRCH = PremiseTypeCode("RESRCH")
	PremiseTypeCodeRSER = PremiseTypeCode("RSER")
	PremiseTypeCodeSADM = PremiseTypeCode("SADM")
	PremiseTypeCodeSER = PremiseTypeCode("SER")
	PremiseTypeCodeSHOP = PremiseTypeCode("SHOP")
	PremiseTypeCodeSR = PremiseTypeCode("SR")
	PremiseTypeCodeWSHOP = PremiseTypeCode("WSHOP")
	PremiseTypeCodeWSW = PremiseTypeCode("WSW")
	PremiseTypeCodeYARD = PremiseTypeCode("YARD")
)

// MarshalJSON encodes JSON.
func (i PremiseTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PremiseTypeCodeUC:
	case PremiseTypeCodeAG:
	case PremiseTypeCodeHO:
	case PremiseTypeCodeMA:
	case PremiseTypeCodeOF:
	case PremiseTypeCodePW:
	case PremiseTypeCodeSC:
	case PremiseTypeCodeSH:
	case PremiseTypeCodeSO:
	case PremiseTypeCodeSP:
	case PremiseTypeCodeSV:
	case PremiseTypeCodeTR:
	case PremiseTypeCodeWA:
	case PremiseTypeCodeWO:
	case PremiseTypeCodeFAC:
	case PremiseTypeCodeFWS:
	case PremiseTypeCodeGAR:
	case PremiseTypeCodeIREF:
	case PremiseTypeCodeMS:
	case PremiseTypeCodeNK:
	case PremiseTypeCodeOFF:
	case PremiseTypeCodePUBH:
	case PremiseTypeCodeREP:
	case PremiseTypeCodeRES:
	case PremiseTypeCodeRESRCH:
	case PremiseTypeCodeRSER:
	case PremiseTypeCodeSADM:
	case PremiseTypeCodeSER:
	case PremiseTypeCodeSHOP:
	case PremiseTypeCodeSR:
	case PremiseTypeCodeWSHOP:
	case PremiseTypeCodeWSW:
	case PremiseTypeCodeYARD:

	default:
		return nil, fmt.Errorf("unexpected PremiseTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PremiseTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PremiseTypeCode(ii)

	switch v {
	case PremiseTypeCodeUC:
	case PremiseTypeCodeAG:
	case PremiseTypeCodeHO:
	case PremiseTypeCodeMA:
	case PremiseTypeCodeOF:
	case PremiseTypeCodePW:
	case PremiseTypeCodeSC:
	case PremiseTypeCodeSH:
	case PremiseTypeCodeSO:
	case PremiseTypeCodeSP:
	case PremiseTypeCodeSV:
	case PremiseTypeCodeTR:
	case PremiseTypeCodeWA:
	case PremiseTypeCodeWO:
	case PremiseTypeCodeFAC:
	case PremiseTypeCodeFWS:
	case PremiseTypeCodeGAR:
	case PremiseTypeCodeIREF:
	case PremiseTypeCodeMS:
	case PremiseTypeCodeNK:
	case PremiseTypeCodeOFF:
	case PremiseTypeCodePUBH:
	case PremiseTypeCodeREP:
	case PremiseTypeCodeRES:
	case PremiseTypeCodeRESRCH:
	case PremiseTypeCodeRSER:
	case PremiseTypeCodeSADM:
	case PremiseTypeCodeSER:
	case PremiseTypeCodeSHOP:
	case PremiseTypeCodeSR:
	case PremiseTypeCodeWSHOP:
	case PremiseTypeCodeWSW:
	case PremiseTypeCodeYARD:

	default:
		return fmt.Errorf("unexpected PremiseTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// PremiseTypeDescription is an enum type.
type PremiseTypeDescription string

// PremiseTypeDescription values enumeration.
const (
	PremiseTypeDescriptionUnclassified = PremiseTypeDescription("Unclassified")
	PremiseTypeDescriptionAgricultural = PremiseTypeDescription("Agricultural")
	PremiseTypeDescriptionHospitalsMedicalEstablishments = PremiseTypeDescription("Hospitals / Medical Establishments")
	PremiseTypeDescriptionManufacturing = PremiseTypeDescription("Manufacturing")
	PremiseTypeDescriptionOfficeAdministration = PremiseTypeDescription("Office / Administration")
	PremiseTypeDescriptionPlacesOfWorship = PremiseTypeDescription("Places of Worship")
	PremiseTypeDescriptionSchoolsEducational = PremiseTypeDescription("Schools / Educational")
	PremiseTypeDescriptionShopsRetailOutlets = PremiseTypeDescription("Shops / Retail Outlets")
	PremiseTypeDescriptionSmallOfficeHomeOffice = PremiseTypeDescription("Small Office / Home Office")
	PremiseTypeDescriptionSportsLeisureEntertainmentHolidayActivities = PremiseTypeDescription("Sports Leisure Entertainment / Holiday Activities")
	PremiseTypeDescriptionServices = PremiseTypeDescription("Services")
	PremiseTypeDescriptionTransport = PremiseTypeDescription("Transport")
	PremiseTypeDescriptionWarehousesWholesalers = PremiseTypeDescription("Warehouses / Wholesalers")
	PremiseTypeDescriptionWorkshopsRepairCentres = PremiseTypeDescription("Workshops / Repair Centres")
	PremiseTypeDescriptionFactory = PremiseTypeDescription("Factory")
	PremiseTypeDescriptionFactoryWithWarehouseStores = PremiseTypeDescription("Factory with Warehouse/Stores")
	PremiseTypeDescriptionGarage = PremiseTypeDescription("Garage")
	PremiseTypeDescriptionInformationRefused = PremiseTypeDescription("Information Refused")
	PremiseTypeDescriptionMarketStall = PremiseTypeDescription("Market Stall")
	PremiseTypeDescriptionNotKnown = PremiseTypeDescription("Not Known")
	PremiseTypeDescriptionOffice = PremiseTypeDescription("Office")
	PremiseTypeDescriptionPublicHouse = PremiseTypeDescription("Public House")
	PremiseTypeDescriptionRepairCentre = PremiseTypeDescription("Repair Centre")
	PremiseTypeDescriptionResidential = PremiseTypeDescription("Residential")
	PremiseTypeDescriptionResearchCentreLab = PremiseTypeDescription("Research Centre / Lab")
	PremiseTypeDescriptionRetailOutletWithServicingRepairs = PremiseTypeDescription("Retail Outlet with Servicing Repairs")
	PremiseTypeDescriptionSalesAdminOffice = PremiseTypeDescription("Sales / Admin Office")
	PremiseTypeDescriptionShop = PremiseTypeDescription("Shop")
	PremiseTypeDescriptionShowroom = PremiseTypeDescription("Showroom")
	PremiseTypeDescriptionWorkshop = PremiseTypeDescription("Workshop")
	PremiseTypeDescriptionWarehouseStoresWholesalers = PremiseTypeDescription("Warehouse / Stores / Wholesalers")
	PremiseTypeDescriptionYard = PremiseTypeDescription("Yard")
)

// MarshalJSON encodes JSON.
func (i PremiseTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PremiseTypeDescriptionUnclassified:
	case PremiseTypeDescriptionAgricultural:
	case PremiseTypeDescriptionHospitalsMedicalEstablishments:
	case PremiseTypeDescriptionManufacturing:
	case PremiseTypeDescriptionOfficeAdministration:
	case PremiseTypeDescriptionPlacesOfWorship:
	case PremiseTypeDescriptionSchoolsEducational:
	case PremiseTypeDescriptionShopsRetailOutlets:
	case PremiseTypeDescriptionSmallOfficeHomeOffice:
	case PremiseTypeDescriptionSportsLeisureEntertainmentHolidayActivities:
	case PremiseTypeDescriptionServices:
	case PremiseTypeDescriptionTransport:
	case PremiseTypeDescriptionWarehousesWholesalers:
	case PremiseTypeDescriptionWorkshopsRepairCentres:
	case PremiseTypeDescriptionFactory:
	case PremiseTypeDescriptionFactoryWithWarehouseStores:
	case PremiseTypeDescriptionGarage:
	case PremiseTypeDescriptionInformationRefused:
	case PremiseTypeDescriptionMarketStall:
	case PremiseTypeDescriptionNotKnown:
	case PremiseTypeDescriptionOffice:
	case PremiseTypeDescriptionPublicHouse:
	case PremiseTypeDescriptionRepairCentre:
	case PremiseTypeDescriptionResidential:
	case PremiseTypeDescriptionResearchCentreLab:
	case PremiseTypeDescriptionRetailOutletWithServicingRepairs:
	case PremiseTypeDescriptionSalesAdminOffice:
	case PremiseTypeDescriptionShop:
	case PremiseTypeDescriptionShowroom:
	case PremiseTypeDescriptionWorkshop:
	case PremiseTypeDescriptionWarehouseStoresWholesalers:
	case PremiseTypeDescriptionYard:

	default:
		return nil, fmt.Errorf("unexpected PremiseTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PremiseTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PremiseTypeDescription(ii)

	switch v {
	case PremiseTypeDescriptionUnclassified:
	case PremiseTypeDescriptionAgricultural:
	case PremiseTypeDescriptionHospitalsMedicalEstablishments:
	case PremiseTypeDescriptionManufacturing:
	case PremiseTypeDescriptionOfficeAdministration:
	case PremiseTypeDescriptionPlacesOfWorship:
	case PremiseTypeDescriptionSchoolsEducational:
	case PremiseTypeDescriptionShopsRetailOutlets:
	case PremiseTypeDescriptionSmallOfficeHomeOffice:
	case PremiseTypeDescriptionSportsLeisureEntertainmentHolidayActivities:
	case PremiseTypeDescriptionServices:
	case PremiseTypeDescriptionTransport:
	case PremiseTypeDescriptionWarehousesWholesalers:
	case PremiseTypeDescriptionWorkshopsRepairCentres:
	case PremiseTypeDescriptionFactory:
	case PremiseTypeDescriptionFactoryWithWarehouseStores:
	case PremiseTypeDescriptionGarage:
	case PremiseTypeDescriptionInformationRefused:
	case PremiseTypeDescriptionMarketStall:
	case PremiseTypeDescriptionNotKnown:
	case PremiseTypeDescriptionOffice:
	case PremiseTypeDescriptionPublicHouse:
	case PremiseTypeDescriptionRepairCentre:
	case PremiseTypeDescriptionResidential:
	case PremiseTypeDescriptionResearchCentreLab:
	case PremiseTypeDescriptionRetailOutletWithServicingRepairs:
	case PremiseTypeDescriptionSalesAdminOffice:
	case PremiseTypeDescriptionShop:
	case PremiseTypeDescriptionShowroom:
	case PremiseTypeDescriptionWorkshop:
	case PremiseTypeDescriptionWarehouseStoresWholesalers:
	case PremiseTypeDescriptionYard:

	default:
		return fmt.Errorf("unexpected PremiseTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// ContributorTypeCode is an enum type.
type ContributorTypeCode string

// ContributorTypeCode values enumeration.
const (
	ContributorTypeCodeAC = ContributorTypeCode("AC")
	ContributorTypeCodeBF = ContributorTypeCode("BF")
	ContributorTypeCodeBK = ContributorTypeCode("BK")
	ContributorTypeCodeBS = ContributorTypeCode("BS")
	ContributorTypeCodeCB = ContributorTypeCode("CB")
	ContributorTypeCodeCC = ContributorTypeCode("CC")
	ContributorTypeCodeCE = ContributorTypeCode("CE")
	ContributorTypeCodeCG = ContributorTypeCode("CG")
	ContributorTypeCodeCH = ContributorTypeCode("CH")
	ContributorTypeCodeCI = ContributorTypeCode("CI")
	ContributorTypeCodeCL = ContributorTypeCode("CL")
	ContributorTypeCodeCR = ContributorTypeCode("CR")
	ContributorTypeCodeCS = ContributorTypeCode("CS")
	ContributorTypeCodeDC = ContributorTypeCode("DC")
	ContributorTypeCodeDI = ContributorTypeCode("DI")
	ContributorTypeCodeEN = ContributorTypeCode("EN")
	ContributorTypeCodeES = ContributorTypeCode("ES")
	ContributorTypeCodeFN = ContributorTypeCode("FN")
	ContributorTypeCodeFS = ContributorTypeCode("FS")
	ContributorTypeCodeGI = ContributorTypeCode("GI")
	ContributorTypeCodeGV = ContributorTypeCode("GV")
	ContributorTypeCodeHC = ContributorTypeCode("HC")
	ContributorTypeCodeHF = ContributorTypeCode("HF")
	ContributorTypeCodeHI = ContributorTypeCode("HI")
	ContributorTypeCodeHO = ContributorTypeCode("HO")
	ContributorTypeCodeHS = ContributorTypeCode("HS")
	ContributorTypeCodeHT = ContributorTypeCode("HT")
	ContributorTypeCodeIB = ContributorTypeCode("IB")
	ContributorTypeCodeIN = ContributorTypeCode("IN")
	ContributorTypeCodeIR = ContributorTypeCode("IR")
	ContributorTypeCodeLA = ContributorTypeCode("LA")
	ContributorTypeCodeLG = ContributorTypeCode("LG")
	ContributorTypeCodeMD = ContributorTypeCode("MD")
	ContributorTypeCodeME = ContributorTypeCode("ME")
	ContributorTypeCodeMF = ContributorTypeCode("MF")
	ContributorTypeCodeMK = ContributorTypeCode("MK")
	ContributorTypeCodeMN = ContributorTypeCode("MN")
	ContributorTypeCodeMO = ContributorTypeCode("MO")
	ContributorTypeCodeMS = ContributorTypeCode("MS")
	ContributorTypeCodeOS = ContributorTypeCode("OS")
	ContributorTypeCodePM = ContributorTypeCode("PM")
	ContributorTypeCodePO = ContributorTypeCode("PO")
	ContributorTypeCodePU = ContributorTypeCode("PU")
	ContributorTypeCodeRN = ContributorTypeCode("RN")
	ContributorTypeCodeRT = ContributorTypeCode("RT")
	ContributorTypeCodeSB = ContributorTypeCode("SB")
	ContributorTypeCodeSO = ContributorTypeCode("SO")
	ContributorTypeCodeSR = ContributorTypeCode("SR")
	ContributorTypeCodeSS = ContributorTypeCode("SS")
	ContributorTypeCodeTC = ContributorTypeCode("TC")
	ContributorTypeCodeTI = ContributorTypeCode("TI")
	ContributorTypeCodeTP = ContributorTypeCode("TP")
	ContributorTypeCodeTV = ContributorTypeCode("TV")
	ContributorTypeCodeXX = ContributorTypeCode("XX")
)

// MarshalJSON encodes JSON.
func (i ContributorTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case ContributorTypeCodeAC:
	case ContributorTypeCodeBF:
	case ContributorTypeCodeBK:
	case ContributorTypeCodeBS:
	case ContributorTypeCodeCB:
	case ContributorTypeCodeCC:
	case ContributorTypeCodeCE:
	case ContributorTypeCodeCG:
	case ContributorTypeCodeCH:
	case ContributorTypeCodeCI:
	case ContributorTypeCodeCL:
	case ContributorTypeCodeCR:
	case ContributorTypeCodeCS:
	case ContributorTypeCodeDC:
	case ContributorTypeCodeDI:
	case ContributorTypeCodeEN:
	case ContributorTypeCodeES:
	case ContributorTypeCodeFN:
	case ContributorTypeCodeFS:
	case ContributorTypeCodeGI:
	case ContributorTypeCodeGV:
	case ContributorTypeCodeHC:
	case ContributorTypeCodeHF:
	case ContributorTypeCodeHI:
	case ContributorTypeCodeHO:
	case ContributorTypeCodeHS:
	case ContributorTypeCodeHT:
	case ContributorTypeCodeIB:
	case ContributorTypeCodeIN:
	case ContributorTypeCodeIR:
	case ContributorTypeCodeLA:
	case ContributorTypeCodeLG:
	case ContributorTypeCodeMD:
	case ContributorTypeCodeME:
	case ContributorTypeCodeMF:
	case ContributorTypeCodeMK:
	case ContributorTypeCodeMN:
	case ContributorTypeCodeMO:
	case ContributorTypeCodeMS:
	case ContributorTypeCodeOS:
	case ContributorTypeCodePM:
	case ContributorTypeCodePO:
	case ContributorTypeCodePU:
	case ContributorTypeCodeRN:
	case ContributorTypeCodeRT:
	case ContributorTypeCodeSB:
	case ContributorTypeCodeSO:
	case ContributorTypeCodeSR:
	case ContributorTypeCodeSS:
	case ContributorTypeCodeTC:
	case ContributorTypeCodeTI:
	case ContributorTypeCodeTP:
	case ContributorTypeCodeTV:
	case ContributorTypeCodeXX:

	default:
		return nil, fmt.Errorf("unexpected ContributorTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ContributorTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ContributorTypeCode(ii)

	switch v {
	case ContributorTypeCodeAC:
	case ContributorTypeCodeBF:
	case ContributorTypeCodeBK:
	case ContributorTypeCodeBS:
	case ContributorTypeCodeCB:
	case ContributorTypeCodeCC:
	case ContributorTypeCodeCE:
	case ContributorTypeCodeCG:
	case ContributorTypeCodeCH:
	case ContributorTypeCodeCI:
	case ContributorTypeCodeCL:
	case ContributorTypeCodeCR:
	case ContributorTypeCodeCS:
	case ContributorTypeCodeDC:
	case ContributorTypeCodeDI:
	case ContributorTypeCodeEN:
	case ContributorTypeCodeES:
	case ContributorTypeCodeFN:
	case ContributorTypeCodeFS:
	case ContributorTypeCodeGI:
	case ContributorTypeCodeGV:
	case ContributorTypeCodeHC:
	case ContributorTypeCodeHF:
	case ContributorTypeCodeHI:
	case ContributorTypeCodeHO:
	case ContributorTypeCodeHS:
	case ContributorTypeCodeHT:
	case ContributorTypeCodeIB:
	case ContributorTypeCodeIN:
	case ContributorTypeCodeIR:
	case ContributorTypeCodeLA:
	case ContributorTypeCodeLG:
	case ContributorTypeCodeMD:
	case ContributorTypeCodeME:
	case ContributorTypeCodeMF:
	case ContributorTypeCodeMK:
	case ContributorTypeCodeMN:
	case ContributorTypeCodeMO:
	case ContributorTypeCodeMS:
	case ContributorTypeCodeOS:
	case ContributorTypeCodePM:
	case ContributorTypeCodePO:
	case ContributorTypeCodePU:
	case ContributorTypeCodeRN:
	case ContributorTypeCodeRT:
	case ContributorTypeCodeSB:
	case ContributorTypeCodeSO:
	case ContributorTypeCodeSR:
	case ContributorTypeCodeSS:
	case ContributorTypeCodeTC:
	case ContributorTypeCodeTI:
	case ContributorTypeCodeTP:
	case ContributorTypeCodeTV:
	case ContributorTypeCodeXX:

	default:
		return fmt.Errorf("unexpected ContributorTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// ContributorTypeDescription is an enum type.
type ContributorTypeDescription string

// ContributorTypeDescription values enumeration.
const (
	ContributorTypeDescriptionAccountancy = ContributorTypeDescription("Accountancy")
	ContributorTypeDescriptionBankFinanceDivision = ContributorTypeDescription("Bank (Finance Division)")
	ContributorTypeDescriptionBank = ContributorTypeDescription("Bank")
	ContributorTypeDescriptionBuildingSociety = ContributorTypeDescription("Building Society")
	ContributorTypeDescriptionCreditBroker = ContributorTypeDescription("Credit Broker")
	ContributorTypeDescriptionCreditCard = ContributorTypeDescription("Credit Card")
	ContributorTypeDescriptionCustomsExcise = ContributorTypeDescription("Customs & Excise")
	ContributorTypeDescriptionChequeGuarantee = ContributorTypeDescription("Cheque Guarantee")
	ContributorTypeDescriptionChargeCard = ContributorTypeDescription("Charge Card")
	ContributorTypeDescriptionCreditInsurance = ContributorTypeDescription("Credit Insurance")
	ContributorTypeDescriptionCouncil = ContributorTypeDescription("Council")
	ContributorTypeDescriptionCommercialReporting = ContributorTypeDescription("Commercial Reporting")
	ContributorTypeDescriptionCommunicationsSupplier = ContributorTypeDescription("Communications Supplier")
	ContributorTypeDescriptionDebtCollector = ContributorTypeDescription("Debt Collector")
	ContributorTypeDescriptionDistributionWholesale = ContributorTypeDescription("Distribution & Wholesale")
	ContributorTypeDescriptionEnquiryAgent = ContributorTypeDescription("Enquiry Agent")
	ContributorTypeDescriptionEnergySupplier = ContributorTypeDescription("Energy Supplier")
	ContributorTypeDescriptionFinanceHouse = ContributorTypeDescription("Finance House")
	ContributorTypeDescriptionFinancialServices = ContributorTypeDescription("Financial Services")
	ContributorTypeDescriptionGeneralInsurance = ContributorTypeDescription("General Insurance")
	ContributorTypeDescriptionGovernment = ContributorTypeDescription("Government")
	ContributorTypeDescriptionHireCarRental = ContributorTypeDescription("Hire Car Rental")
	ContributorTypeDescriptionHomeFurnisher = ContributorTypeDescription("Home Furnisher")
	ContributorTypeDescriptionHomeImprovements = ContributorTypeDescription("Home Improvements")
	ContributorTypeDescriptionHouseBuilder = ContributorTypeDescription("House Builder")
	ContributorTypeDescriptionHealthService = ContributorTypeDescription("Health Service")
	ContributorTypeDescriptionHotelTravel = ContributorTypeDescription("Hotel & Travel")
	ContributorTypeDescriptionInsuranceBroker = ContributorTypeDescription("Insurance Broker")
	ContributorTypeDescriptionInsurance = ContributorTypeDescription("Insurance")
	ContributorTypeDescriptionInlandRevenue = ContributorTypeDescription("Inland Revenue")
	ContributorTypeDescriptionLossAdjuster = ContributorTypeDescription("Loss Adjuster")
	ContributorTypeDescriptionLeasing = ContributorTypeDescription("Leasing")
	ContributorTypeDescriptionMotorDealer = ContributorTypeDescription("Motor Dealer")
	ContributorTypeDescriptionMedia = ContributorTypeDescription("Media")
	ContributorTypeDescriptionManufacturingIndustrial = ContributorTypeDescription("Manufacturing & Industrial")
	ContributorTypeDescriptionMarketing = ContributorTypeDescription("Marketing")
	ContributorTypeDescriptionMiscellaneous = ContributorTypeDescription("Miscellaneous")
	ContributorTypeDescriptionMailOrder = ContributorTypeDescription("Mail Order")
	ContributorTypeDescriptionMortgageSupplier = ContributorTypeDescription("Mortgage Supplier")
	ContributorTypeDescriptionOverseas = ContributorTypeDescription("Overseas")
	ContributorTypeDescriptionPropertyManagement = ContributorTypeDescription("Property Management")
	ContributorTypeDescriptionPolice = ContributorTypeDescription("Police")
	ContributorTypeDescriptionPublicUtility = ContributorTypeDescription("Public Utility")
	ContributorTypeDescriptionRental = ContributorTypeDescription("Rental")
	ContributorTypeDescriptionRetail = ContributorTypeDescription("Retail")
	ContributorTypeDescriptionStockbroker = ContributorTypeDescription("Stockbroker")
	ContributorTypeDescriptionSolicitor = ContributorTypeDescription("Solicitor")
	ContributorTypeDescriptionSlotRental = ContributorTypeDescription("Slot Rental")
	ContributorTypeDescriptionSecurityServices = ContributorTypeDescription("Security Services")
	ContributorTypeDescriptionTVProgramSupplierCable = ContributorTypeDescription("TV Program Supplier (Cable)")
	ContributorTypeDescriptionTravelInsurer = ContributorTypeDescription("Travel Insurer")
	ContributorTypeDescriptionThirdParty = ContributorTypeDescription("Third Party")
	ContributorTypeDescriptionTVRental = ContributorTypeDescription("TV Rental")
	ContributorTypeDescriptionEquifax = ContributorTypeDescription("Equifax")
)

// MarshalJSON encodes JSON.
func (i ContributorTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case ContributorTypeDescriptionAccountancy:
	case ContributorTypeDescriptionBankFinanceDivision:
	case ContributorTypeDescriptionBank:
	case ContributorTypeDescriptionBuildingSociety:
	case ContributorTypeDescriptionCreditBroker:
	case ContributorTypeDescriptionCreditCard:
	case ContributorTypeDescriptionCustomsExcise:
	case ContributorTypeDescriptionChequeGuarantee:
	case ContributorTypeDescriptionChargeCard:
	case ContributorTypeDescriptionCreditInsurance:
	case ContributorTypeDescriptionCouncil:
	case ContributorTypeDescriptionCommercialReporting:
	case ContributorTypeDescriptionCommunicationsSupplier:
	case ContributorTypeDescriptionDebtCollector:
	case ContributorTypeDescriptionDistributionWholesale:
	case ContributorTypeDescriptionEnquiryAgent:
	case ContributorTypeDescriptionEnergySupplier:
	case ContributorTypeDescriptionFinanceHouse:
	case ContributorTypeDescriptionFinancialServices:
	case ContributorTypeDescriptionGeneralInsurance:
	case ContributorTypeDescriptionGovernment:
	case ContributorTypeDescriptionHireCarRental:
	case ContributorTypeDescriptionHomeFurnisher:
	case ContributorTypeDescriptionHomeImprovements:
	case ContributorTypeDescriptionHouseBuilder:
	case ContributorTypeDescriptionHealthService:
	case ContributorTypeDescriptionHotelTravel:
	case ContributorTypeDescriptionInsuranceBroker:
	case ContributorTypeDescriptionInsurance:
	case ContributorTypeDescriptionInlandRevenue:
	case ContributorTypeDescriptionLossAdjuster:
	case ContributorTypeDescriptionLeasing:
	case ContributorTypeDescriptionMotorDealer:
	case ContributorTypeDescriptionMedia:
	case ContributorTypeDescriptionManufacturingIndustrial:
	case ContributorTypeDescriptionMarketing:
	case ContributorTypeDescriptionMiscellaneous:
	case ContributorTypeDescriptionMailOrder:
	case ContributorTypeDescriptionMortgageSupplier:
	case ContributorTypeDescriptionOverseas:
	case ContributorTypeDescriptionPropertyManagement:
	case ContributorTypeDescriptionPolice:
	case ContributorTypeDescriptionPublicUtility:
	case ContributorTypeDescriptionRental:
	case ContributorTypeDescriptionRetail:
	case ContributorTypeDescriptionStockbroker:
	case ContributorTypeDescriptionSolicitor:
	case ContributorTypeDescriptionSlotRental:
	case ContributorTypeDescriptionSecurityServices:
	case ContributorTypeDescriptionTVProgramSupplierCable:
	case ContributorTypeDescriptionTravelInsurer:
	case ContributorTypeDescriptionThirdParty:
	case ContributorTypeDescriptionTVRental:
	case ContributorTypeDescriptionEquifax:

	default:
		return nil, fmt.Errorf("unexpected ContributorTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ContributorTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ContributorTypeDescription(ii)

	switch v {
	case ContributorTypeDescriptionAccountancy:
	case ContributorTypeDescriptionBankFinanceDivision:
	case ContributorTypeDescriptionBank:
	case ContributorTypeDescriptionBuildingSociety:
	case ContributorTypeDescriptionCreditBroker:
	case ContributorTypeDescriptionCreditCard:
	case ContributorTypeDescriptionCustomsExcise:
	case ContributorTypeDescriptionChequeGuarantee:
	case ContributorTypeDescriptionChargeCard:
	case ContributorTypeDescriptionCreditInsurance:
	case ContributorTypeDescriptionCouncil:
	case ContributorTypeDescriptionCommercialReporting:
	case ContributorTypeDescriptionCommunicationsSupplier:
	case ContributorTypeDescriptionDebtCollector:
	case ContributorTypeDescriptionDistributionWholesale:
	case ContributorTypeDescriptionEnquiryAgent:
	case ContributorTypeDescriptionEnergySupplier:
	case ContributorTypeDescriptionFinanceHouse:
	case ContributorTypeDescriptionFinancialServices:
	case ContributorTypeDescriptionGeneralInsurance:
	case ContributorTypeDescriptionGovernment:
	case ContributorTypeDescriptionHireCarRental:
	case ContributorTypeDescriptionHomeFurnisher:
	case ContributorTypeDescriptionHomeImprovements:
	case ContributorTypeDescriptionHouseBuilder:
	case ContributorTypeDescriptionHealthService:
	case ContributorTypeDescriptionHotelTravel:
	case ContributorTypeDescriptionInsuranceBroker:
	case ContributorTypeDescriptionInsurance:
	case ContributorTypeDescriptionInlandRevenue:
	case ContributorTypeDescriptionLossAdjuster:
	case ContributorTypeDescriptionLeasing:
	case ContributorTypeDescriptionMotorDealer:
	case ContributorTypeDescriptionMedia:
	case ContributorTypeDescriptionManufacturingIndustrial:
	case ContributorTypeDescriptionMarketing:
	case ContributorTypeDescriptionMiscellaneous:
	case ContributorTypeDescriptionMailOrder:
	case ContributorTypeDescriptionMortgageSupplier:
	case ContributorTypeDescriptionOverseas:
	case ContributorTypeDescriptionPropertyManagement:
	case ContributorTypeDescriptionPolice:
	case ContributorTypeDescriptionPublicUtility:
	case ContributorTypeDescriptionRental:
	case ContributorTypeDescriptionRetail:
	case ContributorTypeDescriptionStockbroker:
	case ContributorTypeDescriptionSolicitor:
	case ContributorTypeDescriptionSlotRental:
	case ContributorTypeDescriptionSecurityServices:
	case ContributorTypeDescriptionTVProgramSupplierCable:
	case ContributorTypeDescriptionTravelInsurer:
	case ContributorTypeDescriptionThirdParty:
	case ContributorTypeDescriptionTVRental:
	case ContributorTypeDescriptionEquifax:

	default:
		return fmt.Errorf("unexpected ContributorTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// StatusCode is an enum type.
type StatusCode string

// StatusCode values enumeration.
const (
	StatusCodeEmpty = StatusCode(".")
	StatusCode0 = StatusCode("0")
	StatusCode1 = StatusCode("1")
	StatusCode2 = StatusCode("2")
	StatusCode3 = StatusCode("3")
	StatusCode4 = StatusCode("4")
	StatusCode5 = StatusCode("5")
	StatusCode6 = StatusCode("6")
	StatusCodeA = StatusCode("A")
	StatusCodeB = StatusCode("B")
	StatusCodeI = StatusCode("I")
	StatusCodeS = StatusCode("S")
	StatusCodeU = StatusCode("U")
	StatusCodeR = StatusCode("R")
	StatusCodeD = StatusCode("D")
	StatusCodeQ = StatusCode("Q")
	StatusCodeG = StatusCode("G")
	StatusCodeN = StatusCode("N")
	StatusCodeZ = StatusCode("Z")
	StatusCodeV = StatusCode("V")
	StatusCodeW = StatusCode("W")
	StatusCodeX = StatusCode("X")
)

// MarshalJSON encodes JSON.
func (i StatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case StatusCodeEmpty:
	case StatusCode0:
	case StatusCode1:
	case StatusCode2:
	case StatusCode3:
	case StatusCode4:
	case StatusCode5:
	case StatusCode6:
	case StatusCodeA:
	case StatusCodeB:
	case StatusCodeI:
	case StatusCodeS:
	case StatusCodeU:
	case StatusCodeR:
	case StatusCodeD:
	case StatusCodeQ:
	case StatusCodeG:
	case StatusCodeN:
	case StatusCodeZ:
	case StatusCodeV:
	case StatusCodeW:
	case StatusCodeX:

	default:
		return nil, fmt.Errorf("unexpected StatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatusCode(ii)

	switch v {
	case StatusCodeEmpty:
	case StatusCode0:
	case StatusCode1:
	case StatusCode2:
	case StatusCode3:
	case StatusCode4:
	case StatusCode5:
	case StatusCode6:
	case StatusCodeA:
	case StatusCodeB:
	case StatusCodeI:
	case StatusCodeS:
	case StatusCodeU:
	case StatusCodeR:
	case StatusCodeD:
	case StatusCodeQ:
	case StatusCodeG:
	case StatusCodeN:
	case StatusCodeZ:
	case StatusCodeV:
	case StatusCodeW:
	case StatusCodeX:

	default:
		return fmt.Errorf("unexpected StatusCode value: %v", v)
	}

	*i = v

	return nil
}

// StatusDescription is an enum type.
type StatusDescription string

// StatusDescription values enumeration.
const (
	StatusDescriptionNoUpdateReceived = StatusDescription("No update received")
	StatusDescriptionUpToDateWithPayments = StatusDescription("Up to date with payments")
	StatusDescription1PaymentInArrears = StatusDescription("1 payment in arrears")
	StatusDescription2PaymentsInArrears = StatusDescription("2 payments in arrears")
	StatusDescription3PaymentsInArrears = StatusDescription("3 payments in arrears")
	StatusDescription4PaymentsInArrears = StatusDescription("4 payments in arrears")
	StatusDescription5PaymentsInArrears = StatusDescription("5 payments in arrears")
	StatusDescription6OrMorePaymentsInArrears = StatusDescription("6 or more payments in arrears")
	StatusDescriptionModerateArrearsLegacyStatus = StatusDescription("Moderate arrears (legacy status)")
	StatusDescriptionBadArrearsLegacyStatus = StatusDescription("Bad arrears (legacy status)")
	StatusDescriptionArrangementToPay = StatusDescription("Arrangement to pay")
	StatusDescriptionSettledOrSatisfied = StatusDescription("Settled or Satisfied")
	StatusDescriptionNoPaymentDueYetOrUnclassified = StatusDescription("No payment due yet or unclassified")
	StatusDescriptionRepossession = StatusDescription("Repossession")
	StatusDescriptionDefault = StatusDescription("Default")
	StatusDescriptionQueryAccountIsUnderReview = StatusDescription("Query (account is under review)")
	StatusDescriptionGoneAwayLegacyStatus = StatusDescription("Gone away (legacy status)")
	StatusDescriptionInactive = StatusDescription("Inactive")
	StatusDescriptionNeverTakenUp = StatusDescription("Never taken up")
	StatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus = StatusDescription("Goods voluntarily surrendered (legacy status)")
	StatusDescriptionWrittenOffLegacyStatus = StatusDescription("Written off (legacy status)")
	StatusDescriptionTransfer = StatusDescription("Transfer")
)

// MarshalJSON encodes JSON.
func (i StatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case StatusDescriptionNoUpdateReceived:
	case StatusDescriptionUpToDateWithPayments:
	case StatusDescription1PaymentInArrears:
	case StatusDescription2PaymentsInArrears:
	case StatusDescription3PaymentsInArrears:
	case StatusDescription4PaymentsInArrears:
	case StatusDescription5PaymentsInArrears:
	case StatusDescription6OrMorePaymentsInArrears:
	case StatusDescriptionModerateArrearsLegacyStatus:
	case StatusDescriptionBadArrearsLegacyStatus:
	case StatusDescriptionArrangementToPay:
	case StatusDescriptionSettledOrSatisfied:
	case StatusDescriptionNoPaymentDueYetOrUnclassified:
	case StatusDescriptionRepossession:
	case StatusDescriptionDefault:
	case StatusDescriptionQueryAccountIsUnderReview:
	case StatusDescriptionGoneAwayLegacyStatus:
	case StatusDescriptionInactive:
	case StatusDescriptionNeverTakenUp:
	case StatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus:
	case StatusDescriptionWrittenOffLegacyStatus:
	case StatusDescriptionTransfer:

	default:
		return nil, fmt.Errorf("unexpected StatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatusDescription(ii)

	switch v {
	case StatusDescriptionNoUpdateReceived:
	case StatusDescriptionUpToDateWithPayments:
	case StatusDescription1PaymentInArrears:
	case StatusDescription2PaymentsInArrears:
	case StatusDescription3PaymentsInArrears:
	case StatusDescription4PaymentsInArrears:
	case StatusDescription5PaymentsInArrears:
	case StatusDescription6OrMorePaymentsInArrears:
	case StatusDescriptionModerateArrearsLegacyStatus:
	case StatusDescriptionBadArrearsLegacyStatus:
	case StatusDescriptionArrangementToPay:
	case StatusDescriptionSettledOrSatisfied:
	case StatusDescriptionNoPaymentDueYetOrUnclassified:
	case StatusDescriptionRepossession:
	case StatusDescriptionDefault:
	case StatusDescriptionQueryAccountIsUnderReview:
	case StatusDescriptionGoneAwayLegacyStatus:
	case StatusDescriptionInactive:
	case StatusDescriptionNeverTakenUp:
	case StatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus:
	case StatusDescriptionWrittenOffLegacyStatus:
	case StatusDescriptionTransfer:

	default:
		return fmt.Errorf("unexpected StatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeEmpty = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode(".")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode0 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("0")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode1 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("1")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode2 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("2")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode3 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("3")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode4 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("4")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode5 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("5")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode6 = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("6")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeA = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("A")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeB = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("B")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeI = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("I")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeS = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("S")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeU = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("U")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeR = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("R")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeD = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("D")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeQ = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("Q")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeG = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("G")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeN = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("N")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeZ = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("Z")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeV = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("V")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeW = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("W")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeX = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode("X")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeEmpty:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode0:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode1:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode2:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode3:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode4:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode5:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode6:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeB:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeU:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeQ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeZ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeW:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeX:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeEmpty:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode0:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode1:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode2:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode3:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode4:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode5:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode6:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeA:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeB:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeI:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeS:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeU:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeR:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeD:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeQ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeG:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeN:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeZ:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeV:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeW:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCodeX:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoUpdateReceived = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("No update received")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionUpToDateWithPayments = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Up to date with payments")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription1PaymentInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("1 payment in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription2PaymentsInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("2 payments in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription3PaymentsInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("3 payments in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription4PaymentsInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("4 payments in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription5PaymentsInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("5 payments in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription6OrMorePaymentsInArrears = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("6 or more payments in arrears")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionModerateArrearsLegacyStatus = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Moderate arrears (legacy status)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionBadArrearsLegacyStatus = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Bad arrears (legacy status)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionArrangementToPay = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Arrangement to pay")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionSettledOrSatisfied = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Settled or Satisfied")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoPaymentDueYetOrUnclassified = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("No payment due yet or unclassified")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionRepossession = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Repossession")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionDefault = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Default")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionQueryAccountIsUnderReview = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Query (account is under review)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoneAwayLegacyStatus = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Gone away (legacy status)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionInactive = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Inactive")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNeverTakenUp = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Never taken up")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Goods voluntarily surrendered (legacy status)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionWrittenOffLegacyStatus = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Written off (legacy status)")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionTransfer = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription("Transfer")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoUpdateReceived:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionUpToDateWithPayments:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription1PaymentInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription2PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription3PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription4PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription5PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription6OrMorePaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionModerateArrearsLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionBadArrearsLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionArrangementToPay:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionSettledOrSatisfied:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoPaymentDueYetOrUnclassified:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionRepossession:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionDefault:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionQueryAccountIsUnderReview:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoneAwayLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionInactive:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNeverTakenUp:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionWrittenOffLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionTransfer:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoUpdateReceived:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionUpToDateWithPayments:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription1PaymentInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription2PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription3PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription4PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription5PaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription6OrMorePaymentsInArrears:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionModerateArrearsLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionBadArrearsLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionArrangementToPay:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionSettledOrSatisfied:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNoPaymentDueYetOrUnclassified:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionRepossession:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionDefault:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionQueryAccountIsUnderReview:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoneAwayLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionInactive:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionNeverTakenUp:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionGoodsVoluntarilySurrenderedLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionWrittenOffLegacyStatus:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescriptionTransfer:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportInsightFinancialAgreementsItemsWorstStatusDescription value: %v", v)
	}

	*i = v

	return nil
}

// ProtectCodeCode is an enum type.
type ProtectCodeCode string

// ProtectCodeCode values enumeration.
const (
	ProtectCodeCodeB1 = ProtectCodeCode("B1")
	ProtectCodeCodeB10 = ProtectCodeCode("B10")
	ProtectCodeCodeB11 = ProtectCodeCode("B11")
	ProtectCodeCodeB12 = ProtectCodeCode("B12")
	ProtectCodeCodeB2 = ProtectCodeCode("B2")
	ProtectCodeCodeB3 = ProtectCodeCode("B3")
	ProtectCodeCodeB4 = ProtectCodeCode("B4")
	ProtectCodeCodeB5 = ProtectCodeCode("B5")
	ProtectCodeCodeB6 = ProtectCodeCode("B6")
	ProtectCodeCodeB7 = ProtectCodeCode("B7")
	ProtectCodeCodeB8 = ProtectCodeCode("B8")
	ProtectCodeCodeB9 = ProtectCodeCode("B9")
	ProtectCodeCodeC1 = ProtectCodeCode("C1")
	ProtectCodeCodeC2 = ProtectCodeCode("C2")
	ProtectCodeCodeC3 = ProtectCodeCode("C3")
	ProtectCodeCodeC4 = ProtectCodeCode("C4")
	ProtectCodeCodeC5 = ProtectCodeCode("C5")
	ProtectCodeCodeC6 = ProtectCodeCode("C6")
	ProtectCodeCodeC7 = ProtectCodeCode("C7")
	ProtectCodeCodeC8 = ProtectCodeCode("C8")
	ProtectCodeCodeD1 = ProtectCodeCode("D1")
	ProtectCodeCodeD11 = ProtectCodeCode("D11")
	ProtectCodeCodeD2 = ProtectCodeCode("D2")
	ProtectCodeCodeD3 = ProtectCodeCode("D3")
	ProtectCodeCodeD4 = ProtectCodeCode("D4")
	ProtectCodeCodeD9 = ProtectCodeCode("D9")
	ProtectCodeCodeH1 = ProtectCodeCode("H1")
	ProtectCodeCodeH10 = ProtectCodeCode("H10")
	ProtectCodeCodeH11 = ProtectCodeCode("H11")
	ProtectCodeCodeH2 = ProtectCodeCode("H2")
	ProtectCodeCodeH3 = ProtectCodeCode("H3")
	ProtectCodeCodeH4 = ProtectCodeCode("H4")
	ProtectCodeCodeH5 = ProtectCodeCode("H5")
	ProtectCodeCodeH6 = ProtectCodeCode("H6")
	ProtectCodeCodeH7 = ProtectCodeCode("H7")
	ProtectCodeCodeH8 = ProtectCodeCode("H8")
	ProtectCodeCodeH9 = ProtectCodeCode("H9")
	ProtectCodeCodeO1 = ProtectCodeCode("O1")
	ProtectCodeCodeO2 = ProtectCodeCode("O2")
	ProtectCodeCodeV1 = ProtectCodeCode("V1")
	ProtectCodeCodeV10 = ProtectCodeCode("V10")
	ProtectCodeCodeV11 = ProtectCodeCode("V11")
	ProtectCodeCodeV12 = ProtectCodeCode("V12")
	ProtectCodeCodeV13 = ProtectCodeCode("V13")
	ProtectCodeCodeV14 = ProtectCodeCode("V14")
	ProtectCodeCodeV15 = ProtectCodeCode("V15")
	ProtectCodeCodeV2 = ProtectCodeCode("V2")
	ProtectCodeCodeV3 = ProtectCodeCode("V3")
	ProtectCodeCodeV4 = ProtectCodeCode("V4")
	ProtectCodeCodeV5 = ProtectCodeCode("V5")
	ProtectCodeCodeV6 = ProtectCodeCode("V6")
	ProtectCodeCodeV7 = ProtectCodeCode("V7")
	ProtectCodeCodeV8 = ProtectCodeCode("V8")
	ProtectCodeCodeV9 = ProtectCodeCode("V9")
)

// MarshalJSON encodes JSON.
func (i ProtectCodeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case ProtectCodeCodeB1:
	case ProtectCodeCodeB10:
	case ProtectCodeCodeB11:
	case ProtectCodeCodeB12:
	case ProtectCodeCodeB2:
	case ProtectCodeCodeB3:
	case ProtectCodeCodeB4:
	case ProtectCodeCodeB5:
	case ProtectCodeCodeB6:
	case ProtectCodeCodeB7:
	case ProtectCodeCodeB8:
	case ProtectCodeCodeB9:
	case ProtectCodeCodeC1:
	case ProtectCodeCodeC2:
	case ProtectCodeCodeC3:
	case ProtectCodeCodeC4:
	case ProtectCodeCodeC5:
	case ProtectCodeCodeC6:
	case ProtectCodeCodeC7:
	case ProtectCodeCodeC8:
	case ProtectCodeCodeD1:
	case ProtectCodeCodeD11:
	case ProtectCodeCodeD2:
	case ProtectCodeCodeD3:
	case ProtectCodeCodeD4:
	case ProtectCodeCodeD9:
	case ProtectCodeCodeH1:
	case ProtectCodeCodeH10:
	case ProtectCodeCodeH11:
	case ProtectCodeCodeH2:
	case ProtectCodeCodeH3:
	case ProtectCodeCodeH4:
	case ProtectCodeCodeH5:
	case ProtectCodeCodeH6:
	case ProtectCodeCodeH7:
	case ProtectCodeCodeH8:
	case ProtectCodeCodeH9:
	case ProtectCodeCodeO1:
	case ProtectCodeCodeO2:
	case ProtectCodeCodeV1:
	case ProtectCodeCodeV10:
	case ProtectCodeCodeV11:
	case ProtectCodeCodeV12:
	case ProtectCodeCodeV13:
	case ProtectCodeCodeV14:
	case ProtectCodeCodeV15:
	case ProtectCodeCodeV2:
	case ProtectCodeCodeV3:
	case ProtectCodeCodeV4:
	case ProtectCodeCodeV5:
	case ProtectCodeCodeV6:
	case ProtectCodeCodeV7:
	case ProtectCodeCodeV8:
	case ProtectCodeCodeV9:

	default:
		return nil, fmt.Errorf("unexpected ProtectCodeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ProtectCodeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ProtectCodeCode(ii)

	switch v {
	case ProtectCodeCodeB1:
	case ProtectCodeCodeB10:
	case ProtectCodeCodeB11:
	case ProtectCodeCodeB12:
	case ProtectCodeCodeB2:
	case ProtectCodeCodeB3:
	case ProtectCodeCodeB4:
	case ProtectCodeCodeB5:
	case ProtectCodeCodeB6:
	case ProtectCodeCodeB7:
	case ProtectCodeCodeB8:
	case ProtectCodeCodeB9:
	case ProtectCodeCodeC1:
	case ProtectCodeCodeC2:
	case ProtectCodeCodeC3:
	case ProtectCodeCodeC4:
	case ProtectCodeCodeC5:
	case ProtectCodeCodeC6:
	case ProtectCodeCodeC7:
	case ProtectCodeCodeC8:
	case ProtectCodeCodeD1:
	case ProtectCodeCodeD11:
	case ProtectCodeCodeD2:
	case ProtectCodeCodeD3:
	case ProtectCodeCodeD4:
	case ProtectCodeCodeD9:
	case ProtectCodeCodeH1:
	case ProtectCodeCodeH10:
	case ProtectCodeCodeH11:
	case ProtectCodeCodeH2:
	case ProtectCodeCodeH3:
	case ProtectCodeCodeH4:
	case ProtectCodeCodeH5:
	case ProtectCodeCodeH6:
	case ProtectCodeCodeH7:
	case ProtectCodeCodeH8:
	case ProtectCodeCodeH9:
	case ProtectCodeCodeO1:
	case ProtectCodeCodeO2:
	case ProtectCodeCodeV1:
	case ProtectCodeCodeV10:
	case ProtectCodeCodeV11:
	case ProtectCodeCodeV12:
	case ProtectCodeCodeV13:
	case ProtectCodeCodeV14:
	case ProtectCodeCodeV15:
	case ProtectCodeCodeV2:
	case ProtectCodeCodeV3:
	case ProtectCodeCodeV4:
	case ProtectCodeCodeV5:
	case ProtectCodeCodeV6:
	case ProtectCodeCodeV7:
	case ProtectCodeCodeV8:
	case ProtectCodeCodeV9:

	default:
		return fmt.Errorf("unexpected ProtectCodeCode value: %v", v)
	}

	*i = v

	return nil
}

// ProtectCodeDescription is an enum type.
type ProtectCodeDescription string

// ProtectCodeDescription values enumeration.
const (
	ProtectCodeDescriptionWarningConsiderableCreditHistoryRiskIdentified = ProtectCodeDescription("Warning.Considerable Credit History Risk identified")
	ProtectCodeDescriptionWarningReferToEquifaxMajorInvestigationTeamUrgentlyOn08456000585 = ProtectCodeDescription("Warning.Refer to Equifax Major Investigation Team urgently on 0845 6000585.")
	ProtectCodeDescriptionWarningFaxOrPostTradeRefereeNamesAndCreditApplicationFormsToAssistEquifaxMajorInvestigationTeamOn003535341502 = ProtectCodeDescription("Warning.Fax or post trade referee names and credit application forms to assist Equifax Major Investigation Team on 00353 5341502")
	ProtectCodeDescriptionWarningUnsecuredCreditOfAnyKindShouldNotBeUndertakenWithoutContactingTheEquifaxMajorInvestigationTeam = ProtectCodeDescription("Warning.Unsecured credit of any kind should not be undertaken without contacting the Equifax Major Investigation Team")
	ProtectCodeDescriptionWarningSignificantCreditHistoryRiskIdentified = ProtectCodeDescription("Warning.Significant Credit History Risk identified")
	ProtectCodeDescriptionWarningTypicalEnquiryPatternIdentified = ProtectCodeDescription("Warning.Typical enquiry pattern identified")
	ProtectCodeDescriptionWarningProbableEnquiryPatternIdentified = ProtectCodeDescription("Warning.Probable enquiry pattern identified")
	ProtectCodeDescriptionAcceptableEnquiryPatternIdentified = ProtectCodeDescription("Acceptable enquiry pattern identified")
	ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskConsiderable = ProtectCodeDescription("Warning.Investigation Bureau findings indicate Risk Considerable")
	ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskHigh = ProtectCodeDescription("Warning.Investigation Bureau findings indicate Risk High")
	ProtectCodeDescriptionInvestigationBureauFindingsIndicateNothingAdverseTracedduringInvestigationFollowingReportOfDifficulties = ProtectCodeDescription("Investigation Bureau findings indicate Nothing Adverse Tracedduring investigation following report of difficulties")
	ProtectCodeDescriptionAsAPrecautionCreditHistoryShouldBeCheckedUsingAnEquifaxConnectionsreport = ProtectCodeDescription("As a precaution Credit History should be checked using an Equifax Connectionsreport")
	ProtectCodeDescriptionCautionOtherTradingStylesThatMayBeConnectedToTheSubjectButAreNotProvenToBeHaveLessThan5CountyCourtJudgementsRecordedAgainstThem = ProtectCodeDescription("Caution.Other trading styles that may be connected to the subject (but are not proven to be) have less than 5 County Court Judgements recorded against them")
	ProtectCodeDescriptionWarningOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeHave5OrMoreCountyCourtJudgementsRecordedAgainstThem = ProtectCodeDescription("Warning.Other trading styles that may be connected to subject (but are not proven to be) have 5 or more County Court Judgements recorded against them")
	ProtectCodeDescriptionWarningDetrimentalInformationAgainstOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeOrBusinessesOrCompaniesThatMayBeConnectedToSubjectButAreNotProvenToBeMayRepresentAnUnacceptableLevelOfRisk = ProtectCodeDescription("Warning.Detrimental information against other trading styles that may be connected to subject (but are not proven to be) or businesses or companies that may be connected to subject (but are not proven to be) may represent an unacceptable level of risk")
	ProtectCodeDescriptionWarningThereIsAPossibilityThatAllPersonsInvolvedInControllingTheBusinessAreNotOpenlyShownAtCompaniesRegistrationOffice = ProtectCodeDescription("Warning.There is a possibility that all persons involved in controlling the business are not openly shown at Companies Registration Office")
	ProtectCodeDescriptionWarningTranspositionOfNamesOrVariationsInNamesAppearToConcealDetrimentalInformationWhichWouldOtherwiseBeMatchedTheDegreeOfIntentionIfAnyOrProcessingErrorIfAnyIsNotKnown = ProtectCodeDescription("Warning.Transposition of names or variations in names appear to conceal detrimental information which would otherwise be matched. The degree of intention (if any) or processing error (if any) is not known")
	ProtectCodeDescriptionWarningWeCannotTraceEvidenceOfExternalInterestInOrEvidenceOfTheExistenceOfThisBusinessToCoincideWithTheStatedStartDate = ProtectCodeDescription("Warning.We cannot trace evidence of external interest in. or evidence of the existence of. this business to coincide with the stated start date.")
	ProtectCodeDescriptionSubjectHasBeenIndependentlyValidatedAsHavingExistedForMoreThan3Years = ProtectCodeDescription("Subject has been independently validated as having existed for more than 3 years")
	ProtectCodeDescriptionExternalInterestInSubjectPredates5Years = ProtectCodeDescription("External interest in subject predates 5 years.")
	ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyIsRecordedAsBeingADisqualifiedDirector = ProtectCodeDescription("Warning.A current officer of the company is recorded as being a disqualified Director.")
	ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorThePersonWasGrantedAnExemptionToContinueToDirectSpecificCompanies = ProtectCodeDescription("A previous director and / or secretary of this company is recorded as being a disqualified director. The person was granted an exemption to continue to direct specific companies")
	ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyWasFormerlyRecordedAsADisqualifiedDirector = ProtectCodeDescription("Warning.A current officer of the company was formerly recorded as a disqualified Director.")
	ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsCurrentlyBeingDisqualified = ProtectCodeDescription("Warning.A previous officer of the company is recorded as currently being disqualified.")
	ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsPreviouslyBeingADisqualifedDirector = ProtectCodeDescription("Warning.A previous officer of the company is recorded as previously being a disqualifed director.")
	ProtectCodeDescriptionWarningADirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorTheCourtHasGrantedTheDirectorSecretaryAnExemptionAllowingThePersonToContinueToOperateAsADirectorSecretaryOfSpecificCompaniesIncludingThisCompany = ProtectCodeDescription("Warning.A director and / or secretary of this company is recorded as being a disqualified director. The court has granted the director / secretary an exemption. allowing the person to continue to operate as a director / secretary of specific companies including this company")
	ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders = ProtectCodeDescription("Caution.Director(s) and/or Secretary have been recorded as holding/having held 5 or more other directorships in a company/companies which have been subjected to voluntary or compulsory winding up procedures or administration orders.")
	ProtectCodeDescriptionThereAreNoDirectorsOnFileAtThisTime = ProtectCodeDescription("There are no directors on file at this time")
	ProtectCodeDescriptionDirectorsAreCompanyFormationAgentsOnly = ProtectCodeDescription("Directors are company formation agents only")
	ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders = ProtectCodeDescription("Caution. Director(s) and/or Secretary have been recorded as holding/having held 2 or more other directorships in a company/companies which have been subjected to voluntary or compulsory winding up procedures or administration orders.")
	ProtectCodeDescriptionADirectorAndOrSecretaryHaveBeenRecordedAsHoldingADirectorshipOfOneOtherCompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAnAdministrationOrder = ProtectCodeDescription("A Director and/or Secretary have been recorded as holding a directorship of one other company which has been subjected to voluntary or compulsory winding up procedures or an administration order.")
	ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenStruckOffTheRegisterOfCompaniesAsAResultOfEitherASubjectCompanyVoluntaryApplicationOrDueToNonCompliance = ProtectCodeDescription("Current/previous Director(s) and/or current/previous Secretary have been recorded as being directors of a company/or companies which have been struck off the Register of Companies as a result of either a subject company voluntary application or due to non compliance.")
	ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenDissolved = ProtectCodeDescription("Current/Previous Director(s) and/or current/previous Secretary have been recorded as being directors of a company or companies which have been dissolved.")
	ProtectCodeDescriptionNoTraceOfCurrentDirectorsBeingRecordedAsDirectorsOfOtherFailedCompaniesUnderTheseExactNamesAndContactDetails = ProtectCodeDescription("No trace of current directors being recorded as directors of other failed companies under these exact names and contact details")
	ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders = ProtectCodeDescription("Caution.Previous Director(s) and/or Secretary have been recorded as holding/having held 5 or more other directorships in a company/companies which have been subjected to voluntary or compulsory winding up procedures or administration orders.")
	ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders = ProtectCodeDescription("Caution.Previous Director(s) and/or Secretary have been recorded as holding/having held 2 or more other directorships in a company/companies which have been subjected to voluntary or compulsory winding up procedures or administration orders.")
	ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeldOneOtherDirectorshipInACompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProcedureOrAnAdministrationOrder = ProtectCodeDescription("A previous Director and/or Secretary have been recorded as holding/having held one other directorship in a company which has been subjected to voluntary or compulsory winding up procedure or an administration order.")
	ProtectCodeDescriptionTheProtectScoreIsNotCurrentlyAvailablePleaseContactEquifaxMajorInvestigationTeamTel08456000585 = ProtectCodeDescription("The Protect Score is not currently available. Please contact Equifax Major Investigation Team.Tel:0845 6000585.")
	ProtectCodeDescriptionTheProtectScoreIsUnderReviewPleaseContactEquifaxMajorInvestigationTeamTel08456000585 = ProtectCodeDescription("The Protect Score is under review. please contact Equifax Major Investigation Team.Tel: 0845 6000585.")
	ProtectCodeDescriptionCautionTheAccountsHaveNotBeenAudited = ProtectCodeDescription("Caution.The accounts have not been audited")
	ProtectCodeDescriptionWarningTradeRefereePremisesCannotBeLocated = ProtectCodeDescription("Warning.Trade referee premises cannot be located")
	ProtectCodeDescriptionWarningTheTradeRefereeSAreUsedByOtherSuspectCases = ProtectCodeDescription("Warning.The trade referee(s) are used by other suspect cases")
	ProtectCodeDescriptionWarningTheTradeRefereeSSuppliedToUsAppearToBeConnectedToSubject = ProtectCodeDescription("Warning.The trade referee(s) supplied to us appear to be connected to subject")
	ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreReportedToLinkBackToSubjectCompany = ProtectCodeDescription("Warning.The trade referee(s) contact numbers are reported to link back to subject company")
	ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreRecordedAsCeasedLineS = ProtectCodeDescription("Warning.The trade referee(s) contact numbers are recorded as ceased line(s)")
	ProtectCodeDescriptionCautionTheCompanyHasAvailedItselfOfAnExemptionFromFilingAccounts = ProtectCodeDescription("Caution. The company has availed itself of an exemption from filing accounts")
	ProtectCodeDescriptionCautionTheAccountsInThisReportHaveNotBeenSubjectedToAuditButHaveHadAccountancySignOff = ProtectCodeDescription("Caution.The accounts in this report have not been subjected to audit but have had accountancy sign off")
	ProtectCodeDescriptionCautionTheRegisteredOfficeOfThisCompanyHasBeenChangedInTheLastMonth = ProtectCodeDescription("Caution.The Registered Office of this company has been changed in the last month")
	ProtectCodeDescriptionCautionTheAuditorsAuditLessThan5OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice = ProtectCodeDescription("Caution.The auditors audit less than 5 other U.K. limited companies according to data on file from Companies Registration Office")
	ProtectCodeDescriptionCautionTheAuditorsAudit615OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice = ProtectCodeDescription("Caution.The auditors audit 6 - 15 other U.K. limited companies according to data on file from Companies Registration Office")
	ProtectCodeDescriptionTheAuditorsAudit16OrMoreUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice = ProtectCodeDescription("The auditors audit 16 or more U.K. limited companies according to data on file from Companies Registration Office")
	ProtectCodeDescriptionWarningTheAuditorsClaimNotToBeTheAuditorsOfSubject = ProtectCodeDescription("Warning.The auditors claim not to be the auditors of subject")
	ProtectCodeDescriptionCautionTradeRefereeSSuppliedToUsCannotBeTracedOnOurBusinessOrCorporateDatabases = ProtectCodeDescription("Caution.Trade referee(s) supplied to us cannot be traced on our business or corporate databases")
	ProtectCodeDescriptionCaution = ProtectCodeDescription("Caution.")
)

// MarshalJSON encodes JSON.
func (i ProtectCodeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case ProtectCodeDescriptionWarningConsiderableCreditHistoryRiskIdentified:
	case ProtectCodeDescriptionWarningReferToEquifaxMajorInvestigationTeamUrgentlyOn08456000585:
	case ProtectCodeDescriptionWarningFaxOrPostTradeRefereeNamesAndCreditApplicationFormsToAssistEquifaxMajorInvestigationTeamOn003535341502:
	case ProtectCodeDescriptionWarningUnsecuredCreditOfAnyKindShouldNotBeUndertakenWithoutContactingTheEquifaxMajorInvestigationTeam:
	case ProtectCodeDescriptionWarningSignificantCreditHistoryRiskIdentified:
	case ProtectCodeDescriptionWarningTypicalEnquiryPatternIdentified:
	case ProtectCodeDescriptionWarningProbableEnquiryPatternIdentified:
	case ProtectCodeDescriptionAcceptableEnquiryPatternIdentified:
	case ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskConsiderable:
	case ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskHigh:
	case ProtectCodeDescriptionInvestigationBureauFindingsIndicateNothingAdverseTracedduringInvestigationFollowingReportOfDifficulties:
	case ProtectCodeDescriptionAsAPrecautionCreditHistoryShouldBeCheckedUsingAnEquifaxConnectionsreport:
	case ProtectCodeDescriptionCautionOtherTradingStylesThatMayBeConnectedToTheSubjectButAreNotProvenToBeHaveLessThan5CountyCourtJudgementsRecordedAgainstThem:
	case ProtectCodeDescriptionWarningOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeHave5OrMoreCountyCourtJudgementsRecordedAgainstThem:
	case ProtectCodeDescriptionWarningDetrimentalInformationAgainstOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeOrBusinessesOrCompaniesThatMayBeConnectedToSubjectButAreNotProvenToBeMayRepresentAnUnacceptableLevelOfRisk:
	case ProtectCodeDescriptionWarningThereIsAPossibilityThatAllPersonsInvolvedInControllingTheBusinessAreNotOpenlyShownAtCompaniesRegistrationOffice:
	case ProtectCodeDescriptionWarningTranspositionOfNamesOrVariationsInNamesAppearToConcealDetrimentalInformationWhichWouldOtherwiseBeMatchedTheDegreeOfIntentionIfAnyOrProcessingErrorIfAnyIsNotKnown:
	case ProtectCodeDescriptionWarningWeCannotTraceEvidenceOfExternalInterestInOrEvidenceOfTheExistenceOfThisBusinessToCoincideWithTheStatedStartDate:
	case ProtectCodeDescriptionSubjectHasBeenIndependentlyValidatedAsHavingExistedForMoreThan3Years:
	case ProtectCodeDescriptionExternalInterestInSubjectPredates5Years:
	case ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyIsRecordedAsBeingADisqualifiedDirector:
	case ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorThePersonWasGrantedAnExemptionToContinueToDirectSpecificCompanies:
	case ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyWasFormerlyRecordedAsADisqualifiedDirector:
	case ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsCurrentlyBeingDisqualified:
	case ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsPreviouslyBeingADisqualifedDirector:
	case ProtectCodeDescriptionWarningADirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorTheCourtHasGrantedTheDirectorSecretaryAnExemptionAllowingThePersonToContinueToOperateAsADirectorSecretaryOfSpecificCompaniesIncludingThisCompany:
	case ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionThereAreNoDirectorsOnFileAtThisTime:
	case ProtectCodeDescriptionDirectorsAreCompanyFormationAgentsOnly:
	case ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionADirectorAndOrSecretaryHaveBeenRecordedAsHoldingADirectorshipOfOneOtherCompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAnAdministrationOrder:
	case ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenStruckOffTheRegisterOfCompaniesAsAResultOfEitherASubjectCompanyVoluntaryApplicationOrDueToNonCompliance:
	case ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenDissolved:
	case ProtectCodeDescriptionNoTraceOfCurrentDirectorsBeingRecordedAsDirectorsOfOtherFailedCompaniesUnderTheseExactNamesAndContactDetails:
	case ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeldOneOtherDirectorshipInACompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProcedureOrAnAdministrationOrder:
	case ProtectCodeDescriptionTheProtectScoreIsNotCurrentlyAvailablePleaseContactEquifaxMajorInvestigationTeamTel08456000585:
	case ProtectCodeDescriptionTheProtectScoreIsUnderReviewPleaseContactEquifaxMajorInvestigationTeamTel08456000585:
	case ProtectCodeDescriptionCautionTheAccountsHaveNotBeenAudited:
	case ProtectCodeDescriptionWarningTradeRefereePremisesCannotBeLocated:
	case ProtectCodeDescriptionWarningTheTradeRefereeSAreUsedByOtherSuspectCases:
	case ProtectCodeDescriptionWarningTheTradeRefereeSSuppliedToUsAppearToBeConnectedToSubject:
	case ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreReportedToLinkBackToSubjectCompany:
	case ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreRecordedAsCeasedLineS:
	case ProtectCodeDescriptionCautionTheCompanyHasAvailedItselfOfAnExemptionFromFilingAccounts:
	case ProtectCodeDescriptionCautionTheAccountsInThisReportHaveNotBeenSubjectedToAuditButHaveHadAccountancySignOff:
	case ProtectCodeDescriptionCautionTheRegisteredOfficeOfThisCompanyHasBeenChangedInTheLastMonth:
	case ProtectCodeDescriptionCautionTheAuditorsAuditLessThan5OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionCautionTheAuditorsAudit615OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionTheAuditorsAudit16OrMoreUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionWarningTheAuditorsClaimNotToBeTheAuditorsOfSubject:
	case ProtectCodeDescriptionCautionTradeRefereeSSuppliedToUsCannotBeTracedOnOurBusinessOrCorporateDatabases:
	case ProtectCodeDescriptionCaution:

	default:
		return nil, fmt.Errorf("unexpected ProtectCodeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ProtectCodeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ProtectCodeDescription(ii)

	switch v {
	case ProtectCodeDescriptionWarningConsiderableCreditHistoryRiskIdentified:
	case ProtectCodeDescriptionWarningReferToEquifaxMajorInvestigationTeamUrgentlyOn08456000585:
	case ProtectCodeDescriptionWarningFaxOrPostTradeRefereeNamesAndCreditApplicationFormsToAssistEquifaxMajorInvestigationTeamOn003535341502:
	case ProtectCodeDescriptionWarningUnsecuredCreditOfAnyKindShouldNotBeUndertakenWithoutContactingTheEquifaxMajorInvestigationTeam:
	case ProtectCodeDescriptionWarningSignificantCreditHistoryRiskIdentified:
	case ProtectCodeDescriptionWarningTypicalEnquiryPatternIdentified:
	case ProtectCodeDescriptionWarningProbableEnquiryPatternIdentified:
	case ProtectCodeDescriptionAcceptableEnquiryPatternIdentified:
	case ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskConsiderable:
	case ProtectCodeDescriptionWarningInvestigationBureauFindingsIndicateRiskHigh:
	case ProtectCodeDescriptionInvestigationBureauFindingsIndicateNothingAdverseTracedduringInvestigationFollowingReportOfDifficulties:
	case ProtectCodeDescriptionAsAPrecautionCreditHistoryShouldBeCheckedUsingAnEquifaxConnectionsreport:
	case ProtectCodeDescriptionCautionOtherTradingStylesThatMayBeConnectedToTheSubjectButAreNotProvenToBeHaveLessThan5CountyCourtJudgementsRecordedAgainstThem:
	case ProtectCodeDescriptionWarningOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeHave5OrMoreCountyCourtJudgementsRecordedAgainstThem:
	case ProtectCodeDescriptionWarningDetrimentalInformationAgainstOtherTradingStylesThatMayBeConnectedToSubjectButAreNotProvenToBeOrBusinessesOrCompaniesThatMayBeConnectedToSubjectButAreNotProvenToBeMayRepresentAnUnacceptableLevelOfRisk:
	case ProtectCodeDescriptionWarningThereIsAPossibilityThatAllPersonsInvolvedInControllingTheBusinessAreNotOpenlyShownAtCompaniesRegistrationOffice:
	case ProtectCodeDescriptionWarningTranspositionOfNamesOrVariationsInNamesAppearToConcealDetrimentalInformationWhichWouldOtherwiseBeMatchedTheDegreeOfIntentionIfAnyOrProcessingErrorIfAnyIsNotKnown:
	case ProtectCodeDescriptionWarningWeCannotTraceEvidenceOfExternalInterestInOrEvidenceOfTheExistenceOfThisBusinessToCoincideWithTheStatedStartDate:
	case ProtectCodeDescriptionSubjectHasBeenIndependentlyValidatedAsHavingExistedForMoreThan3Years:
	case ProtectCodeDescriptionExternalInterestInSubjectPredates5Years:
	case ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyIsRecordedAsBeingADisqualifiedDirector:
	case ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorThePersonWasGrantedAnExemptionToContinueToDirectSpecificCompanies:
	case ProtectCodeDescriptionWarningACurrentOfficerOfTheCompanyWasFormerlyRecordedAsADisqualifiedDirector:
	case ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsCurrentlyBeingDisqualified:
	case ProtectCodeDescriptionWarningAPreviousOfficerOfTheCompanyIsRecordedAsPreviouslyBeingADisqualifedDirector:
	case ProtectCodeDescriptionWarningADirectorAndOrSecretaryOfThisCompanyIsRecordedAsBeingADisqualifiedDirectorTheCourtHasGrantedTheDirectorSecretaryAnExemptionAllowingThePersonToContinueToOperateAsADirectorSecretaryOfSpecificCompaniesIncludingThisCompany:
	case ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionThereAreNoDirectorsOnFileAtThisTime:
	case ProtectCodeDescriptionDirectorsAreCompanyFormationAgentsOnly:
	case ProtectCodeDescriptionCautionDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionADirectorAndOrSecretaryHaveBeenRecordedAsHoldingADirectorshipOfOneOtherCompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAnAdministrationOrder:
	case ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenStruckOffTheRegisterOfCompaniesAsAResultOfEitherASubjectCompanyVoluntaryApplicationOrDueToNonCompliance:
	case ProtectCodeDescriptionCurrentPreviousDirectorSAndOrCurrentPreviousSecretaryHaveBeenRecordedAsBeingDirectorsOfACompanyOrCompaniesWhichHaveBeenDissolved:
	case ProtectCodeDescriptionNoTraceOfCurrentDirectorsBeingRecordedAsDirectorsOfOtherFailedCompaniesUnderTheseExactNamesAndContactDetails:
	case ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld5OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionCautionPreviousDirectorSAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeld2OrMoreOtherDirectorshipsInACompanyCompaniesWhichHaveBeenSubjectedToVoluntaryOrCompulsoryWindingUpProceduresOrAdministrationOrders:
	case ProtectCodeDescriptionAPreviousDirectorAndOrSecretaryHaveBeenRecordedAsHoldingHavingHeldOneOtherDirectorshipInACompanyWhichHasBeenSubjectedToVoluntaryOrCompulsoryWindingUpProcedureOrAnAdministrationOrder:
	case ProtectCodeDescriptionTheProtectScoreIsNotCurrentlyAvailablePleaseContactEquifaxMajorInvestigationTeamTel08456000585:
	case ProtectCodeDescriptionTheProtectScoreIsUnderReviewPleaseContactEquifaxMajorInvestigationTeamTel08456000585:
	case ProtectCodeDescriptionCautionTheAccountsHaveNotBeenAudited:
	case ProtectCodeDescriptionWarningTradeRefereePremisesCannotBeLocated:
	case ProtectCodeDescriptionWarningTheTradeRefereeSAreUsedByOtherSuspectCases:
	case ProtectCodeDescriptionWarningTheTradeRefereeSSuppliedToUsAppearToBeConnectedToSubject:
	case ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreReportedToLinkBackToSubjectCompany:
	case ProtectCodeDescriptionWarningTheTradeRefereeSContactNumbersAreRecordedAsCeasedLineS:
	case ProtectCodeDescriptionCautionTheCompanyHasAvailedItselfOfAnExemptionFromFilingAccounts:
	case ProtectCodeDescriptionCautionTheAccountsInThisReportHaveNotBeenSubjectedToAuditButHaveHadAccountancySignOff:
	case ProtectCodeDescriptionCautionTheRegisteredOfficeOfThisCompanyHasBeenChangedInTheLastMonth:
	case ProtectCodeDescriptionCautionTheAuditorsAuditLessThan5OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionCautionTheAuditorsAudit615OtherUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionTheAuditorsAudit16OrMoreUKLimitedCompaniesAccordingToDataOnFileFromCompaniesRegistrationOffice:
	case ProtectCodeDescriptionWarningTheAuditorsClaimNotToBeTheAuditorsOfSubject:
	case ProtectCodeDescriptionCautionTradeRefereeSSuppliedToUsCannotBeTracedOnOurBusinessOrCorporateDatabases:
	case ProtectCodeDescriptionCaution:

	default:
		return fmt.Errorf("unexpected ProtectCodeDescription value: %v", v)
	}

	*i = v

	return nil
}

// ScoresAndLimitsScoreGrade is an enum type.
type ScoresAndLimitsScoreGrade string

// ScoresAndLimitsScoreGrade values enumeration.
const (
	ScoresAndLimitsScoreGradeA = ScoresAndLimitsScoreGrade("A+")
	ScoresAndLimitsScoreGradeB = ScoresAndLimitsScoreGrade("B+")
	ScoresAndLimitsScoreGradeC = ScoresAndLimitsScoreGrade("C+")
	ScoresAndLimitsScoreGradeD = ScoresAndLimitsScoreGrade("D+")
	ScoresAndLimitsScoreGradeE = ScoresAndLimitsScoreGrade("E+")
	ScoresAndLimitsScoreGradeF = ScoresAndLimitsScoreGrade("F+")
	ScoresAndLimitsScoreGradeG = ScoresAndLimitsScoreGrade("G")
	ScoresAndLimitsScoreGradeI = ScoresAndLimitsScoreGrade("I")
	ScoresAndLimitsScoreGradeN = ScoresAndLimitsScoreGrade("N")
	ScoresAndLimitsScoreGradeNA = ScoresAndLimitsScoreGrade("NA")
	ScoresAndLimitsScoreGradeNR = ScoresAndLimitsScoreGrade("NR")
	ScoresAndLimitsScoreGradeNT = ScoresAndLimitsScoreGrade("NT")
	ScoresAndLimitsScoreGradeO = ScoresAndLimitsScoreGrade("O")
)

// MarshalJSON encodes JSON.
func (i ScoresAndLimitsScoreGrade) MarshalJSON() ([]byte, error) {
	switch i {
	case ScoresAndLimitsScoreGradeA:
	case ScoresAndLimitsScoreGradeB:
	case ScoresAndLimitsScoreGradeC:
	case ScoresAndLimitsScoreGradeD:
	case ScoresAndLimitsScoreGradeE:
	case ScoresAndLimitsScoreGradeF:
	case ScoresAndLimitsScoreGradeG:
	case ScoresAndLimitsScoreGradeI:
	case ScoresAndLimitsScoreGradeN:
	case ScoresAndLimitsScoreGradeNA:
	case ScoresAndLimitsScoreGradeNR:
	case ScoresAndLimitsScoreGradeNT:
	case ScoresAndLimitsScoreGradeO:

	default:
		return nil, fmt.Errorf("unexpected ScoresAndLimitsScoreGrade value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ScoresAndLimitsScoreGrade) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ScoresAndLimitsScoreGrade(ii)

	switch v {
	case ScoresAndLimitsScoreGradeA:
	case ScoresAndLimitsScoreGradeB:
	case ScoresAndLimitsScoreGradeC:
	case ScoresAndLimitsScoreGradeD:
	case ScoresAndLimitsScoreGradeE:
	case ScoresAndLimitsScoreGradeF:
	case ScoresAndLimitsScoreGradeG:
	case ScoresAndLimitsScoreGradeI:
	case ScoresAndLimitsScoreGradeN:
	case ScoresAndLimitsScoreGradeNA:
	case ScoresAndLimitsScoreGradeNR:
	case ScoresAndLimitsScoreGradeNT:
	case ScoresAndLimitsScoreGradeO:

	default:
		return fmt.Errorf("unexpected ScoresAndLimitsScoreGrade value: %v", v)
	}

	*i = v

	return nil
}

// ScoresAndLimitsScoreGradeSixMonthsAgo is an enum type.
type ScoresAndLimitsScoreGradeSixMonthsAgo string

// ScoresAndLimitsScoreGradeSixMonthsAgo values enumeration.
const (
	ScoresAndLimitsScoreGradeSixMonthsAgoA = ScoresAndLimitsScoreGradeSixMonthsAgo("A+")
	ScoresAndLimitsScoreGradeSixMonthsAgoB = ScoresAndLimitsScoreGradeSixMonthsAgo("B+")
	ScoresAndLimitsScoreGradeSixMonthsAgoC = ScoresAndLimitsScoreGradeSixMonthsAgo("C+")
	ScoresAndLimitsScoreGradeSixMonthsAgoD = ScoresAndLimitsScoreGradeSixMonthsAgo("D+")
	ScoresAndLimitsScoreGradeSixMonthsAgoE = ScoresAndLimitsScoreGradeSixMonthsAgo("E+")
	ScoresAndLimitsScoreGradeSixMonthsAgoF = ScoresAndLimitsScoreGradeSixMonthsAgo("F+")
	ScoresAndLimitsScoreGradeSixMonthsAgoG = ScoresAndLimitsScoreGradeSixMonthsAgo("G")
	ScoresAndLimitsScoreGradeSixMonthsAgoI = ScoresAndLimitsScoreGradeSixMonthsAgo("I")
	ScoresAndLimitsScoreGradeSixMonthsAgoN = ScoresAndLimitsScoreGradeSixMonthsAgo("N")
	ScoresAndLimitsScoreGradeSixMonthsAgoNA = ScoresAndLimitsScoreGradeSixMonthsAgo("NA")
	ScoresAndLimitsScoreGradeSixMonthsAgoNR = ScoresAndLimitsScoreGradeSixMonthsAgo("NR")
	ScoresAndLimitsScoreGradeSixMonthsAgoNT = ScoresAndLimitsScoreGradeSixMonthsAgo("NT")
	ScoresAndLimitsScoreGradeSixMonthsAgoO = ScoresAndLimitsScoreGradeSixMonthsAgo("O")
)

// MarshalJSON encodes JSON.
func (i ScoresAndLimitsScoreGradeSixMonthsAgo) MarshalJSON() ([]byte, error) {
	switch i {
	case ScoresAndLimitsScoreGradeSixMonthsAgoA:
	case ScoresAndLimitsScoreGradeSixMonthsAgoB:
	case ScoresAndLimitsScoreGradeSixMonthsAgoC:
	case ScoresAndLimitsScoreGradeSixMonthsAgoD:
	case ScoresAndLimitsScoreGradeSixMonthsAgoE:
	case ScoresAndLimitsScoreGradeSixMonthsAgoF:
	case ScoresAndLimitsScoreGradeSixMonthsAgoG:
	case ScoresAndLimitsScoreGradeSixMonthsAgoI:
	case ScoresAndLimitsScoreGradeSixMonthsAgoN:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNA:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNR:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNT:
	case ScoresAndLimitsScoreGradeSixMonthsAgoO:

	default:
		return nil, fmt.Errorf("unexpected ScoresAndLimitsScoreGradeSixMonthsAgo value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ScoresAndLimitsScoreGradeSixMonthsAgo) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ScoresAndLimitsScoreGradeSixMonthsAgo(ii)

	switch v {
	case ScoresAndLimitsScoreGradeSixMonthsAgoA:
	case ScoresAndLimitsScoreGradeSixMonthsAgoB:
	case ScoresAndLimitsScoreGradeSixMonthsAgoC:
	case ScoresAndLimitsScoreGradeSixMonthsAgoD:
	case ScoresAndLimitsScoreGradeSixMonthsAgoE:
	case ScoresAndLimitsScoreGradeSixMonthsAgoF:
	case ScoresAndLimitsScoreGradeSixMonthsAgoG:
	case ScoresAndLimitsScoreGradeSixMonthsAgoI:
	case ScoresAndLimitsScoreGradeSixMonthsAgoN:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNA:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNR:
	case ScoresAndLimitsScoreGradeSixMonthsAgoNT:
	case ScoresAndLimitsScoreGradeSixMonthsAgoO:

	default:
		return fmt.Errorf("unexpected ScoresAndLimitsScoreGradeSixMonthsAgo value: %v", v)
	}

	*i = v

	return nil
}

// ScoresAndLimitsScoreGradeThreeMonthsAgo is an enum type.
type ScoresAndLimitsScoreGradeThreeMonthsAgo string

// ScoresAndLimitsScoreGradeThreeMonthsAgo values enumeration.
const (
	ScoresAndLimitsScoreGradeThreeMonthsAgoA = ScoresAndLimitsScoreGradeThreeMonthsAgo("A+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoB = ScoresAndLimitsScoreGradeThreeMonthsAgo("B+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoC = ScoresAndLimitsScoreGradeThreeMonthsAgo("C+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoD = ScoresAndLimitsScoreGradeThreeMonthsAgo("D+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoE = ScoresAndLimitsScoreGradeThreeMonthsAgo("E+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoF = ScoresAndLimitsScoreGradeThreeMonthsAgo("F+")
	ScoresAndLimitsScoreGradeThreeMonthsAgoG = ScoresAndLimitsScoreGradeThreeMonthsAgo("G")
	ScoresAndLimitsScoreGradeThreeMonthsAgoI = ScoresAndLimitsScoreGradeThreeMonthsAgo("I")
	ScoresAndLimitsScoreGradeThreeMonthsAgoN = ScoresAndLimitsScoreGradeThreeMonthsAgo("N")
	ScoresAndLimitsScoreGradeThreeMonthsAgoNA = ScoresAndLimitsScoreGradeThreeMonthsAgo("NA")
	ScoresAndLimitsScoreGradeThreeMonthsAgoNR = ScoresAndLimitsScoreGradeThreeMonthsAgo("NR")
	ScoresAndLimitsScoreGradeThreeMonthsAgoNT = ScoresAndLimitsScoreGradeThreeMonthsAgo("NT")
	ScoresAndLimitsScoreGradeThreeMonthsAgoO = ScoresAndLimitsScoreGradeThreeMonthsAgo("O")
)

// MarshalJSON encodes JSON.
func (i ScoresAndLimitsScoreGradeThreeMonthsAgo) MarshalJSON() ([]byte, error) {
	switch i {
	case ScoresAndLimitsScoreGradeThreeMonthsAgoA:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoB:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoC:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoD:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoE:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoF:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoG:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoI:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoN:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNA:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNR:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNT:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoO:

	default:
		return nil, fmt.Errorf("unexpected ScoresAndLimitsScoreGradeThreeMonthsAgo value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ScoresAndLimitsScoreGradeThreeMonthsAgo) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ScoresAndLimitsScoreGradeThreeMonthsAgo(ii)

	switch v {
	case ScoresAndLimitsScoreGradeThreeMonthsAgoA:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoB:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoC:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoD:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoE:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoF:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoG:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoI:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoN:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNA:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNR:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoNT:
	case ScoresAndLimitsScoreGradeThreeMonthsAgoO:

	default:
		return fmt.Errorf("unexpected ScoresAndLimitsScoreGradeThreeMonthsAgo value: %v", v)
	}

	*i = v

	return nil
}

// ScoreNameCode is an enum type.
type ScoreNameCode string

// ScoreNameCode values enumeration.
const (
	ScoreNameCodeS = ScoreNameCode("S")
	ScoreNameCodeN = ScoreNameCode("N")
)

// MarshalJSON encodes JSON.
func (i ScoreNameCode) MarshalJSON() ([]byte, error) {
	switch i {
	case ScoreNameCodeS:
	case ScoreNameCodeN:

	default:
		return nil, fmt.Errorf("unexpected ScoreNameCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ScoreNameCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ScoreNameCode(ii)

	switch v {
	case ScoreNameCodeS:
	case ScoreNameCodeN:

	default:
		return fmt.Errorf("unexpected ScoreNameCode value: %v", v)
	}

	*i = v

	return nil
}

// ScoreNameDescription is an enum type.
type ScoreNameDescription string

// ScoreNameDescription values enumeration.
const (
	ScoreNameDescriptionScoreCheck = ScoreNameDescription("ScoreCheck")
	ScoreNameDescriptionNoliScore = ScoreNameDescription("Noli-score")
)

// MarshalJSON encodes JSON.
func (i ScoreNameDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case ScoreNameDescriptionScoreCheck:
	case ScoreNameDescriptionNoliScore:

	default:
		return nil, fmt.Errorf("unexpected ScoreNameDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ScoreNameDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ScoreNameDescription(ii)

	switch v {
	case ScoreNameDescriptionScoreCheck:
	case ScoreNameDescriptionNoliScore:

	default:
		return fmt.Errorf("unexpected ScoreNameDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeP = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode("P")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeO = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode("O")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeC = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode("C")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeO:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeC:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeP:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeO:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCodeC:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeCode value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription string

// PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionIndividual = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription("Individual")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionOther = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription("Other")
	PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionCompany = PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription("Company")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionIndividual:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionOther:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionCompany:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionIndividual:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionOther:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescriptionCompany:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsStructuredDataAnonymisedEquifaxBusinessReportTieredOwnershipItemsShareholdersItemsShareholderTypeDescription value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier is an enum type.
type PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier string

// PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier values enumeration.
const (
	PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLast12MonthsTurnover = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier("last_12_months_turnover")
	PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierRequestedTerm = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier("requested_term")
	PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLoanPurpose = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier("loan_purpose")
	PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierIsHomeowner = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier("is_homeowner")
	PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierNumberOfEmployees = PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier("number_of_employees")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLast12MonthsTurnover:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierRequestedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLoanPurpose:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierIsHomeowner:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierNumberOfEmployees:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier(ii)

	switch v {
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLast12MonthsTurnover:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierRequestedTerm:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierLoanPurpose:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierIsHomeowner:
	case PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifierNumberOfEmployees:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationRequestBodyDataItemsValuesItemsIdentifier value: %v", v)
	}

	*i = v

	return nil
}

// PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome is an enum type.
type PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome string

// PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome values enumeration.
const (
	PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeApply = PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome("apply")
	PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeDoNotApply = PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome("do_not_apply")
)

// MarshalJSON encodes JSON.
func (i PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome) MarshalJSON() ([]byte, error) {
	switch i {
	case PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeApply:
	case PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeDoNotApply:

	default:
		return nil, fmt.Errorf("unexpected PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome(ii)

	switch v {
	case PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeApply:
	case PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcomeDoNotApply:

	default:
		return fmt.Errorf("unexpected PostAnonymisedDataEvaluationResponseValueOKDataItemsProductsItemsEligibilityOutcome value: %v", v)
	}

	*i = v

	return nil
}

// CustomerDocumentType is an enum type.
type CustomerDocumentType string

// CustomerDocumentType values enumeration.
const (
	CustomerDocumentTypeMasterLoanAgreement = CustomerDocumentType("master_loan_agreement")
	CustomerDocumentTypeRepeatLoanAgreement = CustomerDocumentType("repeat_loan_agreement")
	CustomerDocumentTypeGuarantee = CustomerDocumentType("guarantee")
	CustomerDocumentTypeReasonableExplanation = CustomerDocumentType("reasonable_explanation")
	CustomerDocumentTypeSecci = CustomerDocumentType("secci")
)

// MarshalJSON encodes JSON.
func (i CustomerDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case CustomerDocumentTypeMasterLoanAgreement:
	case CustomerDocumentTypeRepeatLoanAgreement:
	case CustomerDocumentTypeGuarantee:
	case CustomerDocumentTypeReasonableExplanation:
	case CustomerDocumentTypeSecci:

	default:
		return nil, fmt.Errorf("unexpected CustomerDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CustomerDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CustomerDocumentType(ii)

	switch v {
	case CustomerDocumentTypeMasterLoanAgreement:
	case CustomerDocumentTypeRepeatLoanAgreement:
	case CustomerDocumentTypeGuarantee:
	case CustomerDocumentTypeReasonableExplanation:
	case CustomerDocumentTypeSecci:

	default:
		return fmt.Errorf("unexpected CustomerDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// CustomerDocumentRequiredMethod is an enum type.
type CustomerDocumentRequiredMethod string

// CustomerDocumentRequiredMethod values enumeration.
const (
	CustomerDocumentRequiredMethodElectronicSignature = CustomerDocumentRequiredMethod("electronic_signature")
	CustomerDocumentRequiredMethodWetSignature = CustomerDocumentRequiredMethod("wet_signature")
)

// MarshalJSON encodes JSON.
func (i CustomerDocumentRequiredMethod) MarshalJSON() ([]byte, error) {
	switch i {
	case CustomerDocumentRequiredMethodElectronicSignature:
	case CustomerDocumentRequiredMethodWetSignature:

	default:
		return nil, fmt.Errorf("unexpected CustomerDocumentRequiredMethod value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CustomerDocumentRequiredMethod) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CustomerDocumentRequiredMethod(ii)

	switch v {
	case CustomerDocumentRequiredMethodElectronicSignature:
	case CustomerDocumentRequiredMethodWetSignature:

	default:
		return fmt.Errorf("unexpected CustomerDocumentRequiredMethod value: %v", v)
	}

	*i = v

	return nil
}

// StatementRowRowType is an enum type.
type StatementRowRowType string

// StatementRowRowType values enumeration.
const (
	StatementRowRowTypeFunding = StatementRowRowType("funding")
	StatementRowRowTypeFee = StatementRowRowType("fee")
	StatementRowRowTypeDiscretionaryAdjustment = StatementRowRowType("discretionary_adjustment")
	StatementRowRowTypeRepayment = StatementRowRowType("repayment")
	StatementRowRowTypeRebate = StatementRowRowType("rebate")
	StatementRowRowTypeReimbursement = StatementRowRowType("reimbursement")
	StatementRowRowTypeWritedown = StatementRowRowType("writedown")
	StatementRowRowTypeOpeningBalance = StatementRowRowType("opening_balance")
	StatementRowRowTypeClosingBalance = StatementRowRowType("closing_balance")
	StatementRowRowTypeOther = StatementRowRowType("other")
)

// MarshalJSON encodes JSON.
func (i StatementRowRowType) MarshalJSON() ([]byte, error) {
	switch i {
	case StatementRowRowTypeFunding:
	case StatementRowRowTypeFee:
	case StatementRowRowTypeDiscretionaryAdjustment:
	case StatementRowRowTypeRepayment:
	case StatementRowRowTypeRebate:
	case StatementRowRowTypeReimbursement:
	case StatementRowRowTypeWritedown:
	case StatementRowRowTypeOpeningBalance:
	case StatementRowRowTypeClosingBalance:
	case StatementRowRowTypeOther:

	default:
		return nil, fmt.Errorf("unexpected StatementRowRowType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatementRowRowType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatementRowRowType(ii)

	switch v {
	case StatementRowRowTypeFunding:
	case StatementRowRowTypeFee:
	case StatementRowRowTypeDiscretionaryAdjustment:
	case StatementRowRowTypeRepayment:
	case StatementRowRowTypeRebate:
	case StatementRowRowTypeReimbursement:
	case StatementRowRowTypeWritedown:
	case StatementRowRowTypeOpeningBalance:
	case StatementRowRowTypeClosingBalance:
	case StatementRowRowTypeOther:

	default:
		return fmt.Errorf("unexpected StatementRowRowType value: %v", v)
	}

	*i = v

	return nil
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus is an enum type.
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus string

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus values enumeration.
const (
	PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusInitiated = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus("initiated")
	PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusSuccess = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus("success")
	PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusFailure = PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus("failure")
)

// MarshalJSON encodes JSON.
func (i PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusInitiated:
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusSuccess:
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusFailure:

	default:
		return nil, fmt.Errorf("unexpected PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus(ii)

	switch v {
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusInitiated:
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusSuccess:
	case PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatusFailure:

	default:
		return fmt.Errorf("unexpected PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreatedDataStatus value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
