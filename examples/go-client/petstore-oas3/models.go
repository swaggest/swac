// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package petstore

import (
	"bytes"
	"encoding/json"
	"errors"
)

// ComponentsSchemasNewPet structure is generated from "#/components/schemas/NewPet".
type ComponentsSchemasNewPet struct {
	Name                 string                 `json:"name"`          // Required.
	Tag                  string                 `json:"tag,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`             // All unmatched properties.
}

type marshalComponentsSchemasNewPet ComponentsSchemasNewPet

var knownKeysComponentsSchemasNewPet = []string{
	"name",
	"tag",
}

var requireKeysComponentsSchemasNewPet = []string{
	"name",
}

// UnmarshalJSON decodes JSON.
func (c *ComponentsSchemasNewPet) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalComponentsSchemasNewPet(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysComponentsSchemasNewPet {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysComponentsSchemasNewPet {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ComponentsSchemasNewPet(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ComponentsSchemasNewPet) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalComponentsSchemasNewPet(c))
	}

	return marshalUnion(marshalComponentsSchemasNewPet(c), c.AdditionalProperties)
}

// ComponentsSchemasPetAllOf1 structure is generated from "#/components/schemas/Pet/allOf/1".
type ComponentsSchemasPetAllOf1 struct {
	// Format: int64.
	// Required.
	ID                   int64                  `json:"id"`
	AdditionalProperties map[string]interface{} `json:"-"`  // All unmatched properties.
}

type marshalComponentsSchemasPetAllOf1 ComponentsSchemasPetAllOf1

var knownKeysComponentsSchemasPetAllOf1 = []string{
	"id",
}

var requireKeysComponentsSchemasPetAllOf1 = []string{
	"id",
}

// UnmarshalJSON decodes JSON.
func (c *ComponentsSchemasPetAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalComponentsSchemasPetAllOf1(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysComponentsSchemasPetAllOf1 {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysComponentsSchemasPetAllOf1 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ComponentsSchemasPetAllOf1(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ComponentsSchemasPetAllOf1) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalComponentsSchemasPetAllOf1(c))
	}

	return marshalUnion(marshalComponentsSchemasPetAllOf1(c), c.AdditionalProperties)
}

// ComponentsSchemasPet structure is generated from "#/components/schemas/Pet".
type ComponentsSchemasPet struct {
	ComponentsSchemasNewPet *ComponentsSchemasNewPet    `json:"-"`
	AllOf1                  *ComponentsSchemasPetAllOf1 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (c *ComponentsSchemasPet) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &c.ComponentsSchemasNewPet)
	if err != nil {
		return err
	}

	err = json.Unmarshal(data, &c.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (c ComponentsSchemasPet) MarshalJSON() ([]byte, error) {
	return marshalUnion(c.ComponentsSchemasNewPet, c.AllOf1)
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := make([]byte, 1, 100)
	result[0] = '{'
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
