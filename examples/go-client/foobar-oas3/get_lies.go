// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package foobar

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// GetLiesRequest is operation request value.
type GetLiesRequest struct {
	Mille             string    // Mille is a required `mille` parameter in query.
	Exclude           *string   // Exclude is an optional `exclude` parameter in query.
	Locale            *string   // Locale is an optional `locale` parameter in query.
	Potato            *string   // Potato is an optional `potato` parameter in query.
	Hole              *int64    // Hole is an optional `hole` parameter in query.
	PotatoSku         *string   // PotatoSku is an optional `potato-sku` parameter in query.
	Soup              *string   // Soup is an optional `soup` parameter in query.
	Look              *string   // Look is an optional `look` parameter in query.
	Looks             []string  // Looks is an optional `looks` parameter in query.
	IsActive          *bool     // IsActive is an optional `is-active` parameter in query.
	PotatoSkuQuery    *string   // PotatoSkuQuery is an optional `potatoSku` parameter in query.
	WithCompleteSoups *bool     // WithCompleteSoups is an optional `with-complete-soups` parameter in query.
	Sort              *string   // Sort is an optional `sort` parameter in query.
	Take              *int64    // Take is an optional `take` parameter in query.
	Skip              *int64    // Skip is an optional `skip` parameter in query.
}

// encode creates *http.Request for request data.
func (request *GetLiesRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/lies"

	query := make(url.Values, 15)
	query.Set("mille", request.Mille)

	if request.Exclude != nil {
		query.Set("exclude", *request.Exclude)
	}

	if request.Locale != nil {
		query.Set("locale", *request.Locale)
	}

	if request.Potato != nil {
		query.Set("potato", *request.Potato)
	}

	if request.Hole != nil {
		query.Set("hole", strconv.FormatInt(*request.Hole, 10))
	}

	if request.PotatoSku != nil {
		query.Set("potato-sku", *request.PotatoSku)
	}

	if request.Soup != nil {
		query.Set("soup", *request.Soup)
	}

	if request.Look != nil {
		query.Set("look", *request.Look)
	}

	if request.Looks != nil {
		query.Set("looks", strings.Join(request.Looks, ","))
	}

	if request.IsActive != nil {
		query.Set("is-active", strconv.FormatBool(*request.IsActive))
	}

	if request.PotatoSkuQuery != nil {
		query.Set("potatoSku", *request.PotatoSkuQuery)
	}

	if request.WithCompleteSoups != nil {
		query.Set("with-complete-soups", strconv.FormatBool(*request.WithCompleteSoups))
	}

	if request.Sort != nil {
		query.Set("sort", *request.Sort)
	}

	if request.Take != nil {
		query.Set("take", strconv.FormatInt(*request.Take, 10))
	}

	if request.Skip != nil {
		query.Set("skip", strconv.FormatInt(*request.Skip, 10))
	}

	if len(query) > 0 {
		requestURI += "?" + query.Encode()
	}

	req, err := http.NewRequest(http.MethodGet, requestURI, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Accept", "application/json")

	req = req.WithContext(ctx)

	return req, err
}

// GetLiesResponse is operation response value.
type GetLiesResponse struct {
	StatusCode               int
	RawBody                  []byte            // RawBody contains read bytes of response body.
	ValueOK                  *LiesPage         // ValueOK is a value of 200 OK response.
	ValueBadRequest          *RestErrResponse  // ValueBadRequest is a value of 400 Bad Request response.
	ValueNotFound            *RestErrResponse  // ValueNotFound is a value of 404 Not Found response.
	ValueInternalServerError *RestErrResponse  // ValueInternalServerError is a value of 500 Internal Server Error response.
}

// decode loads data from *http.Response.
func (result *GetLiesResponse) decode(resp *http.Response) error {
	var err error

	dump := bytes.NewBuffer(nil)
	body := io.TeeReader(resp.Body, dump)

	result.StatusCode = resp.StatusCode

	switch resp.StatusCode {
	case http.StatusOK:
		err = json.NewDecoder(body).Decode(&result.ValueOK)
	case http.StatusBadRequest:
		err = json.NewDecoder(body).Decode(&result.ValueBadRequest)
	case http.StatusNotFound:
		err = json.NewDecoder(body).Decode(&result.ValueNotFound)
	case http.StatusInternalServerError:
		err = json.NewDecoder(body).Decode(&result.ValueInternalServerError)
	default:
		_, readErr := ioutil.ReadAll(body)
		if readErr != nil {
			err = errors.New("unexpected response status: " + resp.Status +
				", could not read response body: " + readErr.Error())
		} else {
			err = errors.New("unexpected response status: " + resp.Status)
		}
	}

	result.RawBody = dump.Bytes()

	if err != nil {
		return responseError{
			resp: resp,
			body: dump.Bytes(),
			err:  err,
		}
	}

	return nil
}

// GetLies performs REST operation.
func (c *Client) GetLies(ctx context.Context, request GetLiesRequest) (result GetLiesResponse, err error) {
	if c.InstrumentCtxFunc != nil {
		ctx = c.InstrumentCtxFunc(ctx, http.MethodGet, "/lies", &request)
	}

	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)

		defer cancel()
	}

	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}

	transport := c.transport
	if c.securityJWTTransport != nil {
		transport = c.securityJWTTransport
	}

	resp, err := transport.RoundTrip(req)
	if err != nil {
		return result, err
	}

	defer func() {
		closeErr := resp.Body.Close()
		if closeErr != nil && err == nil {
			err = closeErr
		}
	}()

	err = result.decode(resp)

	return result, err
}
