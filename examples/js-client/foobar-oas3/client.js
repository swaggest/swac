// Code is generated by github.com/swaggest/swac <version>, do not edit. ðŸ¤–

/**
 * @constructor
 * @param {string} baseURL - Base URL.
 */
function FooClient(baseURL) {
    // Trim trailing backslash.
    this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
}

/**
 * @param {DeletePlacesRequest} req
 * @param {cbEmpty} onNoContent
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.deletePlaces = function (req, onNoContent, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/places?';
    if (req.id != null) {
        url += 'id=' + encodeURIComponent(req.id) + '&'
    }
    url = url.slice(0, -1)

    x.open("DELETE", url, true);
    
    
    x.send();
}

/**
 * @param {GetPlacesRequest} req
 * @param {cbPlaceEntity} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.getPlaces = function (req, onOK, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/places?';
    if (req.mille != null) {
        url += 'mille=' + encodeURIComponent(req.mille) + '&'
    }
    if (req.foxUuid != null) {
        url += 'foxUuid=' + encodeURIComponent(req.foxUuid) + '&'
    }
    if (req.foxId != null) {
        url += 'foxId=' + encodeURIComponent(req.foxId) + '&'
    }
    if (req.look != null) {
        url += 'look=' + encodeURIComponent(req.look) + '&'
    }
    if (req.potatoFamily != null) {
        url += 'potatoFamily=' + encodeURIComponent(req.potatoFamily) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {PostPlacesRequest} req
 * @param {cbPlaceEntity} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onConflict
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.postPlaces = function (req, onOK, onBadRequest, onConflict, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 409:
                if (typeof(onConflict) == 'function') {
                    onConflict(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/places?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {DeleteFoosRequest} req
 * @param {cbEmpty} onNoContent
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.deleteFoos = function (req, onNoContent, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/foos?';
    if (req.id != null) {
        url += 'id=' + encodeURIComponent(req.id) + '&'
    }
    url = url.slice(0, -1)

    x.open("DELETE", url, true);
    
    
    x.send();
}

/**
 * @param {GetFoosRequest} req
 * @param {cbArrayUsecaseFooInfo} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.getFoos = function (req, onOK, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/foos?';
    if (req.look != null) {
        url += 'look=' + encodeURIComponent(req.look) + '&'
    }
    if (req.potatoFamily != null) {
        url += 'potatoFamily=' + encodeURIComponent(req.potatoFamily) + '&'
    }
    if (req.mille != null) {
        url += 'mille=' + encodeURIComponent(req.mille) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {PostFoosRequest} req
 * @param {cbFooEntity} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onConflict
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.postFoos = function (req, onOK, onBadRequest, onConflict, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 409:
                if (typeof(onConflict) == 'function') {
                    onConflict(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/foos?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {PutFoosRequest} req
 * @param {cbEmpty} onNoContent
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onConflict
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.putFoos = function (req, onNoContent, onBadRequest, onNotFound, onConflict, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 409:
                if (typeof(onConflict) == 'function') {
                    onConflict(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/foos?';
    if (req.id != null) {
        url += 'id=' + encodeURIComponent(req.id) + '&'
    }
    url = url.slice(0, -1)

    x.open("PUT", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {PostInternalFindAvailableCarrotsMilleLookRequest} req
 * @param {cbUsecaseFindAvailableCarrotsOutput} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.postInternalFindAvailableCarrotsMilleLook = function (req, onOK, onBadRequest, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/internal/find-available-carrots/' + encodeURIComponent(req.mille) +
    '/' + encodeURIComponent(req.look) +
    '?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {GetLieAreasRequest} req
 * @param {cbArrayString} onOK
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.getLieAreas = function (req, onOK, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/lie-areas?';
    if (req.mille != null) {
        url += 'mille=' + encodeURIComponent(req.mille) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {PostLieAreasRequest} req
 * @param {cbLieAreaEntity} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onConflict
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.postLieAreas = function (req, onOK, onBadRequest, onConflict, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 409:
                if (typeof(onConflict) == 'function') {
                    onConflict(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/lie-areas?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {PutLieAreasMilleLieAreaSyncRequest} req
 * @param {cbEmpty} onNoContent
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.putLieAreasMilleLieAreaSync = function (req, onNoContent, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/lie-areas/' + encodeURIComponent(req.mille) +
    '/' + encodeURIComponent(req.lieArea) +
    '/sync?';
    if (req.look != null) {
        url += 'look=' + encodeURIComponent(req.look) + '&'
    }
    url = url.slice(0, -1)

    x.open("PUT", url, true);
    
    
    x.send();
}

/**
 * @param {GetLiesRequest} req
 * @param {cbLiesPage} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.getLies = function (req, onOK, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/lies?';
    if (req.mille != null) {
        url += 'mille=' + encodeURIComponent(req.mille) + '&'
    }
    if (req.exclude != null) {
        url += 'exclude=' + encodeURIComponent(req.exclude) + '&'
    }
    if (req.locale != null) {
        url += 'locale=' + encodeURIComponent(req.locale) + '&'
    }
    if (req.potato != null) {
        url += 'potato=' + encodeURIComponent(req.potato) + '&'
    }
    if (req.hole != null) {
        url += 'hole=' + encodeURIComponent(req.hole) + '&'
    }
    if (req.potatoSku != null) {
        url += 'potatoSku=' + encodeURIComponent(req.potatoSku) + '&'
    }
    if (req.soup != null) {
        url += 'soup=' + encodeURIComponent(req.soup) + '&'
    }
    if (req.look != null) {
        url += 'look=' + encodeURIComponent(req.look) + '&'
    }
    if (req.looks != null) {
        url += 'looks=' + encodeURIComponent(req.looks) + '&'
    }
    if (req.isActive != null) {
        url += 'isActive=' + encodeURIComponent(req.isActive) + '&'
    }
    if (req.potatoSkuQuery != null) {
        url += 'potatoSkuQuery=' + encodeURIComponent(req.potatoSkuQuery) + '&'
    }
    if (req.withCompleteSoups != null) {
        url += 'withCompleteSoups=' + encodeURIComponent(req.withCompleteSoups) + '&'
    }
    if (req.sort != null) {
        url += 'sort=' + encodeURIComponent(req.sort) + '&'
    }
    if (req.take != null) {
        url += 'take=' + encodeURIComponent(req.take) + '&'
    }
    if (req.skip != null) {
        url += 'skip=' + encodeURIComponent(req.skip) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {GetLiesIdRequest} req
 * @param {cbLiesLie} onOK
 * @param {cbRestErrResponse} onBadRequest
 * @param {cbRestErrResponse} onNotFound
 * @param {cbRestErrResponse} onInternalServerError
 */
FooClient.prototype.getLiesId = function (req, onOK, onBadRequest, onNotFound, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 400:
                if (typeof(onBadRequest) == 'function') {
                    onBadRequest(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/lies/' + encodeURIComponent(req.id) +
    '?';
    if (req.locale != null) {
        url += 'locale=' + encodeURIComponent(req.locale) + '&'
    }
    if (req.hole != null) {
        url += 'hole=' + encodeURIComponent(req.hole) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

