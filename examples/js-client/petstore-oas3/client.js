// Code is generated by github.com/swaggest/swac <version>, do not edit. ðŸ¤–

/**
 * @constructor
 * @param {string} baseURL - Base URL.
 */
function FooClient(baseURL) {
    // Trim trailing backslash.
    this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
}

/**
 * @param {FindPetsRequest} req
 * @param {cbArrayNewPetPetAllOf1} onOK
 */
FooClient.prototype.findPets = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/pets?';
    if (req.tags != null) {
        url += 'tags=' + encodeURIComponent(req.tags) + '&'
    }
    if (req.limit != null) {
        url += 'limit=' + encodeURIComponent(req.limit) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {PostPetsRequest} req
 * @param {cbNewPetPetAllOf1} onOK
 */
FooClient.prototype.postPets = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/pets?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {GetPetsIdRequest} req
 * @param {cbNewPetPetAllOf1} onOK
 */
FooClient.prototype.getPetsId = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/pets/' + encodeURIComponent(req.id) +
    '?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    
    x.send();
}

/**
 * @param {DeletePetsIdRequest} req
 * @param {cbEmpty} onNoContent
 */
FooClient.prototype.deletePetsId = function (req, onNoContent) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/pets/' + encodeURIComponent(req.id) +
    '?';
    url = url.slice(0, -1)

    x.open("DELETE", url, true);
    
    
    x.send();
}

