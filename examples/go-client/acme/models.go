// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package acme

import (
	"bytes"
	"encoding/json"
	"errors"
)

// Foo structure is generated from "#/definitions/Foo".
//
// Foo.
type Foo struct {
	// Foo Code.
	// Value must match pattern: `^[A-Z0-9]{2,3}$`.
	// Required.
	Code                 string                 `json:"code"`
	AdditionalProperties map[string]interface{} `json:"-"`    // All unmatched properties.
}

type marshalFoo Foo

var knownKeysFoo = []string{
	"code",
}

// UnmarshalJSON decodes JSON.
func (f *Foo) UnmarshalJSON(data []byte) error {
	var err error

	mf := marshalFoo(*f)

	err = json.Unmarshal(data, &mf)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysFoo {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mf.AdditionalProperties == nil {
			mf.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mf.AdditionalProperties[key] = val
	}

	*f = Foo(mf)

	return nil
}

// MarshalJSON encodes JSON.
func (f Foo) MarshalJSON() ([]byte, error) {
	if len(f.AdditionalProperties) == 0 {
		return json.Marshal(marshalFoo(f))
	}

	return marshalUnion(marshalFoo(f), f.AdditionalProperties)
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
