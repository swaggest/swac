// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package foobar

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
)

// GetPlacesRequest is operation request value.
type GetPlacesRequest struct {
	// Mille is a required `mille` parameter in query.
	// Acme Mille
	Mille        string
	FoxUuid      *string  // FoxUuid is an optional `foxUuid` parameter in query.
	FoxID        *int64   // FoxID is an optional `foxId` parameter in query.
	// Look is a required `look` parameter in query.
	// Acme Look
	Look         string
	PotatoFamily string   // PotatoFamily is a required `potatoFamily` parameter in query.
}

// encode creates *http.Request for request data.
func (request *GetPlacesRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/places"

	query := make(url.Values, 5)
	query.Set("mille", request.Mille)

	if request.FoxUuid != nil {
		query.Set("foxUuid", *request.FoxUuid)
	}

	if request.FoxID != nil {
		query.Set("foxId", strconv.FormatInt(*request.FoxID, 10))
	}

	query.Set("look", request.Look)

	query.Set("potatoFamily", request.PotatoFamily)

	if len(query) > 0 {
		requestURI += "?" + query.Encode()
	}

	req, err := http.NewRequest(http.MethodGet, requestURI, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Accept", "application/json")

	req = req.WithContext(ctx)

	return req, err
}

// GetPlacesResponse is operation response value.
type GetPlacesResponse struct {
	StatusCode               int
	RawBody                  []byte            // RawBody contains read bytes of response body.
	ValueOK                  *PlaceEntity      // ValueOK is a value of 200 OK response.
	ValueBadRequest          *RestErrResponse  // ValueBadRequest is a value of 400 Bad Request response.
	ValueNotFound            *RestErrResponse  // ValueNotFound is a value of 404 Not Found response.
	ValueInternalServerError *RestErrResponse  // ValueInternalServerError is a value of 500 Internal Server Error response.
}

// decode loads data from *http.Response.
func (result *GetPlacesResponse) decode(resp *http.Response) error {
	var err error

	dump := bytes.NewBuffer(nil)
	body := io.TeeReader(resp.Body, dump)

	result.StatusCode = resp.StatusCode

	switch resp.StatusCode {
	case http.StatusOK:
		err = json.NewDecoder(body).Decode(&result.ValueOK)
		if err != nil {
			err = fmt.Errorf("failed to decode 'get /places' OK response: %w", err)
		}
	case http.StatusBadRequest:
		err = json.NewDecoder(body).Decode(&result.ValueBadRequest)
		if err != nil {
			err = fmt.Errorf("failed to decode 'get /places' BadRequest response: %w", err)
		}
	case http.StatusNotFound:
		err = json.NewDecoder(body).Decode(&result.ValueNotFound)
		if err != nil {
			err = fmt.Errorf("failed to decode 'get /places' NotFound response: %w", err)
		}
	case http.StatusInternalServerError:
		err = json.NewDecoder(body).Decode(&result.ValueInternalServerError)
		if err != nil {
			err = fmt.Errorf("failed to decode 'get /places' InternalServerError response: %w", err)
		}
	default:
		_, readErr := ioutil.ReadAll(body)
		if readErr != nil {
			err = errors.New("unexpected response status: " + resp.Status +
				", could not read response body: " + readErr.Error())
		} else {
			err = errors.New("unexpected response status: " + resp.Status)
		}
	}

	result.RawBody = dump.Bytes()

	if err != nil {
		return responseError{
			resp: resp,
			body: dump.Bytes(),
			err:  err,
		}
	}

	return nil
}

// GetPlaces performs REST operation.
func (c *Client) GetPlaces(ctx context.Context, request GetPlacesRequest) (result GetPlacesResponse, err error) {
	if c.InstrumentCtxFunc != nil {
		ctx = c.InstrumentCtxFunc(ctx, http.MethodGet, "/places", &request)
	}

	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)

		defer cancel()
	}

	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}

	resp, err := c.transport.RoundTrip(req)

	if err != nil {
		return result, err
	}

	defer func() {
		closeErr := resp.Body.Close()
		if closeErr != nil && err == nil {
			err = closeErr
		}
	}()

	err = result.decode(resp)

	return result, err
}
