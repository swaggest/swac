/* tslint:disable */
/* eslint-disable */
// Code is generated by github.com/swaggest/swac <version>, DO NOT EDIT. ðŸ¤–

/**
 * Advanced Example
 * Version: v1.2.3
 * This app showcases a variety of features.
 * @constructor
 * @param {string} baseURL - Base URL.
 * @property {PrepareRequest} prepareRequest - Callback to prepare request before sending.
 */
function APIClient(baseURL) {
    // Trim trailing backslash.
    this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
}

/**
 * @callback PrepareRequest
 * @param {XMLHttpRequest} value
 */

/**
 * direct Gzip
 * @param {ExamplesAdvancedDirectGzipRequest} req - request parameters.
 * @param {AdvancedGzipPassThroughStructCallback} onOK
 */
APIClient.prototype.examplesAdvancedDirectGzip = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/gzip-pass-through?';
    if (req.plainStruct != null) {
        url += 'plainStruct=' + encodeURIComponent(req.plainStruct) + '&'
    }
    if (req.countItems != null) {
        url += 'countItems=' + encodeURIComponent(req.countItems) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * direct Gzip
 * @param {HeadGzipPassThroughRequest} req - request parameters.
 * @param {RawCallback} onOK
 */
APIClient.prototype.headGzipPassThrough = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(x);
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/gzip-pass-through?';
    if (req.plainStruct != null) {
        url += 'plainStruct=' + encodeURIComponent(req.plainStruct) + '&'
    }
    if (req.countItems != null) {
        url += 'countItems=' + encodeURIComponent(req.countItems) + '&'
    }
    url = url.slice(0, -1)

    x.open("HEAD", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * Request With JSON Body and non-trivial validation
 * Request with JSON body and query/header/path params, response with JSON
 * body and data from request.
 * @param {PostJsonBodyValidationInPathRequest} req - request parameters.
 * @param {AdvancedOutputWithJSONType3Callback} onOK
 */
APIClient.prototype.postJsonBodyValidationInPath = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/json-body-validation/' + encodeURIComponent(req.inPath) +
    '?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * Request With JSON Body
 * Request with JSON body and query/header/path params, response with JSON
 * body and data from request.
 * @param {PostJsonBodyInPathRequest} req - request parameters.
 * @param {AdvancedOutputWithJSONType2Callback} onCreated
 */
APIClient.prototype.postJsonBodyInPath = function (req, onCreated) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 201:
                if (typeof(onCreated) == 'function') {
                    onCreated(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/json-body/' + encodeURIComponent(req.inPath) +
    '?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * Request With JSON Map In Body
 * Request with JSON object (map) body.
 * @param {PostJsonMapBodyRequest} req - request parameters.
 * @param {AdvancedJsonOutputType2Callback} onOK
 */
APIClient.prototype.postJsonMapBody = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/json-map-body?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * Request With JSON Query Parameter
 * Request with JSON body and query/header/path params, response with JSON
 * body and data from request.
 * @param {GetJsonParamInPathRequest} req - request parameters.
 * @param {AdvancedOutputWithJSONCallback} onOK
 */
APIClient.prototype.getJsonParamInPath = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/json-param/' + encodeURIComponent(req.inPath) +
    '?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    if (req.identity != null) {
        url += 'identity=' + encodeURIComponent(JSON.stringify(req.identity)) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }

    x.send();
}

/**
 * Request With JSON Array In Body
 * @param {PostJsonSliceBodyRequest} req - request parameters.
 * @param {AdvancedJsonOutputCallback} onOK
 */
APIClient.prototype.postJsonSliceBody = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/json-slice-body?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * Output With Stream Writer
 * Output with stream writer.
 * @param {object} req - request parameters.
 * @param {RawCallback} onOK
 * @param {RestErrResponseCallback} onInternalServerError
 */
APIClient.prototype.getOutputCsvWriter = function (req, onOK, onInternalServerError) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(x);
                }
                break;
            case 500:
                if (typeof(onInternalServerError) == 'function') {
                    onInternalServerError(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/output-csv-writer?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * Output With Headers
 * Output with headers.
 * @param {object} req - request parameters.
 * @param {AdvancedHeaderOutputCallback} onOK
 */
APIClient.prototype.getOutputHeaders = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/output-headers?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * Output With Headers
 * Output with headers.
 * @param {object} req - request parameters.
 * @param {RawCallback} onOK
 */
APIClient.prototype.headOutputHeaders = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(x);
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/output-headers?';
    url = url.slice(0, -1)

    x.open("HEAD", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * Request With Object As Query Parameter
 * @param {GetQueryObjectRequest} req - request parameters.
 * @param {AdvancedOutputQueryObjectCallback} onOK
 */
APIClient.prototype.getQueryObject = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/query-object?';
    if (req.inQuery != null) {
        url += 'in_query=' + encodeURIComponent(req.inQuery) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    
    x.send();
}

/**
 * Request Response Mapping
 * This use case has transport concerns fully decoupled with external req/resp
 * mapping.
 * @param {PostReqRespMappingRequest} req - request parameters.
 * @param {RawCallback} onNoContent
 */
APIClient.prototype.postReqRespMapping = function (req, onNoContent) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 204:
                if (typeof(onNoContent) == 'function') {
                    onNoContent(x);
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/req-resp-mapping?';
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xHeader !== 'undefined') {
        x.setRequestHeader('X-Header', req.xHeader);
    }
    var formData = ''
    if (typeof req.val2 !== 'undefined') {
        formData += 'val2=' + encodeURIComponent(req.val2) + '&'
    }

    if (formData !== '') {
        x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        x.send(formData.slice(0, -1))
        return  
    }

    x.send();
}

/**
 * Validation
 * Input/Output with validation. Custom annotation.
 * @param {PostValidationRequest} req - request parameters.
 * @param {AdvancedOutputPortType2Callback} onOK
 */
APIClient.prototype.postValidation = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/validation?';
    if (req.q != null) {
        url += 'q=' + encodeURIComponent(req.q) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof(this.prepareRequest) == 'function') {
        this.prepareRequest(x);
    }
    if (typeof req.xInput !== 'undefined') {
        x.setRequestHeader('X-Input', req.xInput);
    }
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

