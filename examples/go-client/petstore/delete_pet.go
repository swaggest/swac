// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package petstore

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// DeletePetRequest is operation request value.
type DeletePetRequest struct {
	// ID is a required `id` parameter in path.
	// ID of pet to delete
	ID int64
}

// encode creates *http.Request for request data.
func (request *DeletePetRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/pets/" + url.PathEscape(strconv.FormatInt(request.ID, 10))

	req, err := http.NewRequest(http.MethodDelete, requestURI, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")

	req = req.WithContext(ctx)

	return req, err
}

// DeletePetResponse is operation response value.
type DeletePetResponse struct {
	StatusCode int
	Default    *Error  // Default is a default value of response.
}

// decode loads data from *http.Response.
func (result *DeletePetResponse) decode(resp *http.Response) error {
	var err error

	dump := bytes.NewBuffer(nil)
	body := io.TeeReader(resp.Body, dump)

	result.StatusCode = resp.StatusCode

	switch resp.StatusCode {
	case http.StatusNoContent:
		// No body to decode.
	default:
		err = json.NewDecoder(body).Decode(&result.Default)
	}

	if err != nil {
		return responseError{
			resp: resp,
			body: dump.Bytes(),
			err:  err,
		}
	}

	return nil
}

// DeletePet performs REST operation.
func (c *Client) DeletePet(ctx context.Context, request DeletePetRequest) (result DeletePetResponse, err error) {
	if c.InstrumentCtxFunc != nil {
		ctx = c.InstrumentCtxFunc(ctx, http.MethodDelete, "/pets/{id}", &request)
	}

	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)

		defer cancel()
	}

	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}

	resp, err := c.transport.RoundTrip(req)

	if err != nil {
		return result, err
	}

	defer func() {
		closeErr := resp.Body.Close()
		if closeErr != nil && err == nil {
			err = closeErr
		}
	}()

	err = result.decode(resp)

	return result, err
}
