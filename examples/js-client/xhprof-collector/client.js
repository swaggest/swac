// Code is generated by github.com/swaggest/swac <version>, do not edit. ðŸ¤–

/**
 * @constructor
 * @param {string} baseURL - Base URL.
 */
function APIClient(baseURL) {
    // Trim trailing backslash.
    this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
}

/**
 * @param {object} req
 * @param {XhUsecaseProfilesCallback} onOK
 */
APIClient.prototype.getProfile = function (req, onOK) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/profile?';
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    x.send();
}

/**
 * @param {XhPostProfileRequest} req
 * @param {RawCallback} onAccepted
 */
APIClient.prototype.postProfile = function (req, onAccepted) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 202:
                if (typeof(onAccepted) == 'function') {
                    onAccepted(x);
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/profile?';
    if (req.probability != null) {
        url += 'probability=' + encodeURIComponent(req.probability) + '&'
    }
    if (req.tz != null) {
        url += 'tz=' + encodeURIComponent(req.tz) + '&'
    }
    url = url.slice(0, -1)

    x.open("POST", url, true);
    if (typeof req.body !== 'undefined') {
        x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        x.send(JSON.stringify(req.body))
        return
    }

    x.send();
}

/**
 * @param {XhGetProfileDotRequest} req
 * @param {RawCallback} onOK
 * @param {XhRestErrResponseCallback} onNotFound
 */
APIClient.prototype.getProfileDot = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(x);
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/profile.dot?';
    if (req.rootSymbol != null) {
        url += 'rootSymbol=' + encodeURIComponent(req.rootSymbol) + '&'
    }
    if (req.graphLimit != null) {
        url += 'graphLimit=' + encodeURIComponent(req.graphLimit) + '&'
    }
    if (req.graphPriority != null) {
        url += 'graphPriority=' + encodeURIComponent(req.graphPriority) + '&'
    }
    if (req.aggregate != null) {
        url += 'aggregate=' + encodeURIComponent(JSON.stringify(req.aggregate)) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    x.send();
}

/**
 * @param {XhGetProfileFindSymbolRequest} req
 * @param {XhUsecaseSearchOutputCallback} onOK
 * @param {XhRestErrResponseCallback} onNotFound
 */
APIClient.prototype.getProfileFindSymbol = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/profile/find-symbol?';
    if (req.aggregate != null) {
        url += 'aggregate=' + encodeURIComponent(JSON.stringify(req.aggregate)) + '&'
    }
    if (req.match != null) {
        url += 'match=' + encodeURIComponent(req.match) + '&'
    }
    if (req.limit != null) {
        url += 'limit=' + encodeURIComponent(req.limit) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    x.send();
}

/**
 * @param {XhGetProfileSymbolRequest} req
 * @param {XhUsecaseSymbolStatOutputCallback} onOK
 * @param {XhRestErrResponseCallback} onNotFound
 */
APIClient.prototype.getProfileSymbol = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/profile/symbol?';
    if (req.aggregate != null) {
        url += 'aggregate=' + encodeURIComponent(JSON.stringify(req.aggregate)) + '&'
    }
    if (req.symbol != null) {
        url += 'symbol=' + encodeURIComponent(req.symbol) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    x.send();
}

/**
 * @param {XhGetTopTracesRequest} req
 * @param {ArrayXhUsecaseTraceInfoCallback} onOK
 * @param {XhRestErrResponseCallback} onNotFound
 */
APIClient.prototype.getTopTraces = function (req, onOK, onNotFound) {
    var x = new XMLHttpRequest();
    x.onreadystatechange = function () {
        if (x.readyState !== XMLHttpRequest.DONE) {
            return
        }
    
        switch (x.status) {
            case 200:
                if (typeof(onOK) == 'function') {
                    onOK(JSON.parse(x.responseText));
                }
                break;
            case 404:
                if (typeof(onNotFound) == 'function') {
                    onNotFound(JSON.parse(x.responseText));
                }
                break;
            default:
                throw {err: 'unexpected response', data: x}
        }
    };
    
    var url = this.baseURL + '/top-traces?';
    if (req.rootSymbol != null) {
        url += 'rootSymbol=' + encodeURIComponent(req.rootSymbol) + '&'
    }
    if (req.aggregate != null) {
        url += 'aggregate=' + encodeURIComponent(JSON.stringify(req.aggregate)) + '&'
    }
    if (req.resource != null) {
        url += 'resource=' + encodeURIComponent(req.resource) + '&'
    }
    if (req.limit != null) {
        url += 'limit=' + encodeURIComponent(req.limit) + '&'
    }
    url = url.slice(0, -1)

    x.open("GET", url, true);
    
    x.send();
}

