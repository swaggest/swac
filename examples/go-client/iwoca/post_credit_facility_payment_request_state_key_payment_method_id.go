// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package acme

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
)

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequest is operation request value.
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequest struct {
	Body            *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequestBody  // Body is a JSON request body.
	StateKey        string                                                               // StateKey is a required `state_key` parameter in path.
	PaymentMethodID string                                                               // PaymentMethodID is a required `payment_method_id` parameter in path.
}

// encode creates *http.Request for request data.
func (request *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/credit_facility_payment_request/" + url.PathEscape(request.StateKey) + "/" + url.PathEscape(request.PaymentMethodID) + "/"

	body, err := json.Marshal(request.Body)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, requestURI, bytes.NewBuffer(body))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")

	req = req.WithContext(ctx)

	return req, err
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponse is operation response value.
type PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponse struct {
	StatusCode   int
	RawBody      []byte                                                                        // RawBody contains read bytes of response body.
	ValueCreated *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponseValueCreated  // ValueCreated is a value of 201 Created response.
}

// decode loads data from *http.Response.
func (result *PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponse) decode(resp *http.Response) error {
	var err error

	dump := bytes.NewBuffer(nil)
	body := io.TeeReader(resp.Body, dump)

	result.StatusCode = resp.StatusCode

	switch resp.StatusCode {
	case http.StatusCreated:
		err = json.NewDecoder(body).Decode(&result.ValueCreated)
	default:
		_, readErr := ioutil.ReadAll(body)
		if readErr != nil {
			err = errors.New("unexpected response status: " + resp.Status +
				", could not read response body: " + readErr.Error())
		} else {
			err = errors.New("unexpected response status: " + resp.Status)
		}
	}

	result.RawBody = dump.Bytes()

	if err != nil {
		return responseError{
			resp: resp,
			body: dump.Bytes(),
			err:  err,
		}
	}

	return nil
}

// PostCreditFacilityPaymentRequestStateKeyPaymentMethodID performs REST operation.
func (c *Client) PostCreditFacilityPaymentRequestStateKeyPaymentMethodID(ctx context.Context, request PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDRequest) (result PostCreditFacilityPaymentRequestStateKeyPaymentMethodIDResponse, err error) {
	if c.InstrumentCtxFunc != nil {
		ctx = c.InstrumentCtxFunc(ctx, http.MethodPost, "/credit_facility_payment_request/{state_key}/{payment_method_id}/", &request)
	}

	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)

		defer cancel()
	}

	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}

	resp, err := c.transport.RoundTrip(req)

	if err != nil {
		return result, err
	}

	defer func() {
		closeErr := resp.Body.Close()
		if closeErr != nil && err == nil {
			err = closeErr
		}
	}()

	err = result.decode(resp)

	return result, err
}
