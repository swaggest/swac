// Code generated by github.com/swaggest/swac <version>, DO NOT EDIT.

package acme

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// GetDocumentUploadStateKeyResponseValueOK structure is generated from "GetDocumentUploadStateKey/response/ValueOK".
type GetDocumentUploadStateKeyResponseValueOK struct {
	Data                 []CustomerUploadedDocument `json:"data"` // Required.
	AdditionalProperties map[string]interface{}     `json:"-"`    // All unmatched properties.
}

type marshalGetDocumentUploadStateKeyResponseValueOK GetDocumentUploadStateKeyResponseValueOK

var knownKeysGetDocumentUploadStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetDocumentUploadStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetDocumentUploadStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetDocumentUploadStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetDocumentUploadStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetDocumentUploadStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetDocumentUploadStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetDocumentUploadStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// CustomerUploadedDocument structure is generated from "#/definitions/uploaded_document".
//
// customer_uploaded_document.
type CustomerUploadedDocument struct {
	// Unique identifier for an uploaded document.
	// Format: hash.
	DocumentID           string                               `json:"document_id,omitempty"`
	DocumentName         string                               `json:"document_name,omitempty"`
	DocumentType         CustomerUploadedDocumentDocumentType `json:"document_type,omitempty"`
	// Date the document was uploaded.
	// Format: date-time.
	UploadDate           *time.Time                           `json:"upload_date,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`                       // All unmatched properties.
}

type marshalCustomerUploadedDocument CustomerUploadedDocument

var knownKeysCustomerUploadedDocument = []string{
	"document_id",
	"document_name",
	"document_type",
	"upload_date",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerUploadedDocument) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerUploadedDocument(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerUploadedDocument {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerUploadedDocument(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerUploadedDocument) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerUploadedDocument(c))
	}

	return marshalUnion(marshalCustomerUploadedDocument(c), c.AdditionalProperties)
}

// PostDocumentUploadStateKeyResponseValueCreated structure is generated from "PostDocumentUploadStateKey/response/ValueCreated".
type PostDocumentUploadStateKeyResponseValueCreated struct {
	// Customer_uploaded_document.
	// Required.
	Data                 CustomerUploadedDocument `json:"data"`
	AdditionalProperties map[string]interface{}   `json:"-"`    // All unmatched properties.
}

type marshalPostDocumentUploadStateKeyResponseValueCreated PostDocumentUploadStateKeyResponseValueCreated

var knownKeysPostDocumentUploadStateKeyResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostDocumentUploadStateKeyResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostDocumentUploadStateKeyResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostDocumentUploadStateKeyResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostDocumentUploadStateKeyResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostDocumentUploadStateKeyResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostDocumentUploadStateKeyResponseValueCreated(p))
	}

	return marshalUnion(marshalPostDocumentUploadStateKeyResponseValueCreated(p), p.AdditionalProperties)
}

// WebhookPayload structure is generated from "#/definitions/webhook_payload".
//
// webhook_payload.
type WebhookPayload struct {
	Data                 *WebhookPayloadData    `json:"data,omitempty"` // Sent with approval_status_changed event: latest_approval_request / approval_status / approval_requirements.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalWebhookPayload WebhookPayload

var knownKeysWebhookPayload = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPayload) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPayload(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPayload {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPayload(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPayload) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPayload(w))
	}

	return marshalUnion(marshalWebhookPayload(w), w.AdditionalProperties)
}

// WebhookPayloadData structure is generated from "#/definitions/webhook_payload->data".
//
// Sent with approval_status_changed event: latest_approval_request / approval_status / approval_requirements.
type WebhookPayloadData struct {
	ApprovalRequirements  []DataRequirement           `json:"approval_requirements,omitempty"`
	// Approval_status.
	// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
	ApprovalStatus        *ApprovalStatus             `json:"approval_status,omitempty"`
	CustomerFunded        *CustomerFunded             `json:"customer_funded,omitempty"`         // Customer_funded.
	// Approval_request.
	// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
	LatestApprovalRequest *ApprovalRequest            `json:"latest_approval_request,omitempty"`
	PaymentInstructions   []WebhookPaymentInstruction `json:"payment_instructions,omitempty"`
	StateKey              string                      `json:"state_key,omitempty"`               // Format: uuid.
	AdditionalProperties  map[string]interface{}      `json:"-"`                                 // All unmatched properties.
}

type marshalWebhookPayloadData WebhookPayloadData

var knownKeysWebhookPayloadData = []string{
	"approval_requirements",
	"approval_status",
	"customer_funded",
	"latest_approval_request",
	"payment_instructions",
	"state_key",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPayloadData) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPayloadData(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPayloadData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPayloadData(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPayloadData) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPayloadData(w))
	}

	return marshalUnion(marshalWebhookPayloadData(w), w.AdditionalProperties)
}

// DataRequirement structure is generated from "#/definitions/data_requirement".
//
// data_requirement.
type DataRequirement struct {
	Comments                     []string                                `json:"comments,omitempty"`
	IsOptional                   bool                                    `json:"is_optional,omitempty"`
	RecommendedResolutionMethods []string                                `json:"recommended_resolution_methods,omitempty"`
	ResolutionMethods            []DataRequirementResolutionMethodsItems `json:"resolution_methods,omitempty"`
	Status                       DataRequirementStatus                   `json:"status"`                                   // Required.
	Type                         DataRequirementType                     `json:"type"`                                     // Required.
	AdditionalProperties         map[string]interface{}                  `json:"-"`                                        // All unmatched properties.
}

type marshalDataRequirement DataRequirement

var knownKeysDataRequirement = []string{
	"comments",
	"is_optional",
	"recommended_resolution_methods",
	"resolution_methods",
	"status",
	"type",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirement) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirement(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirement {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirement(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirement) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirement(d))
	}

	return marshalUnion(marshalDataRequirement(d), d.AdditionalProperties)
}

// DataRequirementResolutionMethodsItems structure is generated from "#/definitions/data_requirement->resolution_methods->items".
type DataRequirementResolutionMethodsItems struct {
	Description          string                                            `json:"description,omitempty"`
	Items                []DataRequirementResolutionMethodsItemsItemsItems `json:"items,omitempty"`
	Name                 string                                            `json:"name"`                  // Required.
	Status               *DataRequirementResolutionMethodsItemsStatus      `json:"status,omitempty"`
	Type                 DataRequirementResolutionMethodsItemsType         `json:"type"`                  // Required.
	AdditionalProperties map[string]interface{}                            `json:"-"`                     // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItems DataRequirementResolutionMethodsItems

var knownKeysDataRequirementResolutionMethodsItems = []string{
	"description",
	"items",
	"name",
	"status",
	"type",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItems) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItems(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItems(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItems) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItems(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItems(d), d.AdditionalProperties)
}

// DataRequirementResolutionMethodsItemsItemsItems structure is generated from "#/definitions/data_requirement->resolution_methods->items->items->items".
type DataRequirementResolutionMethodsItemsItemsItems struct {
	CreatedDatetime      *time.Time                                            `json:"created_datetime,omitempty"` // Format: date-time.
	Errors               []ErrorsItems                                         `json:"errors,omitempty"`           // Errors.
	Name                 string                                                `json:"name,omitempty"`
	Status               DataRequirementResolutionMethodsItemsItemsItemsStatus `json:"status"`                     // Required.
	AdditionalProperties map[string]interface{}                                `json:"-"`                          // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItemsItemsItems DataRequirementResolutionMethodsItemsItemsItems

var knownKeysDataRequirementResolutionMethodsItemsItemsItems = []string{
	"created_datetime",
	"errors",
	"name",
	"status",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItemsItemsItems) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItemsItemsItems(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItemsItemsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItemsItemsItems(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItemsItemsItems) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItemsItemsItems(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItemsItemsItems(d), d.AdditionalProperties)
}

// ErrorsItems structure is generated from "#/definitions/errors->items".
type ErrorsItems struct {
	Code                 string                 `json:"code"`   // Required.
	Detail               string                 `json:"detail"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalErrorsItems ErrorsItems

var knownKeysErrorsItems = []string{
	"code",
	"detail",
}

// UnmarshalJSON decodes JSON.
func (e *ErrorsItems) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalErrorsItems(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysErrorsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if me.AdditionalProperties == nil {
			me.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		me.AdditionalProperties[key] = val
	}

	*e = ErrorsItems(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ErrorsItems) MarshalJSON() ([]byte, error) {
	if len(e.AdditionalProperties) == 0 {
		return json.Marshal(marshalErrorsItems(e))
	}

	return marshalUnion(marshalErrorsItems(e), e.AdditionalProperties)
}

// DataRequirementResolutionMethodsItemsStatus structure is generated from "#/definitions/data_requirement->resolution_methods->items->status".
type DataRequirementResolutionMethodsItemsStatus struct {
	Detail               string                                          `json:"detail,omitempty"`
	Type                 DataRequirementResolutionMethodsItemsStatusType `json:"type"`             // Required.
	AdditionalProperties map[string]interface{}                          `json:"-"`                // All unmatched properties.
}

type marshalDataRequirementResolutionMethodsItemsStatus DataRequirementResolutionMethodsItemsStatus

var knownKeysDataRequirementResolutionMethodsItemsStatus = []string{
	"detail",
	"type",
}

// UnmarshalJSON decodes JSON.
func (d *DataRequirementResolutionMethodsItemsStatus) UnmarshalJSON(data []byte) error {
	var err error

	md := marshalDataRequirementResolutionMethodsItemsStatus(*d)

	err = json.Unmarshal(data, &md)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysDataRequirementResolutionMethodsItemsStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if md.AdditionalProperties == nil {
			md.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		md.AdditionalProperties[key] = val
	}

	*d = DataRequirementResolutionMethodsItemsStatus(md)

	return nil
}

// MarshalJSON encodes JSON.
func (d DataRequirementResolutionMethodsItemsStatus) MarshalJSON() ([]byte, error) {
	if len(d.AdditionalProperties) == 0 {
		return json.Marshal(marshalDataRequirementResolutionMethodsItemsStatus(d))
	}

	return marshalUnion(marshalDataRequirementResolutionMethodsItemsStatus(d), d.AdditionalProperties)
}

// ApprovalStatus structure is generated from "#/definitions/approval_status".
//
// approval_status.
//
// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
type ApprovalStatus struct {
	// Approval.
	// Information about the customer approval.
	Approved             *Approval              `json:"approved,omitempty"`
	Status               ApprovalStatusStatus   `json:"status,omitempty"`   // Note: "deferred" is a new enum option as of January 2020.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalApprovalStatus ApprovalStatus

var knownKeysApprovalStatus = []string{
	"approved",
	"status",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalStatus) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalStatus(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalStatus(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalStatus) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalStatus(a))
	}

	return marshalUnion(marshalApprovalStatus(a), a.AdditionalProperties)
}

// Approval structure is generated from "#/definitions/approval".
//
// approval.
//
// Information about the customer approval.
type Approval struct {
	Duration             int64                         `json:"duration,omitempty"`        // Requested loan duration in months. For instance, an interval of 1m and a duration of 12 would correspond to a one year loan paid back in monthly instalments. In cases where the interval is not specified as a number of months, the actual duration will be rounded up to be a whole number of intervals (taking a month as 30 days).
	Interval             string                        `json:"interval,omitempty"`        // Interval between repayments, examples: 7d / 1m. Customers are put on a one month schedule by default and this would not typically be asked during the application journey.
	MaxCredit            float64                       `json:"max_credit,omitempty"`      // Maximum credit being approved for.
	MinCredit            float64                       `json:"min_credit,omitempty"`      // Minimum credit allowed to be taken.
	Promotions           []ApprovalPromotionsItems     `json:"promotions,omitempty"`
	RateStructures       []ApprovalRateStructuresItems `json:"rate_structures,omitempty"` // Different applicable rates for this specific approval.
	// Approval valid until this date.
	// Format: date-time.
	TimeOut              *time.Time                    `json:"time_out,omitempty"`
	TopUpAllowed         bool                          `json:"top_up_allowed,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`                         // All unmatched properties.
}

type marshalApproval Approval

var knownKeysApproval = []string{
	"duration",
	"interval",
	"max_credit",
	"min_credit",
	"promotions",
	"rate_structures",
	"time_out",
	"top_up_allowed",
}

// UnmarshalJSON decodes JSON.
func (a *Approval) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApproval(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = Approval(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a Approval) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApproval(a))
	}

	return marshalUnion(marshalApproval(a), a.AdditionalProperties)
}

// ApprovalRateStructuresItems structure is generated from "#/definitions/approval->rate_structures->items".
type ApprovalRateStructuresItems struct {
	EffectiveOnDay       int64                                   `json:"effective_on_day,omitempty"` // When this rate is effective. 0 means the first day of the loan.
	Rates                []ApprovalRateStructuresItemsRatesItems `json:"rates,omitempty"`            // List of rates. Several rates can be applied to different principal amounts.
	AdditionalProperties map[string]interface{}                  `json:"-"`                          // All unmatched properties.
}

type marshalApprovalRateStructuresItems ApprovalRateStructuresItems

var knownKeysApprovalRateStructuresItems = []string{
	"effective_on_day",
	"rates",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRateStructuresItems) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRateStructuresItems(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRateStructuresItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRateStructuresItems(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRateStructuresItems) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRateStructuresItems(a))
	}

	return marshalUnion(marshalApprovalRateStructuresItems(a), a.AdditionalProperties)
}

// ApprovalRateStructuresItemsRatesItems structure is generated from "#/definitions/approval->rate_structures->items->rates->items".
type ApprovalRateStructuresItemsRatesItems struct {
	MaxPrincipal         float64                `json:"max_principal,omitempty"` // Rate applied up to this max_principal amount.
	Rate                 float64                `json:"rate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                       // All unmatched properties.
}

type marshalApprovalRateStructuresItemsRatesItems ApprovalRateStructuresItemsRatesItems

var knownKeysApprovalRateStructuresItemsRatesItems = []string{
	"max_principal",
	"rate",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRateStructuresItemsRatesItems) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRateStructuresItemsRatesItems(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRateStructuresItemsRatesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRateStructuresItemsRatesItems(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRateStructuresItemsRatesItems) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRateStructuresItemsRatesItems(a))
	}

	return marshalUnion(marshalApprovalRateStructuresItemsRatesItems(a), a.AdditionalProperties)
}

// CustomerFunded structure is generated from "#/definitions/customer_funded".
//
// customer_funded.
type CustomerFunded struct {
	AmountFunded         float64                `json:"amount_funded"`   // Required.
	// Format: date-time.
	// Required.
	FundedDatetime       *time.Time             `json:"funded_datetime"`
	LoanID               string                 `json:"loan_id"`         // Required.
	AdditionalProperties map[string]interface{} `json:"-"`               // All unmatched properties.
}

type marshalCustomerFunded CustomerFunded

var knownKeysCustomerFunded = []string{
	"amount_funded",
	"funded_datetime",
	"loan_id",
}

// UnmarshalJSON decodes JSON.
func (c *CustomerFunded) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCustomerFunded(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCustomerFunded {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CustomerFunded(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CustomerFunded) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCustomerFunded(c))
	}

	return marshalUnion(marshalCustomerFunded(c), c.AdditionalProperties)
}

// ApprovalRequest structure is generated from "#/definitions/approval_request".
//
// approval_request.
//
// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
type ApprovalRequest struct {
	Status               ApprovalRequestStatus  `json:"status,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                // All unmatched properties.
}

type marshalApprovalRequest ApprovalRequest

var knownKeysApprovalRequest = []string{
	"status",
}

// UnmarshalJSON decodes JSON.
func (a *ApprovalRequest) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalApprovalRequest(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysApprovalRequest {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ma.AdditionalProperties == nil {
			ma.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ma.AdditionalProperties[key] = val
	}

	*a = ApprovalRequest(ma)

	return nil
}

// MarshalJSON encodes JSON.
func (a ApprovalRequest) MarshalJSON() ([]byte, error) {
	if len(a.AdditionalProperties) == 0 {
		return json.Marshal(marshalApprovalRequest(a))
	}

	return marshalUnion(marshalApprovalRequest(a), a.AdditionalProperties)
}

// WebhookPaymentInstruction structure is generated from "#/definitions/webhook_payment_instruction".
//
// webhook_payment_instruction.
type WebhookPaymentInstruction struct {
	Amount               float64                               `json:"amount"`                 // Required.
	BankDetails          *WebhookPaymentInstructionBankDetails `json:"bank_details,omitempty"`
	Direction            WebhookPaymentInstructionDirection    `json:"direction"`              // Required.
	// Format: uuid.
	// Required.
	PaymentInstructionID string                                `json:"payment_instruction_id"`
	// Format: uuid.
	// Required.
	StateKey             string                                `json:"state_key"`
	AdditionalProperties map[string]interface{}                `json:"-"`                      // All unmatched properties.
}

type marshalWebhookPaymentInstruction WebhookPaymentInstruction

var knownKeysWebhookPaymentInstruction = []string{
	"amount",
	"bank_details",
	"direction",
	"payment_instruction_id",
	"state_key",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPaymentInstruction) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPaymentInstruction(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPaymentInstruction {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPaymentInstruction(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPaymentInstruction) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPaymentInstruction(w))
	}

	return marshalUnion(marshalWebhookPaymentInstruction(w), w.AdditionalProperties)
}

// WebhookPaymentInstructionBankDetails structure is generated from "#/definitions/webhook_payment_instruction->bank_details".
type WebhookPaymentInstructionBankDetails struct {
	AccountNumber        string                 `json:"account_number"` // Required.
	SortCode             string                 `json:"sort_code"`      // Required.
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalWebhookPaymentInstructionBankDetails WebhookPaymentInstructionBankDetails

var knownKeysWebhookPaymentInstructionBankDetails = []string{
	"account_number",
	"sort_code",
}

// UnmarshalJSON decodes JSON.
func (w *WebhookPaymentInstructionBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mw := marshalWebhookPaymentInstructionBankDetails(*w)

	err = json.Unmarshal(data, &mw)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysWebhookPaymentInstructionBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mw.AdditionalProperties == nil {
			mw.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mw.AdditionalProperties[key] = val
	}

	*w = WebhookPaymentInstructionBankDetails(mw)

	return nil
}

// MarshalJSON encodes JSON.
func (w WebhookPaymentInstructionBankDetails) MarshalJSON() ([]byte, error) {
	if len(w.AdditionalProperties) == 0 {
		return json.Marshal(marshalWebhookPaymentInstructionBankDetails(w))
	}

	return marshalUnion(marshalWebhookPaymentInstructionBankDetails(w), w.AdditionalProperties)
}

// PutDocumentUploadStateKeyDocumentIDRequestBody structure is generated from "PutDocumentUploadStateKeyDocumentID/request/body".
type PutDocumentUploadStateKeyDocumentIDRequestBody struct {
	Data                 PutDocumentUploadStateKeyDocumentIDRequestBodyData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                             `json:"-"`    // All unmatched properties.
}

type marshalPutDocumentUploadStateKeyDocumentIDRequestBody PutDocumentUploadStateKeyDocumentIDRequestBody

var knownKeysPutDocumentUploadStateKeyDocumentIDRequestBody = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PutDocumentUploadStateKeyDocumentIDRequestBody) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutDocumentUploadStateKeyDocumentIDRequestBody(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutDocumentUploadStateKeyDocumentIDRequestBody {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutDocumentUploadStateKeyDocumentIDRequestBody(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutDocumentUploadStateKeyDocumentIDRequestBody) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutDocumentUploadStateKeyDocumentIDRequestBody(p))
	}

	return marshalUnion(marshalPutDocumentUploadStateKeyDocumentIDRequestBody(p), p.AdditionalProperties)
}

// PutDocumentUploadStateKeyDocumentIDRequestBodyData structure is generated from "PutDocumentUploadStateKeyDocumentID/request/body->data".
type PutDocumentUploadStateKeyDocumentIDRequestBodyData struct {
	DocumentType         PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType `json:"document_type"` // Required.
	AdditionalProperties map[string]interface{}                                         `json:"-"`             // All unmatched properties.
}

type marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData PutDocumentUploadStateKeyDocumentIDRequestBodyData

var knownKeysPutDocumentUploadStateKeyDocumentIDRequestBodyData = []string{
	"document_type",
}

// UnmarshalJSON decodes JSON.
func (p *PutDocumentUploadStateKeyDocumentIDRequestBodyData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutDocumentUploadStateKeyDocumentIDRequestBodyData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutDocumentUploadStateKeyDocumentIDRequestBodyData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutDocumentUploadStateKeyDocumentIDRequestBodyData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(p))
	}

	return marshalUnion(marshalPutDocumentUploadStateKeyDocumentIDRequestBodyData(p), p.AdditionalProperties)
}

// CreditFacilityStatus structure is generated from "#/definitions/credit_facility_status".
//
// credit_facility_status.
type CreditFacilityStatus struct {
	Data                 *CreditFacilityStatusData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`              // All unmatched properties.
}

type marshalCreditFacilityStatus CreditFacilityStatus

var knownKeysCreditFacilityStatus = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatus(c))
	}

	return marshalUnion(marshalCreditFacilityStatus(c), c.AdditionalProperties)
}

// CreditFacilityStatusData structure is generated from "#/definitions/credit_facility_status->data".
type CreditFacilityStatusData struct {
	ApprovalRequirements  []DataRequirement                          `json:"approval_requirements,omitempty"`
	// Approval_status.
	// Approval decision for a customer. Additional information depending on the status will appear in declined/approved sections.
	ApprovalStatus        *ApprovalStatus                            `json:"approval_status,omitempty"`
	Balance               *CreditFacilityStatusDataBalance           `json:"balance,omitempty"`                 // Balance for this credit facility as of today.
	Cashflows             []CreditFacilityStatusDataCashflowsItems   `json:"cashflows,omitempty"`               // Cashflows related to this loan. Mainly funding and repayments.
	FundingRequirements   []DataRequirement                          `json:"funding_requirements,omitempty"`
	// Approval_request.
	// Latest approval request description. If no decision is possible, data_errors will detail the reasons.
	LatestApprovalRequest *ApprovalRequest                           `json:"latest_approval_request,omitempty"`
	LoanStatus            CreditFacilityStatusDataLoanStatus         `json:"loan_status,omitempty"`             // Status of current or last loan.
	ScheduledPayments     *CreditFacilityStatusDataScheduledPayments `json:"scheduled_payments,omitempty"`
	AdditionalProperties  map[string]interface{}                     `json:"-"`                                 // All unmatched properties.
}

type marshalCreditFacilityStatusData CreditFacilityStatusData

var knownKeysCreditFacilityStatusData = []string{
	"approval_requirements",
	"approval_status",
	"balance",
	"cashflows",
	"funding_requirements",
	"latest_approval_request",
	"loan_status",
	"scheduled_payments",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusData) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusData(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusData(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusData) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusData(c))
	}

	return marshalUnion(marshalCreditFacilityStatusData(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataBalance structure is generated from "#/definitions/credit_facility_status->data->balance".
//
// Balance for this credit facility as of today.
type CreditFacilityStatusDataBalance struct {
	Interest             float64                `json:"interest,omitempty"`
	OtherFees            float64                `json:"other_fees,omitempty"`
	Principal            float64                `json:"principal,omitempty"`
	ProductFees          float64                `json:"product_fees,omitempty"`
	Total                float64                `json:"total,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalCreditFacilityStatusDataBalance CreditFacilityStatusDataBalance

var knownKeysCreditFacilityStatusDataBalance = []string{
	"interest",
	"other_fees",
	"principal",
	"product_fees",
	"total",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataBalance) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataBalance(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataBalance {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataBalance(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataBalance) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataBalance(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataBalance(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataCashflowsItems structure is generated from "#/definitions/credit_facility_status->data->cashflows->items".
type CreditFacilityStatusDataCashflowsItems struct {
	Amount               float64                                         `json:"amount,omitempty"`
	Datetime             *time.Time                                      `json:"datetime,omitempty"`  // Format: date-time.
	Direction            CreditFacilityStatusDataCashflowsItemsDirection `json:"direction,omitempty"`
	Type                 CreditFacilityStatusDataCashflowsItemsType      `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}                          `json:"-"`                   // All unmatched properties.
}

type marshalCreditFacilityStatusDataCashflowsItems CreditFacilityStatusDataCashflowsItems

var knownKeysCreditFacilityStatusDataCashflowsItems = []string{
	"amount",
	"datetime",
	"direction",
	"type",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataCashflowsItems) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataCashflowsItems(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataCashflowsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataCashflowsItems(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataCashflowsItems) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataCashflowsItems(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataCashflowsItems(c), c.AdditionalProperties)
}

// CreditFacilityStatusDataScheduledPayments structure is generated from "#/definitions/credit_facility_status->data->scheduled_payments".
type CreditFacilityStatusDataScheduledPayments struct {
	// Repayment_schedule.
	// Payments schedule to repay the current loan.
	Schedule             []RepaymentScheduleItems  `json:"schedule,omitempty"`
	Summary              *RepaymentScheduleSummary `json:"summary,omitempty"`  // Repayment_schedule_summary.
	AdditionalProperties map[string]interface{}    `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityStatusDataScheduledPayments CreditFacilityStatusDataScheduledPayments

var knownKeysCreditFacilityStatusDataScheduledPayments = []string{
	"schedule",
	"summary",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityStatusDataScheduledPayments) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityStatusDataScheduledPayments(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityStatusDataScheduledPayments {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityStatusDataScheduledPayments(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityStatusDataScheduledPayments) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityStatusDataScheduledPayments(c))
	}

	return marshalUnion(marshalCreditFacilityStatusDataScheduledPayments(c), c.AdditionalProperties)
}

// RepaymentScheduleItems structure is generated from "#/definitions/repayment_schedule->items".
type RepaymentScheduleItems struct {
	// Date when the repayment must happen.
	// Format: date.
	// Required.
	Date                 string                 `json:"date"`
	Interest             float64                `json:"interest"`   // Required.
	Principal            float64                `json:"principal"`  // Required.
	// Total amount to be repaid. Sum of all other amounts.
	// Required.
	Total                float64                `json:"total"`
	// If applicable, fees to be repaid. Interest is not considered as fees and appears in its own section.
	// Required.
	TotalFees            float64                `json:"total_fees"`
	AdditionalProperties map[string]interface{} `json:"-"`          // All unmatched properties.
}

type marshalRepaymentScheduleItems RepaymentScheduleItems

var knownKeysRepaymentScheduleItems = []string{
	"date",
	"interest",
	"principal",
	"total",
	"total_fees",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleItems) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleItems(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleItems(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleItems) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleItems(r))
	}

	return marshalUnion(marshalRepaymentScheduleItems(r), r.AdditionalProperties)
}

// RepaymentScheduleSummary structure is generated from "#/definitions/repayment_schedule_summary".
//
// repayment_schedule_summary.
type RepaymentScheduleSummary struct {
	AnnualInterestRate      *RepaymentScheduleSummaryAnnualInterestRate `json:"annual_interest_rate,omitempty"`
	Apr                     float64                                     `json:"apr,omitempty"`
	BusinessDaysOnly        bool                                        `json:"business_days_only,omitempty"`
	OriginationFee          float64                                     `json:"origination_fee,omitempty"`
	SimplifiedSchedule      *RepaymentScheduleSummarySimplifiedSchedule `json:"simplified_schedule,omitempty"`
	TotalCreditAmount       float64                                     `json:"total_credit_amount,omitempty"`
	TotalNumberOfRepayments int64                                       `json:"total_number_of_repayments,omitempty"`
	TotalPayable            float64                                     `json:"total_payable,omitempty"`
	AdditionalProperties    map[string]interface{}                      `json:"-"`                                    // All unmatched properties.
}

type marshalRepaymentScheduleSummary RepaymentScheduleSummary

var knownKeysRepaymentScheduleSummary = []string{
	"annual_interest_rate",
	"apr",
	"business_days_only",
	"origination_fee",
	"simplified_schedule",
	"total_credit_amount",
	"total_number_of_repayments",
	"total_payable",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummary) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummary(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummary {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummary(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummary) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummary(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummary(r), r.AdditionalProperties)
}

// RepaymentScheduleSummaryAnnualInterestRate structure is generated from "#/definitions/repayment_schedule_summary->annual_interest_rate".
type RepaymentScheduleSummaryAnnualInterestRate struct {
	Rate                 float64                                            `json:"rate,omitempty"`
	RateType             RepaymentScheduleSummaryAnnualInterestRateRateType `json:"rate_type,omitempty"`
	AdditionalProperties map[string]interface{}                             `json:"-"`                   // All unmatched properties.
}

type marshalRepaymentScheduleSummaryAnnualInterestRate RepaymentScheduleSummaryAnnualInterestRate

var knownKeysRepaymentScheduleSummaryAnnualInterestRate = []string{
	"rate",
	"rate_type",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummaryAnnualInterestRate) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummaryAnnualInterestRate(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummaryAnnualInterestRate {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummaryAnnualInterestRate(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummaryAnnualInterestRate) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummaryAnnualInterestRate(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummaryAnnualInterestRate(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedSchedule structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule".
type RepaymentScheduleSummarySimplifiedSchedule struct {
	EqualRepayments      *RepaymentScheduleSummarySimplifiedScheduleEqualRepayments `json:"equal_repayments,omitempty"`
	NextRepayment        *RepaymentScheduleSummarySimplifiedScheduleNextRepayment   `json:"next_repayment,omitempty"`
	AdditionalProperties map[string]interface{}                                     `json:"-"`                          // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedSchedule RepaymentScheduleSummarySimplifiedSchedule

var knownKeysRepaymentScheduleSummarySimplifiedSchedule = []string{
	"equal_repayments",
	"next_repayment",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedSchedule) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedSchedule(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedSchedule {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedSchedule(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedSchedule) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedSchedule(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedSchedule(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedScheduleEqualRepayments structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule->equal_repayments".
type RepaymentScheduleSummarySimplifiedScheduleEqualRepayments struct {
	Amount                     float64                `json:"amount"`                        // Required.
	DayOfMonth                 int64                  `json:"day_of_month,omitempty"`
	DayOfWeek                  int64                  `json:"day_of_week,omitempty"`
	// Format: date.
	// Required.
	FinalStandardRepaymentDate string                 `json:"final_standard_repayment_date"`
	// Format: date.
	// Required.
	FirstStandardRepaymentDate string                 `json:"first_standard_repayment_date"`
	Interval                   string                 `json:"interval"`                      // Required.
	AdditionalProperties       map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments RepaymentScheduleSummarySimplifiedScheduleEqualRepayments

var knownKeysRepaymentScheduleSummarySimplifiedScheduleEqualRepayments = []string{
	"amount",
	"day_of_month",
	"day_of_week",
	"final_standard_repayment_date",
	"first_standard_repayment_date",
	"interval",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedScheduleEqualRepayments) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedScheduleEqualRepayments {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedScheduleEqualRepayments(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedScheduleEqualRepayments) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedScheduleEqualRepayments(r), r.AdditionalProperties)
}

// RepaymentScheduleSummarySimplifiedScheduleNextRepayment structure is generated from "#/definitions/repayment_schedule_summary->simplified_schedule->next_repayment".
type RepaymentScheduleSummarySimplifiedScheduleNextRepayment struct {
	Amount               float64                `json:"amount"` // Required.
	// Format: date.
	// Required.
	Date                 string                 `json:"date"`
	AdditionalProperties map[string]interface{} `json:"-"`      // All unmatched properties.
}

type marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment RepaymentScheduleSummarySimplifiedScheduleNextRepayment

var knownKeysRepaymentScheduleSummarySimplifiedScheduleNextRepayment = []string{
	"amount",
	"date",
}

// UnmarshalJSON decodes JSON.
func (r *RepaymentScheduleSummarySimplifiedScheduleNextRepayment) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysRepaymentScheduleSummarySimplifiedScheduleNextRepayment {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mr.AdditionalProperties == nil {
			mr.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mr.AdditionalProperties[key] = val
	}

	*r = RepaymentScheduleSummarySimplifiedScheduleNextRepayment(mr)

	return nil
}

// MarshalJSON encodes JSON.
func (r RepaymentScheduleSummarySimplifiedScheduleNextRepayment) MarshalJSON() ([]byte, error) {
	if len(r.AdditionalProperties) == 0 {
		return json.Marshal(marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(r))
	}

	return marshalUnion(marshalRepaymentScheduleSummarySimplifiedScheduleNextRepayment(r), r.AdditionalProperties)
}

// GetLoginLinkStateKeyResponseValueOK structure is generated from "GetLoginLinkStateKey/response/ValueOK".
type GetLoginLinkStateKeyResponseValueOK struct {
	Data                 GetLoginLinkStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                  `json:"-"`    // All unmatched properties.
}

type marshalGetLoginLinkStateKeyResponseValueOK GetLoginLinkStateKeyResponseValueOK

var knownKeysGetLoginLinkStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetLoginLinkStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetLoginLinkStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetLoginLinkStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetLoginLinkStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetLoginLinkStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetLoginLinkStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetLoginLinkStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetLoginLinkStateKeyResponseValueOKData structure is generated from "GetLoginLinkStateKey/response/ValueOK->data".
type GetLoginLinkStateKeyResponseValueOKData struct {
	// Format: uri.
	// Required.
	LoginLink            string                 `json:"login_link"`
	AdditionalProperties map[string]interface{} `json:"-"`          // All unmatched properties.
}

type marshalGetLoginLinkStateKeyResponseValueOKData GetLoginLinkStateKeyResponseValueOKData

var knownKeysGetLoginLinkStateKeyResponseValueOKData = []string{
	"login_link",
}

// UnmarshalJSON decodes JSON.
func (g *GetLoginLinkStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetLoginLinkStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetLoginLinkStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetLoginLinkStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetLoginLinkStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetLoginLinkStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetLoginLinkStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// StatePayload structure is generated from "#/definitions/state_payload".
//
// state_payload.
//
// The customer state endpoint.
type StatePayload struct {
	Data                 *StatePayloadData      `json:"data,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`              // All unmatched properties.
}

type marshalStatePayload StatePayload

var knownKeysStatePayload = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayload) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayload(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayload {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayload(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayload) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayload(s))
	}

	return marshalUnion(marshalStatePayload(s), s.AdditionalProperties)
}

// StatePayloadData structure is generated from "#/definitions/state_payload->data".
type StatePayloadData struct {
	Application          *StatePayloadDataApplication `json:"application,omitempty"` // Data submitted by the customer about themselves, their company or their funding requirements. If this data changes over time, you should update the state to reflect the latest data or requirements.
	Partner              *StatePayloadDataPartner     `json:"partner,omitempty"`     // Supplemental data that the partner holds on the customer. This should not be exposed to the customer since it may contain sensitive details such as the verification_data array.
	// This field is ignored in POST/PUT requests.
	// Format: uuid.
	StateKey             string                       `json:"state_key,omitempty"`
	// This field is used for optimistic concurrency control. In response to a GET request the version represents the latest stored version of the state. In the payload of a PUT request it represents the version of the state that the client was editing, which would have been received in a response to an earlier GET request. This field will only be returned in GET requests if you have been opted into optimistic concurrency control. It should never be supplied with POST requests but should be supplied with PUT requests if you have been opted into optimistic concurrency control.
	// Format: uuid.
	Version              string                       `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`                     // All unmatched properties.
}

type marshalStatePayloadData StatePayloadData

var knownKeysStatePayloadData = []string{
	"application",
	"partner",
	"state_key",
	"version",
	"schema_version",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadData) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadData(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["schema_version"]; exists && string(v) != `"v1"` {
		return fmt.Errorf(`bad const value for "schema_version" ("v1" expected, %s received)`, v)
	}

	delete(rawMap, "schema_version")

	for _, key := range knownKeysStatePayloadData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadData(ms)

	return nil
}

var (
	// constStatePayloadData is unconditionally added to JSON.
	constStatePayloadData = json.RawMessage(`{"schema_version":"v1"}`)
)

// MarshalJSON encodes JSON.
func (s StatePayloadData) MarshalJSON() ([]byte, error) {
	return marshalUnion(constStatePayloadData, marshalStatePayloadData(s), s.AdditionalProperties)
}

// StatePayloadDataApplication structure is generated from "#/definitions/state_payload->data->application".
//
// Data submitted by the customer about themselves, their company or their funding requirements. If this data changes over time, you should update the state to reflect the latest data or requirements.
type StatePayloadDataApplication struct {
	Company              *Company                                      `json:"company,omitempty"`            // Company.
	People               []interface{}                                 `json:"people,omitempty"`             // People associated with the company including the applicant and any other directors, shareholders or loan guarantors you wish to submit.
	RequestedProducts    *StatePayloadDataApplicationRequestedProducts `json:"requested_products,omitempty"`
	AdditionalProperties map[string]interface{}                        `json:"-"`                            // All unmatched properties.
}

type marshalStatePayloadDataApplication StatePayloadDataApplication

var knownKeysStatePayloadDataApplication = []string{
	"company",
	"people",
	"requested_products",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataApplication) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataApplication(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataApplication {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataApplication(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataApplication) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataApplication(s))
	}

	return marshalUnion(marshalStatePayloadDataApplication(s), s.AdditionalProperties)
}

// Company structure is generated from "#/definitions/company".
//
// company.
type Company struct {
	// Bank_details.
	// Details of the business bank account used for funding or repayments.
	BankDetails                 *BankDetails                      `json:"bank_details,omitempty"`
	Number                      string                            `json:"company_number,omitempty"`                // Company number as on Companies House.
	CreditreformID              string                            `json:"creditreform_id,omitempty"`               // A 14 digit number identifying the company on the Creditreform database.
	Industry                    string                            `json:"industry,omitempty"`                      // Recommended format is one of: Agriculture, Forestry & Fishing / Architecture & Engineering / Business Support Services (e.g. recruitment or security) / Car Dealers, Garages & Mechanics / Cleaning, Landscaping & Gardening / Construction (e.g. builders, civil engineer or electrician) / Education & Training / Finance & Insurance / Health & Care (e.g. day-care, doctors or care homes) / Hotels, Restaurants & Pubs / IT & Communications/ Leisure / Other Services (e.g. hairdressers or travel agents) / Manufacturing, Food Processing & Printing / Professional Services (e.g. accounting or consulting) / Property & Real Estate / Publishing, Film & Media Production / Retail (online or offline) / Transport & Logistics (e.g. taxis, couriers or storage) / Wholesale / Other.
	Last12MonthsProfit          *CompanyLast12MonthsProfit        `json:"last_12_months_profit,omitempty"`         // Estimated profit over the last 12 months. For a young business without a full year of trading, the profit to date should be given. A negative value denotes a loss.
	Last12MonthsTurnover        *CompanyLast12MonthsTurnover      `json:"last_12_months_turnover,omitempty"`       // Estimated revenue over the last 12 months. For a young business without a full year of revenue, revenue to date should be given.
	NumberOfEmployees           int64                             `json:"number_of_employees,omitempty"`
	OnlineSalesPercentage       int64                             `json:"online_sales_percentage,omitempty"`
	OverdraftStatus             *CompanyOverdraftStatus           `json:"overdraft_status,omitempty"`
	RegisteredAddress           *CompanyAddress                   `json:"registered_address,omitempty"`            // Company_address.
	RegisteredCompanyName       string                            `json:"registered_company_name,omitempty"`       // Registered company name for a registered business such as a limited company, as on Companies House.
	RegisteredInHandelsregister bool                              `json:"registered_in_handelsregister,omitempty"` // Specifies whether the user says their company is registered in the German Handelsregister.
	ThirdPartyProviders         []CompanyThirdPartyProvidersItems `json:"third_party_providers,omitempty"`         // Details of third-party providers used by the business such as Xero, eBay, PayPal or others.
	TradingAddress              *CompanyAddress                   `json:"trading_address,omitempty"`               // Company_address.
	// Date when company started trading, with expected ISO 8601 format.
	// Format: date.
	TradingFromDate             string                            `json:"trading_from_date,omitempty"`
	TradingName                 string                            `json:"trading_name,omitempty"`                  // Primary company name used for sole traders and ordinary partnerships, otherwise registered name will typically be used.
	Type                        CompanyType                       `json:"type,omitempty"`
	VatStatus                   *CompanyVatStatus                 `json:"vat_status,omitempty"`                    // Information on the company's VAT registration status.
	// Company website.
	// Format: uri.
	Website                     string                            `json:"website,omitempty"`
	AdditionalProperties        map[string]interface{}            `json:"-"`                                       // All unmatched properties.
}

type marshalCompany Company

var knownKeysCompany = []string{
	"bank_details",
	"company_number",
	"creditreform_id",
	"industry",
	"last_12_months_profit",
	"last_12_months_turnover",
	"number_of_employees",
	"online_sales_percentage",
	"overdraft_status",
	"registered_address",
	"registered_company_name",
	"registered_in_handelsregister",
	"third_party_providers",
	"trading_address",
	"trading_from_date",
	"trading_name",
	"type",
	"vat_status",
	"website",
}

// UnmarshalJSON decodes JSON.
func (c *Company) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompany(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompany {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = Company(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Company) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompany(c))
	}

	return marshalUnion(marshalCompany(c), c.AdditionalProperties)
}

// BankDetails structure is generated from "#/definitions/bank_details".
//
// bank_details.
//
// Details of the business bank account used for funding or repayments.
type BankDetails struct {
	Iban                 string                 `json:"iban"` // Required.
	AdditionalProperties map[string]interface{} `json:"-"`    // All unmatched properties.
}

type marshalBankDetails BankDetails

var knownKeysBankDetails = []string{
	"iban",
}

// UnmarshalJSON decodes JSON.
func (b *BankDetails) UnmarshalJSON(data []byte) error {
	var err error

	mb := marshalBankDetails(*b)

	err = json.Unmarshal(data, &mb)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mb.AdditionalProperties == nil {
			mb.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mb.AdditionalProperties[key] = val
	}

	*b = BankDetails(mb)

	return nil
}

// MarshalJSON encodes JSON.
func (b BankDetails) MarshalJSON() ([]byte, error) {
	if len(b.AdditionalProperties) == 0 {
		return json.Marshal(marshalBankDetails(b))
	}

	return marshalUnion(marshalBankDetails(b), b.AdditionalProperties)
}

// CompanyLast12MonthsProfit structure is generated from "#/definitions/company->last_12_months_profit".
//
// Estimated profit over the last 12 months. For a young business without a full year of trading, the profit to date should be given. A negative value denotes a loss.
type CompanyLast12MonthsProfit struct {
	Amount               float64                `json:"amount,omitempty"`   // Pre-tax amount submitted by customer in local currency. Note that this differs from monthly_non_business_income which is post-tax.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCompanyLast12MonthsProfit CompanyLast12MonthsProfit

var knownKeysCompanyLast12MonthsProfit = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyLast12MonthsProfit) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyLast12MonthsProfit(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyLast12MonthsProfit {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyLast12MonthsProfit(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyLast12MonthsProfit) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyLast12MonthsProfit(c))
	}

	return marshalUnion(marshalCompanyLast12MonthsProfit(c), c.AdditionalProperties)
}

// CompanyLast12MonthsTurnover structure is generated from "#/definitions/company->last_12_months_turnover".
//
// Estimated revenue over the last 12 months. For a young business without a full year of revenue, revenue to date should be given.
type CompanyLast12MonthsTurnover struct {
	Amount               float64                `json:"amount,omitempty"`   // Amount submitted by customer in local currency or other estimate.
	// Datetime when user submitted data, with expected ISO 8601 format.
	// Format: date-time.
	Datetime             *time.Time             `json:"datetime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCompanyLast12MonthsTurnover CompanyLast12MonthsTurnover

var knownKeysCompanyLast12MonthsTurnover = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyLast12MonthsTurnover) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyLast12MonthsTurnover(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyLast12MonthsTurnover {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyLast12MonthsTurnover(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyLast12MonthsTurnover) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyLast12MonthsTurnover(c))
	}

	return marshalUnion(marshalCompanyLast12MonthsTurnover(c), c.AdditionalProperties)
}

// CompanyOverdraftStatus structure is generated from "#/definitions/company->overdraft_status".
type CompanyOverdraftStatus struct {
	HasOverdraft         bool                   `json:"has_overdraft,omitempty"`         // Specifies whether the user claims their company has a business overdraft.
	TotalOverdraftLimit  float64                `json:"total_overdraft_limit,omitempty"` // User declaration for total overdraft limit available to the company. If the company has multiple overdrafts, the sum of the limits should be used.
	AdditionalProperties map[string]interface{} `json:"-"`                               // All unmatched properties.
}

type marshalCompanyOverdraftStatus CompanyOverdraftStatus

var knownKeysCompanyOverdraftStatus = []string{
	"has_overdraft",
	"total_overdraft_limit",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyOverdraftStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyOverdraftStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyOverdraftStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyOverdraftStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyOverdraftStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyOverdraftStatus(c))
	}

	return marshalUnion(marshalCompanyOverdraftStatus(c), c.AdditionalProperties)
}

// CompanyAddress structure is generated from "#/definitions/company_address".
//
// company_address.
type CompanyAddress struct {
	BuildingName         string                 `json:"building_name,omitempty"`
	BuildingNumber       string                 `json:"building_number,omitempty"`
	Country              CompanyAddressCountry  `json:"country,omitempty"`
	FlatNumber           string                 `json:"flat_number,omitempty"`
	Postcode             string                 `json:"postcode,omitempty"`
	StreetLine1          string                 `json:"street_line_1,omitempty"`
	StreetLine2          string                 `json:"street_line_2,omitempty"`
	Town                 string                 `json:"town,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalCompanyAddress CompanyAddress

var knownKeysCompanyAddress = []string{
	"building_name",
	"building_number",
	"country",
	"flat_number",
	"postcode",
	"street_line_1",
	"street_line_2",
	"town",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyAddress) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyAddress(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyAddress {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyAddress(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyAddress) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyAddress(c))
	}

	return marshalUnion(marshalCompanyAddress(c), c.AdditionalProperties)
}

// CompanyThirdPartyProvidersItems structure is generated from "#/definitions/company->third_party_providers->items".
type CompanyThirdPartyProvidersItems struct {
	Name                 string                              `json:"name"` // Required.
	Type                 CompanyThirdPartyProvidersItemsType `json:"type"` // Required.
	AdditionalProperties map[string]interface{}              `json:"-"`    // All unmatched properties.
}

type marshalCompanyThirdPartyProvidersItems CompanyThirdPartyProvidersItems

var knownKeysCompanyThirdPartyProvidersItems = []string{
	"name",
	"type",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyThirdPartyProvidersItems) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyThirdPartyProvidersItems(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyThirdPartyProvidersItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyThirdPartyProvidersItems(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyThirdPartyProvidersItems) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyThirdPartyProvidersItems(c))
	}

	return marshalUnion(marshalCompanyThirdPartyProvidersItems(c), c.AdditionalProperties)
}

// CompanyVatStatus structure is generated from "#/definitions/company->vat_status".
//
// Information on the company's VAT registration status.
type CompanyVatStatus struct {
	IsVatRegistered       bool                   `json:"is_vat_registered,omitempty"`
	RegisteredOver3Months bool                   `json:"registered_over_3_months,omitempty"`
	VatNumber             string                 `json:"vat_number,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`                                  // All unmatched properties.
}

type marshalCompanyVatStatus CompanyVatStatus

var knownKeysCompanyVatStatus = []string{
	"is_vat_registered",
	"registered_over_3_months",
	"vat_number",
}

// UnmarshalJSON decodes JSON.
func (c *CompanyVatStatus) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCompanyVatStatus(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCompanyVatStatus {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CompanyVatStatus(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CompanyVatStatus) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCompanyVatStatus(c))
	}

	return marshalUnion(marshalCompanyVatStatus(c), c.AdditionalProperties)
}

// StatePayloadDataApplicationRequestedProducts structure is generated from "#/definitions/state_payload->data->application->requested_products".
type StatePayloadDataApplicationRequestedProducts struct {
	CreditFacility       *CreditFacilityRequest `json:"credit_facility,omitempty"` // Credit_facility_request.
	AdditionalProperties map[string]interface{} `json:"-"`                         // All unmatched properties.
}

type marshalStatePayloadDataApplicationRequestedProducts StatePayloadDataApplicationRequestedProducts

var knownKeysStatePayloadDataApplicationRequestedProducts = []string{
	"credit_facility",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataApplicationRequestedProducts) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataApplicationRequestedProducts(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataApplicationRequestedProducts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataApplicationRequestedProducts(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataApplicationRequestedProducts) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataApplicationRequestedProducts(s))
	}

	return marshalUnion(marshalStatePayloadDataApplicationRequestedProducts(s), s.AdditionalProperties)
}

// CreditFacilityRequest structure is generated from "#/definitions/credit_facility_request".
//
// credit_facility_request.
type CreditFacilityRequest struct {
	Approval             *CreditFacilityRequestApproval `json:"approval,omitempty"`
	Funding              *CreditFacilityRequestFunding  `json:"funding,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityRequest CreditFacilityRequest

var knownKeysCreditFacilityRequest = []string{
	"approval",
	"funding",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequest) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequest(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequest {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequest(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequest) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequest(c))
	}

	return marshalUnion(marshalCreditFacilityRequest(c), c.AdditionalProperties)
}

// CreditFacilityRequestApproval structure is generated from "#/definitions/credit_facility_request->approval".
type CreditFacilityRequestApproval struct {
	Amount               float64                              `json:"amount,omitempty"`           // Amount that the user is looking to get approved for.
	Datetime             *time.Time                           `json:"datetime,omitempty"`         // Format: date-time.
	DetailedPurpose      string                               `json:"detailed_purpose,omitempty"` // Detailed_purpose is usually submitted if a purpose of other has been set.
	Duration             int64                                `json:"duration,omitempty"`         // Requested loan duration in months. For instance, an interval of 1m and a duration of 12 would correspond to a one year loan paid back in monthly instalments. In cases where the interval is not specified as a number of months, the actual duration will be rounded up to be a whole number of intervals (taking a month as 30 days).
	Interval             string                               `json:"interval,omitempty"`         // Interval between repayments, examples: 7d / 1m. Customers are put on a one month schedule by default and this would not typically be asked during the application journey.
	Purpose              CreditFacilityRequestApprovalPurpose `json:"purpose,omitempty"`          // A purpose may not be submitted if the customer is simply looking to get approved for the future, rather than a specific need.
	Urgency              CreditFacilityRequestApprovalUrgency `json:"urgency,omitempty"`          // Describes whether the customer needs the funding immediately (asap), over the next few weeks (weeks) or is simply looking to get approved for future use (future).
	AdditionalProperties map[string]interface{}               `json:"-"`                          // All unmatched properties.
}

type marshalCreditFacilityRequestApproval CreditFacilityRequestApproval

var knownKeysCreditFacilityRequestApproval = []string{
	"amount",
	"datetime",
	"detailed_purpose",
	"duration",
	"interval",
	"purpose",
	"urgency",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequestApproval) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequestApproval(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequestApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequestApproval(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequestApproval) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequestApproval(c))
	}

	return marshalUnion(marshalCreditFacilityRequestApproval(c), c.AdditionalProperties)
}

// CreditFacilityRequestFunding structure is generated from "#/definitions/credit_facility_request->funding".
type CreditFacilityRequestFunding struct {
	Amount               float64                `json:"amount,omitempty"`   // Amount that the user is looking to drawdown.
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalCreditFacilityRequestFunding CreditFacilityRequestFunding

var knownKeysCreditFacilityRequestFunding = []string{
	"amount",
	"datetime",
}

// UnmarshalJSON decodes JSON.
func (c *CreditFacilityRequestFunding) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalCreditFacilityRequestFunding(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysCreditFacilityRequestFunding {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = CreditFacilityRequestFunding(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c CreditFacilityRequestFunding) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalCreditFacilityRequestFunding(c))
	}

	return marshalUnion(marshalCreditFacilityRequestFunding(c), c.AdditionalProperties)
}

// StatePayloadDataPartner structure is generated from "#/definitions/state_payload->data->partner".
//
// Supplemental data that the partner holds on the customer. This should not be exposed to the customer since it may contain sensitive details such as the verification_data array.
type StatePayloadDataPartner struct {
	CustomerType         string                                   `json:"customer_type,omitempty"`     // Any categorisation of the customer held by the partner that may be required when reporting back data or that should affect the journey (as agreed between iwoca and partner). For example, you might submit 'VIP_customer' if you wanted to track SLAs for these customers separately.
	ExpectedProducts     *StatePayloadDataPartnerExpectedProducts `json:"expected_products,omitempty"`
	// Used by broker partners to determine which of their broker's accounts should be linked to the application submitted.
	// Format: email.
	IntroducerEmail      string                                   `json:"introducer_email,omitempty"`
	VerifiedData         *StatePayloadDataPartnerVerifiedData     `json:"verified_data,omitempty"`     // In certain situations, a partner may be trusted by iwoca to verify that certain pieces of data have already been checked. For example, the partner may have already verified the customer's phone number so there is no need for iwoca to do it again. This section is used for submitting data on any verification that has taken place. It must not be exposed to customers. The structure follows the structure of the application section.
	AdditionalProperties map[string]interface{}                   `json:"-"`                           // All unmatched properties.
}

type marshalStatePayloadDataPartner StatePayloadDataPartner

var knownKeysStatePayloadDataPartner = []string{
	"customer_type",
	"expected_products",
	"introducer_email",
	"verified_data",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartner) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartner(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartner {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartner(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartner) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartner(s))
	}

	return marshalUnion(marshalStatePayloadDataPartner(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProducts structure is generated from "#/definitions/state_payload->data->partner->expected_products".
type StatePayloadDataPartnerExpectedProducts struct {
	CreditFacility       *StatePayloadDataPartnerExpectedProductsCreditFacility `json:"credit_facility,omitempty"`
	AdditionalProperties map[string]interface{}                                 `json:"-"`                         // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProducts StatePayloadDataPartnerExpectedProducts

var knownKeysStatePayloadDataPartnerExpectedProducts = []string{
	"credit_facility",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProducts) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProducts(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProducts {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProducts(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProducts) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProducts(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProducts(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProductsCreditFacility structure is generated from "#/definitions/state_payload->data->partner->expected_products->credit_facility".
type StatePayloadDataPartnerExpectedProductsCreditFacility struct {
	Approval             *StatePayloadDataPartnerExpectedProductsCreditFacilityApproval `json:"approval,omitempty"`
	AdditionalProperties map[string]interface{}                                         `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProductsCreditFacility StatePayloadDataPartnerExpectedProductsCreditFacility

var knownKeysStatePayloadDataPartnerExpectedProductsCreditFacility = []string{
	"approval",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProductsCreditFacility) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProductsCreditFacility(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProductsCreditFacility {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProductsCreditFacility(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProductsCreditFacility) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProductsCreditFacility(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProductsCreditFacility(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerExpectedProductsCreditFacilityApproval structure is generated from "#/definitions/state_payload->data->partner->expected_products->credit_facility->approval".
type StatePayloadDataPartnerExpectedProductsCreditFacilityApproval struct {
	Amount               float64                `json:"amount,omitempty"`   // Submitted in cases where the partner has shown a customer an approval amount or a pre-qualified amount based on some data they hold. This should only be done with prior agreement from iwoca.
	Apr                  float64                `json:"apr,omitempty"`
	Datetime             *time.Time             `json:"datetime,omitempty"` // Format: date-time.
	Duration             int64                  `json:"duration,omitempty"`
	Interval             string                 `json:"interval,omitempty"`
	Rate                 float64                `json:"rate,omitempty"`     // Submitted in cases where the partner has shown a customer an expected monthly rate (including interest and fees) . This should only be done with prior agreement from iwoca.
	AdditionalProperties map[string]interface{} `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval StatePayloadDataPartnerExpectedProductsCreditFacilityApproval

var knownKeysStatePayloadDataPartnerExpectedProductsCreditFacilityApproval = []string{
	"amount",
	"apr",
	"datetime",
	"duration",
	"interval",
	"rate",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerExpectedProductsCreditFacilityApproval) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerExpectedProductsCreditFacilityApproval {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerExpectedProductsCreditFacilityApproval(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerExpectedProductsCreditFacilityApproval) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerExpectedProductsCreditFacilityApproval(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedData structure is generated from "#/definitions/state_payload->data->partner->verified_data".
//
// In certain situations, a partner may be trusted by iwoca to verify that certain pieces of data have already been checked. For example, the partner may have already verified the customer's phone number so there is no need for iwoca to do it again. This section is used for submitting data on any verification that has taken place. It must not be exposed to customers. The structure follows the structure of the application section.
type StatePayloadDataPartnerVerifiedData struct {
	Company              *StatePayloadDataPartnerVerifiedDataCompany      `json:"company,omitempty"`
	People               []StatePayloadDataPartnerVerifiedDataPeopleItems `json:"people,omitempty"`
	AdditionalProperties map[string]interface{}                           `json:"-"`                 // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedData StatePayloadDataPartnerVerifiedData

var knownKeysStatePayloadDataPartnerVerifiedData = []string{
	"company",
	"people",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedData) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedData(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedData(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedData) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedData(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedData(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompany structure is generated from "#/definitions/state_payload->data->partner->verified_data->company".
type StatePayloadDataPartnerVerifiedDataCompany struct {
	BankDetails          *StatePayloadDataPartnerVerifiedDataCompanyBankDetails          `json:"bank_details,omitempty"`
	Last12MonthsTurnover *StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover `json:"last_12_months_turnover,omitempty"`
	AdditionalProperties map[string]interface{}                                          `json:"-"`                                 // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompany StatePayloadDataPartnerVerifiedDataCompany

var knownKeysStatePayloadDataPartnerVerifiedDataCompany = []string{
	"bank_details",
	"last_12_months_turnover",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompany) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompany(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompany {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompany(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompany) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompany(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompany(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompanyBankDetails structure is generated from "#/definitions/state_payload->data->partner->verified_data->company->bank_details".
type StatePayloadDataPartnerVerifiedDataCompanyBankDetails struct {
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails StatePayloadDataPartnerVerifiedDataCompanyBankDetails

var knownKeysStatePayloadDataPartnerVerifiedDataCompanyBankDetails = []string{
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompanyBankDetails) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompanyBankDetails {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompanyBankDetails(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompanyBankDetails) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompanyBankDetails(s), s.AdditionalProperties)
}

// Verification structure is generated from "#/definitions/verification".
//
// verification.
type Verification struct {
	Method               string                 `json:"verification_method,omitempty"` // Method of verification, depending on data type (e.g. 'Penny transfer' for bank_details or 'SMS code' for phone_number).
	Verified             bool                   `json:"verified,omitempty"`            // If verified is true, specifies that you are confident that this piece of data is valid, in line with any contractual obligations you have on checking and validating data.
	AdditionalProperties map[string]interface{} `json:"-"`                             // All unmatched properties.
}

type marshalVerification Verification

var knownKeysVerification = []string{
	"verification_method",
	"verified",
}

// UnmarshalJSON decodes JSON.
func (v *Verification) UnmarshalJSON(data []byte) error {
	var err error

	mv := marshalVerification(*v)

	err = json.Unmarshal(data, &mv)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysVerification {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mv.AdditionalProperties == nil {
			mv.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mv.AdditionalProperties[key] = val
	}

	*v = Verification(mv)

	return nil
}

// MarshalJSON encodes JSON.
func (v Verification) MarshalJSON() ([]byte, error) {
	if len(v.AdditionalProperties) == 0 {
		return json.Marshal(marshalVerification(v))
	}

	return marshalUnion(marshalVerification(v), v.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover structure is generated from "#/definitions/state_payload->data->partner->verified_data->company->last_12_months_turnover".
type StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover struct {
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover

var knownKeysStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover = []string{
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataCompanyLast12MonthsTurnover(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items".
type StatePayloadDataPartnerVerifiedDataPeopleItems struct {
	Emails                 []StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems                 `json:"emails,omitempty"`
	IdentityDocumentChecks []StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems `json:"identity_document_checks,omitempty"`
	Phones                 []StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems                 `json:"phones,omitempty"`
	// Format: uuid.
	// Required.
	UID                    string                                                                      `json:"uid"`
	AdditionalProperties   map[string]interface{}                                                      `json:"-"`                                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItems StatePayloadDataPartnerVerifiedDataPeopleItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItems = []string{
	"emails",
	"identity_document_checks",
	"phones",
	"uid",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->emails->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems struct {
	UID                  string                 `json:"uid,omitempty"`          // Format: uuid.
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems = []string{
	"uid",
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsEmailsItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->identity_document_checks->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems struct {
	CheckID                string                                                                                        `json:"check_id,omitempty"`
	Comments               string                                                                                        `json:"comments,omitempty"`
	// Format: date-time.
	// Required.
	Datetime               *time.Time                                                                                    `json:"datetime"`
	DocumentIssuingCountry string                                                                                        `json:"document_issuing_country,omitempty"` // Two digit ISO country code.
	FileLinks              []StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems     `json:"file_links,omitempty"`
	IdentityDocumentType   StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType `json:"identity_document_type,omitempty"`
	ProviderName           string                                                                                        `json:"provider_name,omitempty"`
	Status                 StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus               `json:"status"`                             // Required.
	AdditionalProperties   map[string]interface{}                                                                        `json:"-"`                                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems = []string{
	"check_id",
	"comments",
	"datetime",
	"document_issuing_country",
	"file_links",
	"identity_document_type",
	"provider_name",
	"status",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->identity_document_checks->items->file_links->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems struct {
	Comments             string                                                                                          `json:"comments,omitempty"`
	FileType             StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType `json:"file_type"`          // Required.
	// Format: uri.
	// Required.
	Link                 string                                                                                          `json:"link"`
	Name                 string                                                                                          `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}                                                                          `json:"-"`                  // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems = []string{
	"comments",
	"file_type",
	"link",
	"name",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItems(s), s.AdditionalProperties)
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems structure is generated from "#/definitions/state_payload->data->partner->verified_data->people->items->phones->items".
type StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems struct {
	UID                  string                 `json:"uid,omitempty"`          // Format: uuid.
	Verification         *Verification          `json:"verification,omitempty"` // Verification.
	AdditionalProperties map[string]interface{} `json:"-"`                      // All unmatched properties.
}

type marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems

var knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems = []string{
	"uid",
	"verification",
}

// UnmarshalJSON decodes JSON.
func (s *StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s StatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(s))
	}

	return marshalUnion(marshalStatePayloadDataPartnerVerifiedDataPeopleItemsPhonesItems(s), s.AdditionalProperties)
}

// PostStateResponseValueCreated structure is generated from "PostState/response/ValueCreated".
type PostStateResponseValueCreated struct {
	Data                 *PostStateResponseValueCreatedData `json:"data,omitempty"` // Present only if the request went fine.
	AdditionalProperties map[string]interface{}             `json:"-"`              // All unmatched properties.
}

type marshalPostStateResponseValueCreated PostStateResponseValueCreated

var knownKeysPostStateResponseValueCreated = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PostStateResponseValueCreated) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostStateResponseValueCreated(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostStateResponseValueCreated {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostStateResponseValueCreated(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostStateResponseValueCreated) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostStateResponseValueCreated(p))
	}

	return marshalUnion(marshalPostStateResponseValueCreated(p), p.AdditionalProperties)
}

// PostStateResponseValueCreatedData structure is generated from "PostState/response/ValueCreated->data".
//
// Present only if the request went fine.
type PostStateResponseValueCreatedData struct {
	// Format: uuid.
	// Required.
	StateKey             string                 `json:"state_key"`
	AdditionalProperties map[string]interface{} `json:"-"`         // All unmatched properties.
}

type marshalPostStateResponseValueCreatedData PostStateResponseValueCreatedData

var knownKeysPostStateResponseValueCreatedData = []string{
	"state_key",
}

// UnmarshalJSON decodes JSON.
func (p *PostStateResponseValueCreatedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPostStateResponseValueCreatedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPostStateResponseValueCreatedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PostStateResponseValueCreatedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PostStateResponseValueCreatedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPostStateResponseValueCreatedData(p))
	}

	return marshalUnion(marshalPostStateResponseValueCreatedData(p), p.AdditionalProperties)
}

// PutStateStateKeyResponseValueAccepted structure is generated from "PutStateStateKey/response/ValueAccepted".
type PutStateStateKeyResponseValueAccepted struct {
	Data                 *PutStateStateKeyResponseValueAcceptedData `json:"data,omitempty"` // Present only if the request went fine.
	AdditionalProperties map[string]interface{}                     `json:"-"`              // All unmatched properties.
}

type marshalPutStateStateKeyResponseValueAccepted PutStateStateKeyResponseValueAccepted

var knownKeysPutStateStateKeyResponseValueAccepted = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (p *PutStateStateKeyResponseValueAccepted) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutStateStateKeyResponseValueAccepted(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutStateStateKeyResponseValueAccepted {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutStateStateKeyResponseValueAccepted(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutStateStateKeyResponseValueAccepted) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutStateStateKeyResponseValueAccepted(p))
	}

	return marshalUnion(marshalPutStateStateKeyResponseValueAccepted(p), p.AdditionalProperties)
}

// PutStateStateKeyResponseValueAcceptedData structure is generated from "PutStateStateKey/response/ValueAccepted->data".
//
// Present only if the request went fine.
type PutStateStateKeyResponseValueAcceptedData struct {
	// This represents the version of the state saved to the database as a result of your PUT request and should be placed in the version field of the state for any subsequent PUT requests. This field is used for optimistic concurrency control and will only be returned if your API user has been configured to use the optmistic concurrency control mechanism.
	// Format: uuid.
	Version              string                 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`                 // All unmatched properties.
}

type marshalPutStateStateKeyResponseValueAcceptedData PutStateStateKeyResponseValueAcceptedData

var knownKeysPutStateStateKeyResponseValueAcceptedData = []string{
	"version",
}

// UnmarshalJSON decodes JSON.
func (p *PutStateStateKeyResponseValueAcceptedData) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalPutStateStateKeyResponseValueAcceptedData(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysPutStateStateKeyResponseValueAcceptedData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mp.AdditionalProperties == nil {
			mp.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mp.AdditionalProperties[key] = val
	}

	*p = PutStateStateKeyResponseValueAcceptedData(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p PutStateStateKeyResponseValueAcceptedData) MarshalJSON() ([]byte, error) {
	if len(p.AdditionalProperties) == 0 {
		return json.Marshal(marshalPutStateStateKeyResponseValueAcceptedData(p))
	}

	return marshalUnion(marshalPutStateStateKeyResponseValueAcceptedData(p), p.AdditionalProperties)
}

// GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK structure is generated from "GetCreditFacilityRepaymentScheduleStateKey/response/ValueOK".
type GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK struct {
	Data                 GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData `json:"data"` // Required.
	AdditionalProperties map[string]interface{}                                        `json:"-"`    // All unmatched properties.
}

type marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK

var knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK = []string{
	"data",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityRepaymentScheduleStateKeyResponseValueOK) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(g))
	}

	return marshalUnion(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOK(g), g.AdditionalProperties)
}

// GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData structure is generated from "GetCreditFacilityRepaymentScheduleStateKey/response/ValueOK->data".
type GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData struct {
	// Repayment_schedule.
	// Payments schedule to repay the current loan.
	// Required.
	Schedule             []RepaymentScheduleItems `json:"schedule"`
	// Repayment_schedule_summary.
	// Required.
	Summary              RepaymentScheduleSummary `json:"summary"`
	AdditionalProperties map[string]interface{}   `json:"-"`        // All unmatched properties.
}

type marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData

var knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData = []string{
	"schedule",
	"summary",
}

// UnmarshalJSON decodes JSON.
func (g *GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData) UnmarshalJSON(data []byte) error {
	var err error

	mg := marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(*g)

	err = json.Unmarshal(data, &mg)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mg.AdditionalProperties == nil {
			mg.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mg.AdditionalProperties[key] = val
	}

	*g = GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(mg)

	return nil
}

// MarshalJSON encodes JSON.
func (g GetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData) MarshalJSON() ([]byte, error) {
	if len(g.AdditionalProperties) == 0 {
		return json.Marshal(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(g))
	}

	return marshalUnion(marshalGetCreditFacilityRepaymentScheduleStateKeyResponseValueOKData(g), g.AdditionalProperties)
}

// CustomerUploadedDocumentDocumentType is an enum type.
type CustomerUploadedDocumentDocumentType string

// CustomerUploadedDocumentDocumentType values enumeration.
const (
	CustomerUploadedDocumentDocumentTypeBankStatement = CustomerUploadedDocumentDocumentType("bank statement")
	CustomerUploadedDocumentDocumentTypeBusinessAccounts = CustomerUploadedDocumentDocumentType("business accounts")
	CustomerUploadedDocumentDocumentTypeVatReturn = CustomerUploadedDocumentDocumentType("vat return")
	CustomerUploadedDocumentDocumentTypeInvoices = CustomerUploadedDocumentDocumentType("invoices")
	CustomerUploadedDocumentDocumentTypePersonalID = CustomerUploadedDocumentDocumentType("personal id")
	CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent = CustomerUploadedDocumentDocumentType("customer broker consent")
	CustomerUploadedDocumentDocumentTypeBalanceSheet = CustomerUploadedDocumentDocumentType("balance sheet")
	CustomerUploadedDocumentDocumentTypeProfitAndLoss = CustomerUploadedDocumentDocumentType("profit and loss")
	CustomerUploadedDocumentDocumentTypeCompanyBylaws = CustomerUploadedDocumentDocumentType("company bylaws")
	CustomerUploadedDocumentDocumentTypeNifCard = CustomerUploadedDocumentDocumentType("nif card")
	CustomerUploadedDocumentDocumentTypeModelo = CustomerUploadedDocumentDocumentType("modelo")
	CustomerUploadedDocumentDocumentTypeManagementAccounts = CustomerUploadedDocumentDocumentType("management accounts")
	CustomerUploadedDocumentDocumentTypeCertificados = CustomerUploadedDocumentDocumentType("certificados")
	CustomerUploadedDocumentDocumentTypeAgedDebtorReport = CustomerUploadedDocumentDocumentType("aged debtor report")
	CustomerUploadedDocumentDocumentTypeBusinessPlan = CustomerUploadedDocumentDocumentType("business plan")
	CustomerUploadedDocumentDocumentTypePnlAndBalance = CustomerUploadedDocumentDocumentType("pnl and balance")
	CustomerUploadedDocumentDocumentTypePersonalBankStatement = CustomerUploadedDocumentDocumentType("personal bank statement")
	CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn = CustomerUploadedDocumentDocumentType("self assessment tax return")
	CustomerUploadedDocumentDocumentTypeArticlesOfAssociation = CustomerUploadedDocumentDocumentType("articles of association")
	CustomerUploadedDocumentDocumentTypeLimitedPartnerID = CustomerUploadedDocumentDocumentType("limited partner id")
	CustomerUploadedDocumentDocumentTypeShareRegistry = CustomerUploadedDocumentDocumentType("share registry")
	CustomerUploadedDocumentDocumentTypeShareholderID = CustomerUploadedDocumentDocumentType("shareholder id")
	CustomerUploadedDocumentDocumentTypeTradeCertificate = CustomerUploadedDocumentDocumentType("trade certificate")
	CustomerUploadedDocumentDocumentTypeCashRegister = CustomerUploadedDocumentDocumentType("cash register")
	CustomerUploadedDocumentDocumentTypeOther = CustomerUploadedDocumentDocumentType("other")
)

// MarshalJSON encodes JSON.
func (i CustomerUploadedDocumentDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case CustomerUploadedDocumentDocumentTypeBankStatement:
	case CustomerUploadedDocumentDocumentTypeBusinessAccounts:
	case CustomerUploadedDocumentDocumentTypeVatReturn:
	case CustomerUploadedDocumentDocumentTypeInvoices:
	case CustomerUploadedDocumentDocumentTypePersonalID:
	case CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent:
	case CustomerUploadedDocumentDocumentTypeBalanceSheet:
	case CustomerUploadedDocumentDocumentTypeProfitAndLoss:
	case CustomerUploadedDocumentDocumentTypeCompanyBylaws:
	case CustomerUploadedDocumentDocumentTypeNifCard:
	case CustomerUploadedDocumentDocumentTypeModelo:
	case CustomerUploadedDocumentDocumentTypeManagementAccounts:
	case CustomerUploadedDocumentDocumentTypeCertificados:
	case CustomerUploadedDocumentDocumentTypeAgedDebtorReport:
	case CustomerUploadedDocumentDocumentTypeBusinessPlan:
	case CustomerUploadedDocumentDocumentTypePnlAndBalance:
	case CustomerUploadedDocumentDocumentTypePersonalBankStatement:
	case CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn:
	case CustomerUploadedDocumentDocumentTypeArticlesOfAssociation:
	case CustomerUploadedDocumentDocumentTypeLimitedPartnerID:
	case CustomerUploadedDocumentDocumentTypeShareRegistry:
	case CustomerUploadedDocumentDocumentTypeShareholderID:
	case CustomerUploadedDocumentDocumentTypeTradeCertificate:
	case CustomerUploadedDocumentDocumentTypeCashRegister:
	case CustomerUploadedDocumentDocumentTypeOther:

	default:
		return nil, fmt.Errorf("unexpected CustomerUploadedDocumentDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CustomerUploadedDocumentDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CustomerUploadedDocumentDocumentType(ii)

	switch v {
	case CustomerUploadedDocumentDocumentTypeBankStatement:
	case CustomerUploadedDocumentDocumentTypeBusinessAccounts:
	case CustomerUploadedDocumentDocumentTypeVatReturn:
	case CustomerUploadedDocumentDocumentTypeInvoices:
	case CustomerUploadedDocumentDocumentTypePersonalID:
	case CustomerUploadedDocumentDocumentTypeCustomerBrokerConsent:
	case CustomerUploadedDocumentDocumentTypeBalanceSheet:
	case CustomerUploadedDocumentDocumentTypeProfitAndLoss:
	case CustomerUploadedDocumentDocumentTypeCompanyBylaws:
	case CustomerUploadedDocumentDocumentTypeNifCard:
	case CustomerUploadedDocumentDocumentTypeModelo:
	case CustomerUploadedDocumentDocumentTypeManagementAccounts:
	case CustomerUploadedDocumentDocumentTypeCertificados:
	case CustomerUploadedDocumentDocumentTypeAgedDebtorReport:
	case CustomerUploadedDocumentDocumentTypeBusinessPlan:
	case CustomerUploadedDocumentDocumentTypePnlAndBalance:
	case CustomerUploadedDocumentDocumentTypePersonalBankStatement:
	case CustomerUploadedDocumentDocumentTypeSelfAssessmentTaxReturn:
	case CustomerUploadedDocumentDocumentTypeArticlesOfAssociation:
	case CustomerUploadedDocumentDocumentTypeLimitedPartnerID:
	case CustomerUploadedDocumentDocumentTypeShareRegistry:
	case CustomerUploadedDocumentDocumentTypeShareholderID:
	case CustomerUploadedDocumentDocumentTypeTradeCertificate:
	case CustomerUploadedDocumentDocumentTypeCashRegister:
	case CustomerUploadedDocumentDocumentTypeOther:

	default:
		return fmt.Errorf("unexpected CustomerUploadedDocumentDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// PostDocumentUploadStateKeyRequestFormDataDocumentType is an enum type.
type PostDocumentUploadStateKeyRequestFormDataDocumentType string

// PostDocumentUploadStateKeyRequestFormDataDocumentType values enumeration.
const (
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement = PostDocumentUploadStateKeyRequestFormDataDocumentType("bank statement")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("business accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn = PostDocumentUploadStateKeyRequestFormDataDocumentType("vat return")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices = PostDocumentUploadStateKeyRequestFormDataDocumentType("invoices")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID = PostDocumentUploadStateKeyRequestFormDataDocumentType("personal id")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent = PostDocumentUploadStateKeyRequestFormDataDocumentType("customer broker consent")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet = PostDocumentUploadStateKeyRequestFormDataDocumentType("balance sheet")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss = PostDocumentUploadStateKeyRequestFormDataDocumentType("profit and loss")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws = PostDocumentUploadStateKeyRequestFormDataDocumentType("company bylaws")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard = PostDocumentUploadStateKeyRequestFormDataDocumentType("nif card")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo = PostDocumentUploadStateKeyRequestFormDataDocumentType("modelo")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("management accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport = PostDocumentUploadStateKeyRequestFormDataDocumentType("aged debtor report")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan = PostDocumentUploadStateKeyRequestFormDataDocumentType("business plan")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement = PostDocumentUploadStateKeyRequestFormDataDocumentType("personal bank statement")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeArticlesOfAssociation = PostDocumentUploadStateKeyRequestFormDataDocumentType("articles of association")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeLimitedPartnerID = PostDocumentUploadStateKeyRequestFormDataDocumentType("limited partner id")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareRegistry = PostDocumentUploadStateKeyRequestFormDataDocumentType("share registry")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareholderID = PostDocumentUploadStateKeyRequestFormDataDocumentType("shareholder id")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeTradeCertificate = PostDocumentUploadStateKeyRequestFormDataDocumentType("trade certificate")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister = PostDocumentUploadStateKeyRequestFormDataDocumentType("cash register")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther = PostDocumentUploadStateKeyRequestFormDataDocumentType("other")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders = PostDocumentUploadStateKeyRequestFormDataDocumentType("list of shareholders")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAndBalanceAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("management and balance accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("year end management accounts")
	PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAndBalanceAccounts = PostDocumentUploadStateKeyRequestFormDataDocumentType("year end management and balance accounts")
)

// MarshalJSON encodes JSON.
func (i PostDocumentUploadStateKeyRequestFormDataDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeArticlesOfAssociation:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeLimitedPartnerID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareRegistry:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareholderID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeTradeCertificate:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAndBalanceAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAndBalanceAccounts:

	default:
		return nil, fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestFormDataDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostDocumentUploadStateKeyRequestFormDataDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostDocumentUploadStateKeyRequestFormDataDocumentType(ii)

	switch v {
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeArticlesOfAssociation:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeLimitedPartnerID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareRegistry:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeShareholderID:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeTradeCertificate:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeManagementAndBalanceAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAccounts:
	case PostDocumentUploadStateKeyRequestFormDataDocumentTypeYearEndManagementAndBalanceAccounts:

	default:
		return fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestFormDataDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// PostDocumentUploadStateKeyRequestDocumentType is an enum type.
type PostDocumentUploadStateKeyRequestDocumentType string

// PostDocumentUploadStateKeyRequestDocumentType values enumeration.
const (
	PostDocumentUploadStateKeyRequestDocumentTypeBankStatement = PostDocumentUploadStateKeyRequestDocumentType("bank statement")
	PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts = PostDocumentUploadStateKeyRequestDocumentType("business accounts")
	PostDocumentUploadStateKeyRequestDocumentTypeVatReturn = PostDocumentUploadStateKeyRequestDocumentType("vat return")
	PostDocumentUploadStateKeyRequestDocumentTypeInvoices = PostDocumentUploadStateKeyRequestDocumentType("invoices")
	PostDocumentUploadStateKeyRequestDocumentTypePersonalID = PostDocumentUploadStateKeyRequestDocumentType("personal id")
	PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent = PostDocumentUploadStateKeyRequestDocumentType("customer broker consent")
	PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet = PostDocumentUploadStateKeyRequestDocumentType("balance sheet")
	PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss = PostDocumentUploadStateKeyRequestDocumentType("profit and loss")
	PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws = PostDocumentUploadStateKeyRequestDocumentType("company bylaws")
	PostDocumentUploadStateKeyRequestDocumentTypeNifCard = PostDocumentUploadStateKeyRequestDocumentType("nif card")
	PostDocumentUploadStateKeyRequestDocumentTypeModelo = PostDocumentUploadStateKeyRequestDocumentType("modelo")
	PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts = PostDocumentUploadStateKeyRequestDocumentType("management accounts")
	PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport = PostDocumentUploadStateKeyRequestDocumentType("aged debtor report")
	PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan = PostDocumentUploadStateKeyRequestDocumentType("business plan")
	PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement = PostDocumentUploadStateKeyRequestDocumentType("personal bank statement")
	PostDocumentUploadStateKeyRequestDocumentTypeArticlesOfAssociation = PostDocumentUploadStateKeyRequestDocumentType("articles of association")
	PostDocumentUploadStateKeyRequestDocumentTypeLimitedPartnerID = PostDocumentUploadStateKeyRequestDocumentType("limited partner id")
	PostDocumentUploadStateKeyRequestDocumentTypeShareRegistry = PostDocumentUploadStateKeyRequestDocumentType("share registry")
	PostDocumentUploadStateKeyRequestDocumentTypeShareholderID = PostDocumentUploadStateKeyRequestDocumentType("shareholder id")
	PostDocumentUploadStateKeyRequestDocumentTypeTradeCertificate = PostDocumentUploadStateKeyRequestDocumentType("trade certificate")
	PostDocumentUploadStateKeyRequestDocumentTypeCashRegister = PostDocumentUploadStateKeyRequestDocumentType("cash register")
	PostDocumentUploadStateKeyRequestDocumentTypeOther = PostDocumentUploadStateKeyRequestDocumentType("other")
	PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders = PostDocumentUploadStateKeyRequestDocumentType("list of shareholders")
	PostDocumentUploadStateKeyRequestDocumentTypeManagementAndBalanceAccounts = PostDocumentUploadStateKeyRequestDocumentType("management and balance accounts")
	PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAccounts = PostDocumentUploadStateKeyRequestDocumentType("year end management accounts")
	PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAndBalanceAccounts = PostDocumentUploadStateKeyRequestDocumentType("year end management and balance accounts")
)

// MarshalJSON encodes JSON.
func (i PostDocumentUploadStateKeyRequestDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostDocumentUploadStateKeyRequestDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeArticlesOfAssociation:
	case PostDocumentUploadStateKeyRequestDocumentTypeLimitedPartnerID:
	case PostDocumentUploadStateKeyRequestDocumentTypeShareRegistry:
	case PostDocumentUploadStateKeyRequestDocumentTypeShareholderID:
	case PostDocumentUploadStateKeyRequestDocumentTypeTradeCertificate:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAndBalanceAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAndBalanceAccounts:

	default:
		return nil, fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostDocumentUploadStateKeyRequestDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostDocumentUploadStateKeyRequestDocumentType(ii)

	switch v {
	case PostDocumentUploadStateKeyRequestDocumentTypeBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeVatReturn:
	case PostDocumentUploadStateKeyRequestDocumentTypeInvoices:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalID:
	case PostDocumentUploadStateKeyRequestDocumentTypeCustomerBrokerConsent:
	case PostDocumentUploadStateKeyRequestDocumentTypeBalanceSheet:
	case PostDocumentUploadStateKeyRequestDocumentTypeProfitAndLoss:
	case PostDocumentUploadStateKeyRequestDocumentTypeCompanyBylaws:
	case PostDocumentUploadStateKeyRequestDocumentTypeNifCard:
	case PostDocumentUploadStateKeyRequestDocumentTypeModelo:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeAgedDebtorReport:
	case PostDocumentUploadStateKeyRequestDocumentTypeBusinessPlan:
	case PostDocumentUploadStateKeyRequestDocumentTypePersonalBankStatement:
	case PostDocumentUploadStateKeyRequestDocumentTypeArticlesOfAssociation:
	case PostDocumentUploadStateKeyRequestDocumentTypeLimitedPartnerID:
	case PostDocumentUploadStateKeyRequestDocumentTypeShareRegistry:
	case PostDocumentUploadStateKeyRequestDocumentTypeShareholderID:
	case PostDocumentUploadStateKeyRequestDocumentTypeTradeCertificate:
	case PostDocumentUploadStateKeyRequestDocumentTypeCashRegister:
	case PostDocumentUploadStateKeyRequestDocumentTypeOther:
	case PostDocumentUploadStateKeyRequestDocumentTypeListOfShareholders:
	case PostDocumentUploadStateKeyRequestDocumentTypeManagementAndBalanceAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAccounts:
	case PostDocumentUploadStateKeyRequestDocumentTypeYearEndManagementAndBalanceAccounts:

	default:
		return fmt.Errorf("unexpected PostDocumentUploadStateKeyRequestDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsItemsItemsStatus is an enum type.
type DataRequirementResolutionMethodsItemsItemsItemsStatus string

// DataRequirementResolutionMethodsItemsItemsItemsStatus values enumeration.
const (
	DataRequirementResolutionMethodsItemsItemsItemsStatusPending = DataRequirementResolutionMethodsItemsItemsItemsStatus("pending")
	DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted = DataRequirementResolutionMethodsItemsItemsItemsStatus("completed")
	DataRequirementResolutionMethodsItemsItemsItemsStatusFailed = DataRequirementResolutionMethodsItemsItemsItemsStatus("failed")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsItemsItemsStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsItemsItemsStatusPending:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusFailed:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsItemsItemsStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsItemsItemsStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsItemsItemsStatus(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsItemsItemsStatusPending:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusCompleted:
	case DataRequirementResolutionMethodsItemsItemsItemsStatusFailed:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsItemsItemsStatus value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsStatusType is an enum type.
type DataRequirementResolutionMethodsItemsStatusType string

// DataRequirementResolutionMethodsItemsStatusType values enumeration.
const (
	DataRequirementResolutionMethodsItemsStatusTypeNoActionYet = DataRequirementResolutionMethodsItemsStatusType("no_action_yet")
	DataRequirementResolutionMethodsItemsStatusTypePending = DataRequirementResolutionMethodsItemsStatusType("pending")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsStatusType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsStatusTypeNoActionYet:
	case DataRequirementResolutionMethodsItemsStatusTypePending:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsStatusType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsStatusType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsStatusType(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsStatusTypeNoActionYet:
	case DataRequirementResolutionMethodsItemsStatusTypePending:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsStatusType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementResolutionMethodsItemsType is an enum type.
type DataRequirementResolutionMethodsItemsType string

// DataRequirementResolutionMethodsItemsType values enumeration.
const (
	DataRequirementResolutionMethodsItemsTypeFileUpload = DataRequirementResolutionMethodsItemsType("file_upload")
	DataRequirementResolutionMethodsItemsTypeAccountLinking = DataRequirementResolutionMethodsItemsType("account_linking")
	DataRequirementResolutionMethodsItemsTypeDataSubmit = DataRequirementResolutionMethodsItemsType("data_submit")
)

// MarshalJSON encodes JSON.
func (i DataRequirementResolutionMethodsItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementResolutionMethodsItemsTypeFileUpload:
	case DataRequirementResolutionMethodsItemsTypeAccountLinking:
	case DataRequirementResolutionMethodsItemsTypeDataSubmit:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementResolutionMethodsItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementResolutionMethodsItemsType(ii)

	switch v {
	case DataRequirementResolutionMethodsItemsTypeFileUpload:
	case DataRequirementResolutionMethodsItemsTypeAccountLinking:
	case DataRequirementResolutionMethodsItemsTypeDataSubmit:

	default:
		return fmt.Errorf("unexpected DataRequirementResolutionMethodsItemsType value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementStatus is an enum type.
type DataRequirementStatus string

// DataRequirementStatus values enumeration.
const (
	DataRequirementStatusRequired = DataRequirementStatus("required")
	DataRequirementStatusPending = DataRequirementStatus("pending")
	DataRequirementStatusCompleted = DataRequirementStatus("completed")
)

// MarshalJSON encodes JSON.
func (i DataRequirementStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementStatusRequired:
	case DataRequirementStatusPending:
	case DataRequirementStatusCompleted:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementStatus(ii)

	switch v {
	case DataRequirementStatusRequired:
	case DataRequirementStatusPending:
	case DataRequirementStatusCompleted:

	default:
		return fmt.Errorf("unexpected DataRequirementStatus value: %v", v)
	}

	*i = v

	return nil
}

// DataRequirementType is an enum type.
type DataRequirementType string

// DataRequirementType values enumeration.
const (
	DataRequirementTypeCc = DataRequirementType("cc")
	DataRequirementTypeBusCc = DataRequirementType("bus_cc")
	DataRequirementTypeDirGuarantor = DataRequirementType("dir_guarantor")
	DataRequirementTypeFraud = DataRequirementType("fraud")
	DataRequirementTypeDocs = DataRequirementType("docs")
	DataRequirementTypeEnhancedSecurityCheck = DataRequirementType("enhanced_security_check")
)

// MarshalJSON encodes JSON.
func (i DataRequirementType) MarshalJSON() ([]byte, error) {
	switch i {
	case DataRequirementTypeCc:
	case DataRequirementTypeBusCc:
	case DataRequirementTypeDirGuarantor:
	case DataRequirementTypeFraud:
	case DataRequirementTypeDocs:
	case DataRequirementTypeEnhancedSecurityCheck:

	default:
		return nil, fmt.Errorf("unexpected DataRequirementType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *DataRequirementType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := DataRequirementType(ii)

	switch v {
	case DataRequirementTypeCc:
	case DataRequirementTypeBusCc:
	case DataRequirementTypeDirGuarantor:
	case DataRequirementTypeFraud:
	case DataRequirementTypeDocs:
	case DataRequirementTypeEnhancedSecurityCheck:

	default:
		return fmt.Errorf("unexpected DataRequirementType value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalPromotionsItems is an enum type.
type ApprovalPromotionsItems string

// ApprovalPromotionsItems values enumeration.
const (
	ApprovalPromotionsItemsFirstMonthInterestFree = ApprovalPromotionsItems("first_month_interest_free")
	ApprovalPromotionsItemsThreeMonthsInterestFree = ApprovalPromotionsItems("three_months_interest_free")
	ApprovalPromotionsItemsFirstMonthHalfInterest = ApprovalPromotionsItems("first_month_half_interest")
)

// MarshalJSON encodes JSON.
func (i ApprovalPromotionsItems) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalPromotionsItemsFirstMonthInterestFree:
	case ApprovalPromotionsItemsThreeMonthsInterestFree:
	case ApprovalPromotionsItemsFirstMonthHalfInterest:

	default:
		return nil, fmt.Errorf("unexpected ApprovalPromotionsItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalPromotionsItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalPromotionsItems(ii)

	switch v {
	case ApprovalPromotionsItemsFirstMonthInterestFree:
	case ApprovalPromotionsItemsThreeMonthsInterestFree:
	case ApprovalPromotionsItemsFirstMonthHalfInterest:

	default:
		return fmt.Errorf("unexpected ApprovalPromotionsItems value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalStatusStatus is an enum type.
type ApprovalStatusStatus string

// ApprovalStatusStatus values enumeration.
const (
	ApprovalStatusStatusApproved = ApprovalStatusStatus("approved")
	ApprovalStatusStatusDeclined = ApprovalStatusStatus("declined")
	ApprovalStatusStatusDeferred = ApprovalStatusStatus("deferred")
)

// MarshalJSON encodes JSON.
func (i ApprovalStatusStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalStatusStatusApproved:
	case ApprovalStatusStatusDeclined:
	case ApprovalStatusStatusDeferred:

	default:
		return nil, fmt.Errorf("unexpected ApprovalStatusStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalStatusStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalStatusStatus(ii)

	switch v {
	case ApprovalStatusStatusApproved:
	case ApprovalStatusStatusDeclined:
	case ApprovalStatusStatusDeferred:

	default:
		return fmt.Errorf("unexpected ApprovalStatusStatus value: %v", v)
	}

	*i = v

	return nil
}

// ApprovalRequestStatus is an enum type.
type ApprovalRequestStatus string

// ApprovalRequestStatus values enumeration.
const (
	ApprovalRequestStatusPending = ApprovalRequestStatus("pending")
	ApprovalRequestStatusDecisionMade = ApprovalRequestStatus("decision_made")
	ApprovalRequestStatusNoDecisionPossible = ApprovalRequestStatus("no_decision_possible")
	ApprovalRequestStatusUnderManualReview = ApprovalRequestStatus("under_manual_review")
)

// MarshalJSON encodes JSON.
func (i ApprovalRequestStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case ApprovalRequestStatusPending:
	case ApprovalRequestStatusDecisionMade:
	case ApprovalRequestStatusNoDecisionPossible:
	case ApprovalRequestStatusUnderManualReview:

	default:
		return nil, fmt.Errorf("unexpected ApprovalRequestStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ApprovalRequestStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ApprovalRequestStatus(ii)

	switch v {
	case ApprovalRequestStatusPending:
	case ApprovalRequestStatusDecisionMade:
	case ApprovalRequestStatusNoDecisionPossible:
	case ApprovalRequestStatusUnderManualReview:

	default:
		return fmt.Errorf("unexpected ApprovalRequestStatus value: %v", v)
	}

	*i = v

	return nil
}

// WebhookPaymentInstructionDirection is an enum type.
type WebhookPaymentInstructionDirection string

// WebhookPaymentInstructionDirection values enumeration.
const (
	WebhookPaymentInstructionDirectionIwocaToCustomer = WebhookPaymentInstructionDirection("iwoca_to_customer")
	WebhookPaymentInstructionDirectionCustomerToIwoca = WebhookPaymentInstructionDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i WebhookPaymentInstructionDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case WebhookPaymentInstructionDirectionIwocaToCustomer:
	case WebhookPaymentInstructionDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected WebhookPaymentInstructionDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *WebhookPaymentInstructionDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := WebhookPaymentInstructionDirection(ii)

	switch v {
	case WebhookPaymentInstructionDirectionIwocaToCustomer:
	case WebhookPaymentInstructionDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected WebhookPaymentInstructionDirection value: %v", v)
	}

	*i = v

	return nil
}

// PostPartnerWebhookURLRequestHeaderXIWEventType is an enum type.
type PostPartnerWebhookURLRequestHeaderXIWEventType string

// PostPartnerWebhookURLRequestHeaderXIWEventType values enumeration.
const (
	PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged = PostPartnerWebhookURLRequestHeaderXIWEventType("approval_status_changed")
	PostPartnerWebhookURLRequestHeaderXIWEventTypeCashflowAdded = PostPartnerWebhookURLRequestHeaderXIWEventType("cashflow_added")
	PostPartnerWebhookURLRequestHeaderXIWEventTypeArrangementCreated = PostPartnerWebhookURLRequestHeaderXIWEventType("arrangement_created")
	PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments = PostPartnerWebhookURLRequestHeaderXIWEventType("instruct_payments")
)

// MarshalJSON encodes JSON.
func (i PostPartnerWebhookURLRequestHeaderXIWEventType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeCashflowAdded:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeArrangementCreated:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments:

	default:
		return nil, fmt.Errorf("unexpected PostPartnerWebhookURLRequestHeaderXIWEventType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostPartnerWebhookURLRequestHeaderXIWEventType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostPartnerWebhookURLRequestHeaderXIWEventType(ii)

	switch v {
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeCashflowAdded:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeArrangementCreated:
	case PostPartnerWebhookURLRequestHeaderXIWEventTypeInstructPayments:

	default:
		return fmt.Errorf("unexpected PostPartnerWebhookURLRequestHeaderXIWEventType value: %v", v)
	}

	*i = v

	return nil
}

// PostPartnerWebhookURLRequestXIWEventType is an enum type.
type PostPartnerWebhookURLRequestXIWEventType string

// PostPartnerWebhookURLRequestXIWEventType values enumeration.
const (
	PostPartnerWebhookURLRequestXIWEventTypeApprovalStatusChanged = PostPartnerWebhookURLRequestXIWEventType("approval_status_changed")
	PostPartnerWebhookURLRequestXIWEventTypeCashflowAdded = PostPartnerWebhookURLRequestXIWEventType("cashflow_added")
	PostPartnerWebhookURLRequestXIWEventTypeArrangementCreated = PostPartnerWebhookURLRequestXIWEventType("arrangement_created")
	PostPartnerWebhookURLRequestXIWEventTypeInstructPayments = PostPartnerWebhookURLRequestXIWEventType("instruct_payments")
)

// MarshalJSON encodes JSON.
func (i PostPartnerWebhookURLRequestXIWEventType) MarshalJSON() ([]byte, error) {
	switch i {
	case PostPartnerWebhookURLRequestXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestXIWEventTypeCashflowAdded:
	case PostPartnerWebhookURLRequestXIWEventTypeArrangementCreated:
	case PostPartnerWebhookURLRequestXIWEventTypeInstructPayments:

	default:
		return nil, fmt.Errorf("unexpected PostPartnerWebhookURLRequestXIWEventType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PostPartnerWebhookURLRequestXIWEventType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PostPartnerWebhookURLRequestXIWEventType(ii)

	switch v {
	case PostPartnerWebhookURLRequestXIWEventTypeApprovalStatusChanged:
	case PostPartnerWebhookURLRequestXIWEventTypeCashflowAdded:
	case PostPartnerWebhookURLRequestXIWEventTypeArrangementCreated:
	case PostPartnerWebhookURLRequestXIWEventTypeInstructPayments:

	default:
		return fmt.Errorf("unexpected PostPartnerWebhookURLRequestXIWEventType value: %v", v)
	}

	*i = v

	return nil
}

// PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType is an enum type.
type PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType string

// PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType values enumeration.
const (
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("bank statement")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("business accounts")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("vat return")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("invoices")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("personal id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("customer broker consent")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("balance sheet")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("profit and loss")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("company bylaws")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("nif card")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("modelo")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("management accounts")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("certificados")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("aged debtor report")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("business plan")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("pnl and balance")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("personal bank statement")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("self assessment tax return")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("articles of association")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("limited partner id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("share registry")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("shareholder id")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("trade certificate")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("cash register")
	PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther = PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType("other")
)

// MarshalJSON encodes JSON.
func (i PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther:

	default:
		return nil, fmt.Errorf("unexpected PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType(ii)

	switch v {
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeVatReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeInvoices:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCustomerBrokerConsent:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBalanceSheet:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeProfitAndLoss:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCompanyBylaws:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeNifCard:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeModelo:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeManagementAccounts:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCertificados:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeAgedDebtorReport:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeBusinessPlan:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePnlAndBalance:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypePersonalBankStatement:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeSelfAssessmentTaxReturn:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeArticlesOfAssociation:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeLimitedPartnerID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareRegistry:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeShareholderID:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeTradeCertificate:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeCashRegister:
	case PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentTypeOther:

	default:
		return fmt.Errorf("unexpected PutDocumentUploadStateKeyDocumentIDRequestBodyDataDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataCashflowsItemsDirection is an enum type.
type CreditFacilityStatusDataCashflowsItemsDirection string

// CreditFacilityStatusDataCashflowsItemsDirection values enumeration.
const (
	CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer = CreditFacilityStatusDataCashflowsItemsDirection("iwoca_to_customer")
	CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca = CreditFacilityStatusDataCashflowsItemsDirection("customer_to_iwoca")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataCashflowsItemsDirection) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer:
	case CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsDirection value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataCashflowsItemsDirection) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataCashflowsItemsDirection(ii)

	switch v {
	case CreditFacilityStatusDataCashflowsItemsDirectionIwocaToCustomer:
	case CreditFacilityStatusDataCashflowsItemsDirectionCustomerToIwoca:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsDirection value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataCashflowsItemsType is an enum type.
type CreditFacilityStatusDataCashflowsItemsType string

// CreditFacilityStatusDataCashflowsItemsType values enumeration.
const (
	CreditFacilityStatusDataCashflowsItemsTypeFunding = CreditFacilityStatusDataCashflowsItemsType("funding")
	CreditFacilityStatusDataCashflowsItemsTypeRepayment = CreditFacilityStatusDataCashflowsItemsType("repayment")
	CreditFacilityStatusDataCashflowsItemsTypeReimbursement = CreditFacilityStatusDataCashflowsItemsType("reimbursement")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataCashflowsItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataCashflowsItemsTypeFunding:
	case CreditFacilityStatusDataCashflowsItemsTypeRepayment:
	case CreditFacilityStatusDataCashflowsItemsTypeReimbursement:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataCashflowsItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataCashflowsItemsType(ii)

	switch v {
	case CreditFacilityStatusDataCashflowsItemsTypeFunding:
	case CreditFacilityStatusDataCashflowsItemsTypeRepayment:
	case CreditFacilityStatusDataCashflowsItemsTypeReimbursement:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataCashflowsItemsType value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityStatusDataLoanStatus is an enum type.
type CreditFacilityStatusDataLoanStatus string

// CreditFacilityStatusDataLoanStatus values enumeration.
const (
	CreditFacilityStatusDataLoanStatusOngoing = CreditFacilityStatusDataLoanStatus("ongoing")
	CreditFacilityStatusDataLoanStatusEnded = CreditFacilityStatusDataLoanStatus("ended")
	CreditFacilityStatusDataLoanStatusTopup = CreditFacilityStatusDataLoanStatus("topup")
	CreditFacilityStatusDataLoanStatusPending = CreditFacilityStatusDataLoanStatus("pending")
	CreditFacilityStatusDataLoanStatusOverdue = CreditFacilityStatusDataLoanStatus("overdue")
	CreditFacilityStatusDataLoanStatusDuetoday = CreditFacilityStatusDataLoanStatus("duetoday")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityStatusDataLoanStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityStatusDataLoanStatusOngoing:
	case CreditFacilityStatusDataLoanStatusEnded:
	case CreditFacilityStatusDataLoanStatusTopup:
	case CreditFacilityStatusDataLoanStatusPending:
	case CreditFacilityStatusDataLoanStatusOverdue:
	case CreditFacilityStatusDataLoanStatusDuetoday:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityStatusDataLoanStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityStatusDataLoanStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityStatusDataLoanStatus(ii)

	switch v {
	case CreditFacilityStatusDataLoanStatusOngoing:
	case CreditFacilityStatusDataLoanStatusEnded:
	case CreditFacilityStatusDataLoanStatusTopup:
	case CreditFacilityStatusDataLoanStatusPending:
	case CreditFacilityStatusDataLoanStatusOverdue:
	case CreditFacilityStatusDataLoanStatusDuetoday:

	default:
		return fmt.Errorf("unexpected CreditFacilityStatusDataLoanStatus value: %v", v)
	}

	*i = v

	return nil
}

// RepaymentScheduleSummaryAnnualInterestRateRateType is an enum type.
type RepaymentScheduleSummaryAnnualInterestRateRateType string

// RepaymentScheduleSummaryAnnualInterestRateRateType values enumeration.
const (
	RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed = RepaymentScheduleSummaryAnnualInterestRateRateType("fixed")
	RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable = RepaymentScheduleSummaryAnnualInterestRateRateType("variable")
)

// MarshalJSON encodes JSON.
func (i RepaymentScheduleSummaryAnnualInterestRateRateType) MarshalJSON() ([]byte, error) {
	switch i {
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed:
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable:

	default:
		return nil, fmt.Errorf("unexpected RepaymentScheduleSummaryAnnualInterestRateRateType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *RepaymentScheduleSummaryAnnualInterestRateRateType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := RepaymentScheduleSummaryAnnualInterestRateRateType(ii)

	switch v {
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeFixed:
	case RepaymentScheduleSummaryAnnualInterestRateRateTypeVariable:

	default:
		return fmt.Errorf("unexpected RepaymentScheduleSummaryAnnualInterestRateRateType value: %v", v)
	}

	*i = v

	return nil
}

// CompanyAddressCountry is an enum type.
type CompanyAddressCountry string

// CompanyAddressCountry values enumeration.
const (
	CompanyAddressCountryGB = CompanyAddressCountry("GB")
	CompanyAddressCountryDE = CompanyAddressCountry("DE")
	CompanyAddressCountryPL = CompanyAddressCountry("PL")
	CompanyAddressCountryOTHER = CompanyAddressCountry("OTHER")
)

// MarshalJSON encodes JSON.
func (i CompanyAddressCountry) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyAddressCountryGB:
	case CompanyAddressCountryDE:
	case CompanyAddressCountryPL:
	case CompanyAddressCountryOTHER:

	default:
		return nil, fmt.Errorf("unexpected CompanyAddressCountry value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyAddressCountry) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyAddressCountry(ii)

	switch v {
	case CompanyAddressCountryGB:
	case CompanyAddressCountryDE:
	case CompanyAddressCountryPL:
	case CompanyAddressCountryOTHER:

	default:
		return fmt.Errorf("unexpected CompanyAddressCountry value: %v", v)
	}

	*i = v

	return nil
}

// CompanyThirdPartyProvidersItemsType is an enum type.
type CompanyThirdPartyProvidersItemsType string

// CompanyThirdPartyProvidersItemsType values enumeration.
const (
	CompanyThirdPartyProvidersItemsTypeEcommerce = CompanyThirdPartyProvidersItemsType("ecommerce")
	CompanyThirdPartyProvidersItemsTypeSoftware = CompanyThirdPartyProvidersItemsType("software")
	CompanyThirdPartyProvidersItemsTypeBank = CompanyThirdPartyProvidersItemsType("bank")
)

// MarshalJSON encodes JSON.
func (i CompanyThirdPartyProvidersItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyThirdPartyProvidersItemsTypeEcommerce:
	case CompanyThirdPartyProvidersItemsTypeSoftware:
	case CompanyThirdPartyProvidersItemsTypeBank:

	default:
		return nil, fmt.Errorf("unexpected CompanyThirdPartyProvidersItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyThirdPartyProvidersItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyThirdPartyProvidersItemsType(ii)

	switch v {
	case CompanyThirdPartyProvidersItemsTypeEcommerce:
	case CompanyThirdPartyProvidersItemsTypeSoftware:
	case CompanyThirdPartyProvidersItemsTypeBank:

	default:
		return fmt.Errorf("unexpected CompanyThirdPartyProvidersItemsType value: %v", v)
	}

	*i = v

	return nil
}

// CompanyType is an enum type.
type CompanyType string

// CompanyType values enumeration.
const (
	CompanyTypeFreiberufler = CompanyType("freiberufler")
	CompanyTypeGewerbebetrieb = CompanyType("gewerbebetrieb")
	CompanyTypeGewerbebetriebEingtr = CompanyType("gewerbebetrieb_eingtr")
	CompanyTypeEk = CompanyType("ek")
	CompanyTypeEg = CompanyType("eg")
	CompanyTypeGbr = CompanyType("gbr")
	CompanyTypeOhg = CompanyType("ohg")
	CompanyTypeKg = CompanyType("kg")
	CompanyTypePartnerschaft = CompanyType("partnerschaft")
	CompanyTypeGemeinnuetzigerVerein = CompanyType("gemeinnuetziger_verein")
	CompanyTypeNichtGemeinnuetzigerVerein = CompanyType("nicht_gemeinnuetziger_verein")
	CompanyTypeUg = CompanyType("ug")
	CompanyTypeGmbh = CompanyType("gmbh")
	CompanyTypeGmbhUCoKg = CompanyType("gmbh_u_co_kg")
	CompanyTypeAktiengesellschaft = CompanyType("aktiengesellschaft")
	CompanyTypeLtd = CompanyType("ltd")
	CompanyTypeKgaa = CompanyType("kgaa")
	CompanyTypeAndere = CompanyType("andere")
)

// MarshalJSON encodes JSON.
func (i CompanyType) MarshalJSON() ([]byte, error) {
	switch i {
	case CompanyTypeFreiberufler:
	case CompanyTypeGewerbebetrieb:
	case CompanyTypeGewerbebetriebEingtr:
	case CompanyTypeEk:
	case CompanyTypeEg:
	case CompanyTypeGbr:
	case CompanyTypeOhg:
	case CompanyTypeKg:
	case CompanyTypePartnerschaft:
	case CompanyTypeGemeinnuetzigerVerein:
	case CompanyTypeNichtGemeinnuetzigerVerein:
	case CompanyTypeUg:
	case CompanyTypeGmbh:
	case CompanyTypeGmbhUCoKg:
	case CompanyTypeAktiengesellschaft:
	case CompanyTypeLtd:
	case CompanyTypeKgaa:
	case CompanyTypeAndere:

	default:
		return nil, fmt.Errorf("unexpected CompanyType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CompanyType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CompanyType(ii)

	switch v {
	case CompanyTypeFreiberufler:
	case CompanyTypeGewerbebetrieb:
	case CompanyTypeGewerbebetriebEingtr:
	case CompanyTypeEk:
	case CompanyTypeEg:
	case CompanyTypeGbr:
	case CompanyTypeOhg:
	case CompanyTypeKg:
	case CompanyTypePartnerschaft:
	case CompanyTypeGemeinnuetzigerVerein:
	case CompanyTypeNichtGemeinnuetzigerVerein:
	case CompanyTypeUg:
	case CompanyTypeGmbh:
	case CompanyTypeGmbhUCoKg:
	case CompanyTypeAktiengesellschaft:
	case CompanyTypeLtd:
	case CompanyTypeKgaa:
	case CompanyTypeAndere:

	default:
		return fmt.Errorf("unexpected CompanyType value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityRequestApprovalPurpose is an enum type.
type CreditFacilityRequestApprovalPurpose string

// CreditFacilityRequestApprovalPurpose values enumeration.
const (
	CreditFacilityRequestApprovalPurposeStockPurchase = CreditFacilityRequestApprovalPurpose("stock_purchase")
	CreditFacilityRequestApprovalPurposeBridgingLoan = CreditFacilityRequestApprovalPurpose("bridging_loan")
	CreditFacilityRequestApprovalPurposeMarketing = CreditFacilityRequestApprovalPurpose("marketing")
	CreditFacilityRequestApprovalPurposeEquipmentPurchase = CreditFacilityRequestApprovalPurpose("equipment_purchase")
	CreditFacilityRequestApprovalPurposePayBill = CreditFacilityRequestApprovalPurpose("pay_bill")
	CreditFacilityRequestApprovalPurposePayStaff = CreditFacilityRequestApprovalPurpose("pay_staff")
	CreditFacilityRequestApprovalPurposeRefinancingDebt = CreditFacilityRequestApprovalPurpose("refinancing_debt")
	CreditFacilityRequestApprovalPurposeFinancingClientOrder = CreditFacilityRequestApprovalPurpose("financing_client_order")
	CreditFacilityRequestApprovalPurposePayTaxBill = CreditFacilityRequestApprovalPurpose("pay_tax_bill")
	CreditFacilityRequestApprovalPurposeOther = CreditFacilityRequestApprovalPurpose("other")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityRequestApprovalPurpose) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityRequestApprovalPurposeStockPurchase:
	case CreditFacilityRequestApprovalPurposeBridgingLoan:
	case CreditFacilityRequestApprovalPurposeMarketing:
	case CreditFacilityRequestApprovalPurposeEquipmentPurchase:
	case CreditFacilityRequestApprovalPurposePayBill:
	case CreditFacilityRequestApprovalPurposePayStaff:
	case CreditFacilityRequestApprovalPurposeRefinancingDebt:
	case CreditFacilityRequestApprovalPurposeFinancingClientOrder:
	case CreditFacilityRequestApprovalPurposePayTaxBill:
	case CreditFacilityRequestApprovalPurposeOther:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityRequestApprovalPurpose value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityRequestApprovalPurpose) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityRequestApprovalPurpose(ii)

	switch v {
	case CreditFacilityRequestApprovalPurposeStockPurchase:
	case CreditFacilityRequestApprovalPurposeBridgingLoan:
	case CreditFacilityRequestApprovalPurposeMarketing:
	case CreditFacilityRequestApprovalPurposeEquipmentPurchase:
	case CreditFacilityRequestApprovalPurposePayBill:
	case CreditFacilityRequestApprovalPurposePayStaff:
	case CreditFacilityRequestApprovalPurposeRefinancingDebt:
	case CreditFacilityRequestApprovalPurposeFinancingClientOrder:
	case CreditFacilityRequestApprovalPurposePayTaxBill:
	case CreditFacilityRequestApprovalPurposeOther:

	default:
		return fmt.Errorf("unexpected CreditFacilityRequestApprovalPurpose value: %v", v)
	}

	*i = v

	return nil
}

// CreditFacilityRequestApprovalUrgency is an enum type.
type CreditFacilityRequestApprovalUrgency string

// CreditFacilityRequestApprovalUrgency values enumeration.
const (
	CreditFacilityRequestApprovalUrgencyAsap = CreditFacilityRequestApprovalUrgency("asap")
	CreditFacilityRequestApprovalUrgencyWeeks = CreditFacilityRequestApprovalUrgency("weeks")
	CreditFacilityRequestApprovalUrgencyFutureUse = CreditFacilityRequestApprovalUrgency("future_use")
)

// MarshalJSON encodes JSON.
func (i CreditFacilityRequestApprovalUrgency) MarshalJSON() ([]byte, error) {
	switch i {
	case CreditFacilityRequestApprovalUrgencyAsap:
	case CreditFacilityRequestApprovalUrgencyWeeks:
	case CreditFacilityRequestApprovalUrgencyFutureUse:

	default:
		return nil, fmt.Errorf("unexpected CreditFacilityRequestApprovalUrgency value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CreditFacilityRequestApprovalUrgency) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CreditFacilityRequestApprovalUrgency(ii)

	switch v {
	case CreditFacilityRequestApprovalUrgencyAsap:
	case CreditFacilityRequestApprovalUrgencyWeeks:
	case CreditFacilityRequestApprovalUrgencyFutureUse:

	default:
		return fmt.Errorf("unexpected CreditFacilityRequestApprovalUrgency value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("document_scan")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("photo")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("video")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType("archive")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeDocumentScan:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypePhoto:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeVideo:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileTypeArchive:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsFileLinksItemsFileType value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("passport")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("driving_licence")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("national_id")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType("other")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypePassport:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeDrivingLicence:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeNationalID:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentTypeOther:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsIdentityDocumentType value: %v", v)
	}

	*i = v

	return nil
}

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus is an enum type.
type StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus string

// StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus values enumeration.
const (
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("passed")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("failed")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("in_progress")
	StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther = StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus("other")
)

// MarshalJSON encodes JSON.
func (i StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus) MarshalJSON() ([]byte, error) {
	switch i {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther:

	default:
		return nil, fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus(ii)

	switch v {
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusPassed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusFailed:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusInProgress:
	case StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatusOther:

	default:
		return fmt.Errorf("unexpected StatePayloadDataPartnerVerifiedDataPeopleItemsIdentityDocumentChecksItemsStatus value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode is an enum type.
type GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode string

// GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode values enumeration.
const (
	GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment = GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode("early_repayment")
	GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown = GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode("draw_down")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode(ii)

	switch v {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestQueryModeDrawDown:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestQueryMode value: %v", v)
	}

	*i = v

	return nil
}

// GetCreditFacilityRepaymentScheduleStateKeyRequestMode is an enum type.
type GetCreditFacilityRepaymentScheduleStateKeyRequestMode string

// GetCreditFacilityRepaymentScheduleStateKeyRequestMode values enumeration.
const (
	GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment = GetCreditFacilityRepaymentScheduleStateKeyRequestMode("early_repayment")
	GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown = GetCreditFacilityRepaymentScheduleStateKeyRequestMode("draw_down")
)

// MarshalJSON encodes JSON.
func (i GetCreditFacilityRepaymentScheduleStateKeyRequestMode) MarshalJSON() ([]byte, error) {
	switch i {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown:

	default:
		return nil, fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestMode value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *GetCreditFacilityRepaymentScheduleStateKeyRequestMode) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := GetCreditFacilityRepaymentScheduleStateKeyRequestMode(ii)

	switch v {
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeEarlyRepayment:
	case GetCreditFacilityRepaymentScheduleStateKeyRequestModeDrawDown:

	default:
		return fmt.Errorf("unexpected GetCreditFacilityRepaymentScheduleStateKeyRequestMode value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
